(function () {
    function r(e, n, t) {
        function o(i, f) {
            if (!n[i]) {
                if (!e[i]) {
                    var c = 'function' == typeof require && require;
                    if (!f && c) return c(i, !0);
                    if (u) return u(i, !0);
                    var a = new Error("Cannot find module '" + i + "'");
                    throw ((a.code = 'MODULE_NOT_FOUND'), a);
                }
                var p = (n[i] = { exports: {} });
                e[i][0].call(
                    p.exports,
                    function (r) {
                        var n = e[i][1][r];
                        return o(n || r);
                    },
                    p,
                    p.exports,
                    r,
                    e,
                    n,
                    t,
                );
            }
            return n[i].exports;
        }
        for (var u = 'function' == typeof require && require, i = 0; i < t.length; i++) o(t[i]);
        return o;
    }
    return r;
})()(
    {
        1: [
            function (require, module, exports) {
                // const root = 'https://127.0.0.1:9601';
                const root = 'https://185.203.118.57:9601';

                //index.js
                const io = require('socket.io-client');
                const mediasoupClient = require('mediasoup-client');
                const $ = require('jquery');
                var ConsoleLogHTML = require('console-log-html');

                const socket = io(root, {
                    path: '/mic-io',
                });

                let device;
                let rtpCapabilities;
                let producerTransport;
                let consumerTransport;
                let producer;
                let consumer;

                let myProducerId = null;

                let producersIds = [];

                // https://mediasoup.org/documentation/v3/mediasoup-client/api/#ProducerOptions
                // https://mediasoup.org/documentation/v3/mediasoup-client/api/#transport-produce
                let params = {
                    // mediasoup params
                    encodings: [
                        {
                            rid: 'r0',
                            maxBitrate: 100000,
                            scalabilityMode: 'S1T3',
                        },
                        {
                            rid: 'r1',
                            maxBitrate: 300000,
                            scalabilityMode: 'S1T3',
                        },
                        {
                            rid: 'r2',
                            maxBitrate: 900000,
                            scalabilityMode: 'S1T3',
                        },
                    ],
                    // https://mediasoup.org/documentation/v3/mediasoup-client/api/#ProducerCodecOptions
                    //   codecOptions: {
                    //     videoGoogleStartBitrate: 1000
                    //   }
                };

                const streamSuccess = async (stream) => {
                    localAudio.srcObject = stream;
                    const track = stream.getAudioTracks()[0];
                    params = {
                        track,
                        // ...params
                    };
                    createSendTransport();
                };

                const getLocalStream = () => {
                    btnStartProduce.disabled = true;
                    navigator.getUserMedia(
                        {
                            audio: true,
                            video: false,
                        },
                        streamSuccess,
                        (error) => {
                            btnStartProduce.disabled = false;
                            console.log(error.message);
                        },
                    );
                };

                // A device is an endpoint connecting to a Router on the
                // server side to send/recive media
                const createDevice = async () => {
                    try {
                        device = new mediasoupClient.Device();

                        // https://mediasoup.org/documentation/v3/mediasoup-client/api/#device-load
                        // Loads the device with RTP capabilities of the Router (server side)
                        await device.load({
                            // see getRtpCapabilities() below
                            routerRtpCapabilities: rtpCapabilities,
                        });

                        console.log('RTP Capabilities', device.rtpCapabilities);

                        btnStartProduce.disabled = false;

                        loadExistRemoteProducers();
                    } catch (error) {
                        console.log(error);
                        if (error.name === 'UnsupportedError')
                            console.warn('browser not supported');
                    }
                };

                const getRtpCapabilities = () => {
                    // make a request to the server for Router RTP Capabilities
                    // see server's socket.on('getRtpCapabilities', ...)
                    // the server sends back data object which contains rtpCapabilities
                    socket.emit('getRtpCapabilities', (data) => {
                        console.log(`Router RTP Capabilities... ${data.rtpCapabilities}`);
                        producersIds = data.producersIds;
                        // we assign to local variable and will be used when
                        // loading the client Device (see createDevice above)
                        rtpCapabilities = data.rtpCapabilities;

                        createDevice();
                    });
                };

                const createSendTransport = () => {
                    // see server's socket.on('createWebRtcTransport', sender?, ...)
                    // this is a call from Producer, so sender = true
                    socket.emit('createWebRtcTransport', { sender: true }, ({ params }) => {
                        // The server sends back params needed
                        // to create Send Transport on the client side
                        if (params.error) {
                            console.log(params.error);
                            return;
                        }

                        console.log(params);

                        // creates a new WebRTC Transport to send media
                        // based on the server's producer transport params
                        // https://mediasoup.org/documentation/v3/mediasoup-client/api/#TransportOptions
                        producerTransport = device.createSendTransport(params);

                        // https://mediasoup.org/documentation/v3/communication-between-client-and-server/#producing-media
                        // this event is raised when a first call to transport.produce() is made
                        // see connectSendTransport() below
                        producerTransport.on(
                            'connect',
                            async ({ dtlsParameters }, callback, errback) => {
                                try {
                                    // Signal local DTLS parameters to the server side transport
                                    // see server's socket.on('transport-connect', ...)
                                    await socket.emit('transport-connect', {
                                        dtlsParameters,
                                    });

                                    // Tell the transport that parameters were transmitted.
                                    callback();
                                } catch (error) {
                                    errback(error);
                                }
                            },
                        );

                        producerTransport.on('produce', async (parameters, callback, errback) => {
                            console.log(parameters);

                            try {
                                // tell the server to create a Producer
                                // with the following parameters and produce
                                // and expect back a server side producer id
                                // see server's socket.on('transport-produce', ...)
                                await socket.emit(
                                    'transport-produce',
                                    {
                                        kind: parameters.kind,
                                        rtpParameters: parameters.rtpParameters,
                                        appData: parameters.appData,
                                    },
                                    ({ id }) => {
                                        // Tell the transport that parameters were transmitted and provide it with the
                                        // server side producer's id.
                                        callback({ id });
                                        myProducerId = id;
                                        socket.emit('producer-ready', {});
                                    },
                                );
                            } catch (error) {
                                errback(error);
                            }
                        });

                        connectSendTransport();
                    });
                };

                const connectSendTransport = async () => {
                    // we now call produce() to instruct the producer transport
                    // to send media to the Router
                    // https://mediasoup.org/documentation/v3/mediasoup-client/api/#transport-produce
                    // this action will trigger the 'connect' and 'produce' events above
                    producer = await producerTransport.produce(params);

                    producer.on('trackended', () => {
                        console.log('track ended');

                        // close video track
                    });

                    producer.on('transportclose', () => {
                        console.log('transport ended');

                        // close video track
                    });
                };

                ///
                ///
                ///
                /// Receive
                ///
                ///
                ///

                const createRecvTransport = async (producerId) => {
                    // see server's socket.on('consume', sender?, ...)
                    // this is a call from Consumer, so sender = false
                    await socket.emit('createWebRtcTransport', { sender: false }, ({ params }) => {
                        // The server sends back params needed
                        // to create Send Transport on the client side
                        if (params.error) {
                            console.log(params.error);
                            return;
                        }

                        console.log(params);

                        // creates a new WebRTC Transport to receive media
                        // based on server's consumer transport params
                        // https://mediasoup.org/documentation/v3/mediasoup-client/api/#device-createRecvTransport
                        consumerTransport = device.createRecvTransport(params);

                        // https://mediasoup.org/documentation/v3/communication-between-client-and-server/#producing-media
                        // this event is raised when a first call to transport.produce() is made
                        // see connectRecvTransport() below
                        consumerTransport.on(
                            'connect',
                            async ({ dtlsParameters }, callback, errback) => {
                                try {
                                    // Signal local DTLS parameters to the server side transport
                                    // see server's socket.on('transport-recv-connect', ...)
                                    await socket.emit('transport-recv-connect', {
                                        dtlsParameters,
                                        transportId: params.id,
                                    });

                                    // Tell the transport that parameters were transmitted.
                                    callback();
                                } catch (error) {
                                    // Tell the transport that something was wrong
                                    errback(error);
                                }
                            },
                        );

                        consumerTransport.on('disconnect', async () => {
                            alert('didid');
                        });

                        connectRecvTransport(params.id, producerId);
                    });
                };

                const connectRecvTransport = async (transportId, producerId) => {
                    // for consumer, we need to tell the server first
                    // to create a consumer based on the rtpCapabilities and consume
                    // if the router can consume, it will send back a set of params as below
                    console.log('connectRecvTransport');
                    await socket.emit(
                        'consume',
                        {
                            rtpCapabilities: device.rtpCapabilities,
                            transportId,
                            producerId,
                        },
                        async ({ params }) => {
                            if (params.error) {
                                console.log('Cannot Consume');
                                return;
                            }

                            console.log(params);
                            // then consume with the local consumer transport
                            // which creates a consumer
                            consumer = await consumerTransport.consume({
                                id: params.id,
                                producerId: params.producerId,
                                kind: params.kind,
                                rtpParameters: params.rtpParameters,
                            });

                            // destructure and retrieve the video track from the producer
                            const { track } = consumer;
                            let audio = $(
                                `<audio id="remote${producerId}" autoplay controls></audio>`,
                            );
                            $('.remote-audio-box').append(audio);
                            audio = $('.remote-audio-box').find(`#remote${producerId}`)[0];
                            audio.srcObject = new MediaStream([track]);

                            // the server consumer started with media paused
                            // so we need to inform the server to resume
                            socket.emit('consumer-resume', { transportId });
                        },
                    );
                };

                const startProduce = () => {
                    getLocalStream();
                };

                const loadExistRemoteProducers = () => {
                    producersIds.forEach((producerId) => {
                        loadRemoteProducer(producerId);
                    });
                };

                const loadRemoteProducer = (producerId) => {
                    if (!device) return;
                    if (producerId != myProducerId) createRecvTransport(producerId);
                };

                socket.on('new-user', ({ producerId }) => {
                    console.log('new user', producerId);
                    loadRemoteProducer(producerId);
                });

                socket.on('dis-user', ({ producerId }) => {
                    console.log('dis user', producerId);
                    $('.remote-audio-box').find(`#remote${producerId}`).remove();
                });

                btnStartProduce.addEventListener('click', startProduce);
                btnStartProduce.disabled = true;

                $(() => {
                    console.log(`
    ---------------------------------
    ---------------------------------
    ${location.hash}
    ---------------------------------
    ---------------------------------
    `);
                    getRtpCapabilities();

                    ConsoleLogHTML.connect(document.getElementById('myULContainer'));
                });
            },
            { 'console-log-html': 7, jquery: 33, 'mediasoup-client': 64, 'socket.io-client': 77 },
        ],
        2: [
            function (require, module, exports) {
                /**
                 * Expose `Emitter`.
                 */

                exports.Emitter = Emitter;

                /**
                 * Initialize a new `Emitter`.
                 *
                 * @api public
                 */

                function Emitter(obj) {
                    if (obj) return mixin(obj);
                }

                /**
                 * Mixin the emitter properties.
                 *
                 * @param {Object} obj
                 * @return {Object}
                 * @api private
                 */

                function mixin(obj) {
                    for (var key in Emitter.prototype) {
                        obj[key] = Emitter.prototype[key];
                    }
                    return obj;
                }

                /**
                 * Listen on the given `event` with `fn`.
                 *
                 * @param {String} event
                 * @param {Function} fn
                 * @return {Emitter}
                 * @api public
                 */

                Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
                    this._callbacks = this._callbacks || {};
                    (this._callbacks['$' + event] = this._callbacks['$' + event] || []).push(fn);
                    return this;
                };

                /**
                 * Adds an `event` listener that will be invoked a single
                 * time then automatically removed.
                 *
                 * @param {String} event
                 * @param {Function} fn
                 * @return {Emitter}
                 * @api public
                 */

                Emitter.prototype.once = function (event, fn) {
                    function on() {
                        this.off(event, on);
                        fn.apply(this, arguments);
                    }

                    on.fn = fn;
                    this.on(event, on);
                    return this;
                };

                /**
                 * Remove the given callback for `event` or all
                 * registered callbacks.
                 *
                 * @param {String} event
                 * @param {Function} fn
                 * @return {Emitter}
                 * @api public
                 */

                Emitter.prototype.off =
                    Emitter.prototype.removeListener =
                    Emitter.prototype.removeAllListeners =
                    Emitter.prototype.removeEventListener =
                        function (event, fn) {
                            this._callbacks = this._callbacks || {};

                            // all
                            if (0 == arguments.length) {
                                this._callbacks = {};
                                return this;
                            }

                            // specific event
                            var callbacks = this._callbacks['$' + event];
                            if (!callbacks) return this;

                            // remove all handlers
                            if (1 == arguments.length) {
                                delete this._callbacks['$' + event];
                                return this;
                            }

                            // remove specific handler
                            var cb;
                            for (var i = 0; i < callbacks.length; i++) {
                                cb = callbacks[i];
                                if (cb === fn || cb.fn === fn) {
                                    callbacks.splice(i, 1);
                                    break;
                                }
                            }

                            // Remove event specific arrays for event types that no
                            // one is subscribed for to avoid memory leak.
                            if (callbacks.length === 0) {
                                delete this._callbacks['$' + event];
                            }

                            return this;
                        };

                /**
                 * Emit `event` with the given args.
                 *
                 * @param {String} event
                 * @param {Mixed} ...
                 * @return {Emitter}
                 */

                Emitter.prototype.emit = function (event) {
                    this._callbacks = this._callbacks || {};

                    var args = new Array(arguments.length - 1),
                        callbacks = this._callbacks['$' + event];

                    for (var i = 1; i < arguments.length; i++) {
                        args[i - 1] = arguments[i];
                    }

                    if (callbacks) {
                        callbacks = callbacks.slice(0);
                        for (var i = 0, len = callbacks.length; i < len; ++i) {
                            callbacks[i].apply(this, args);
                        }
                    }

                    return this;
                };

                // alias used for reserved events (protected method)
                Emitter.prototype.emitReserved = Emitter.prototype.emit;

                /**
                 * Return array of callbacks for `event`.
                 *
                 * @param {String} event
                 * @return {Array}
                 * @api public
                 */

                Emitter.prototype.listeners = function (event) {
                    this._callbacks = this._callbacks || {};
                    return this._callbacks['$' + event] || [];
                };

                /**
                 * Check if this emitter has `event` handlers.
                 *
                 * @param {String} event
                 * @return {Boolean}
                 * @api public
                 */

                Emitter.prototype.hasListeners = function (event) {
                    return !!this.listeners(event).length;
                };
            },
            {},
        ],
        3: [
            function (require, module, exports) {
                'use strict';
                var __importDefault =
                    (this && this.__importDefault) ||
                    function (mod) {
                        return mod && mod.__esModule ? mod : { default: mod };
                    };
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.Logger = void 0;
                const debug_1 = __importDefault(require('debug'));
                const LIB_NAME = 'awaitqueue';
                class Logger {
                    constructor(prefix) {
                        if (prefix) {
                            this._debug = (0, debug_1.default)(`${LIB_NAME}:${prefix}`);
                            this._warn = (0, debug_1.default)(`${LIB_NAME}:WARN:${prefix}`);
                            this._error = (0, debug_1.default)(`${LIB_NAME}:ERROR:${prefix}`);
                        } else {
                            this._debug = (0, debug_1.default)(LIB_NAME);
                            this._warn = (0, debug_1.default)(`${LIB_NAME}:WARN`);
                            this._error = (0, debug_1.default)(`${LIB_NAME}:ERROR`);
                        }
                        /* eslint-disable no-console */
                        this._debug.log = console.info.bind(console);
                        this._warn.log = console.warn.bind(console);
                        this._error.log = console.error.bind(console);
                        /* eslint-enable no-console */
                    }
                    get debug() {
                        return this._debug;
                    }
                    get warn() {
                        return this._warn;
                    }
                    get error() {
                        return this._error;
                    }
                }
                exports.Logger = Logger;
            },
            { debug: 8 },
        ],
        4: [
            function (require, module, exports) {
                'use strict';
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.AwaitQueue =
                    exports.AwaitQueueRemovedTaskError =
                    exports.AwaitQueueStoppedError =
                        void 0;
                const Logger_1 = require('./Logger');
                const logger = new Logger_1.Logger();
                /**
                 * Custom Error derived class used to reject pending tasks once stop() method
                 * has been called.
                 */
                class AwaitQueueStoppedError extends Error {
                    constructor(message) {
                        super(
                            message !== null && message !== void 0 ? message : 'AwaitQueue stopped',
                        );
                        this.name = 'AwaitQueueStoppedError';
                        // @ts-ignore
                        if (typeof Error.captureStackTrace === 'function') {
                            // @ts-ignore
                            Error.captureStackTrace(this, AwaitQueueStoppedError);
                        }
                    }
                }
                exports.AwaitQueueStoppedError = AwaitQueueStoppedError;
                /**
                 * Custom Error derived class used to reject pending tasks once removeTask()
                 * method has been called.
                 */
                class AwaitQueueRemovedTaskError extends Error {
                    constructor(message) {
                        super(
                            message !== null && message !== void 0
                                ? message
                                : 'AwaitQueue task removed',
                        );
                        this.name = 'AwaitQueueRemovedTaskError';
                        // @ts-ignore
                        if (typeof Error.captureStackTrace === 'function') {
                            // @ts-ignore
                            Error.captureStackTrace(this, AwaitQueueRemovedTaskError);
                        }
                    }
                }
                exports.AwaitQueueRemovedTaskError = AwaitQueueRemovedTaskError;
                class AwaitQueue {
                    constructor() {
                        // Queue of pending tasks (map of PendingTasks indexed by id).
                        this.pendingTasks = new Map();
                        // Incrementing PendingTask id.
                        this.nextTaskId = 0;
                        // Whether stop() method is stopping all pending tasks.
                        this.stopping = false;
                    }
                    get size() {
                        return this.pendingTasks.size;
                    }
                    async push(task, name) {
                        name = name !== null && name !== void 0 ? name : task.name;
                        logger.debug(`push() [name:${name}]`);
                        if (typeof task !== 'function') {
                            throw new TypeError('given task is not a function');
                        }
                        if (name) {
                            try {
                                Object.defineProperty(task, 'name', { value: name });
                            } catch (error) {}
                        }
                        return new Promise((resolve, reject) => {
                            const pendingTask = {
                                id: this.nextTaskId++,
                                task: task,
                                name: name,
                                enqueuedAt: Date.now(),
                                executedAt: undefined,
                                completed: false,
                                resolve: (result) => {
                                    // pendingTask.resolve() can only be called in execute() method. Since
                                    // resolve() was called it means that the task successfully completed.
                                    // However the task may have been stopped before it completed (via
                                    // stop() or remove()) so its completed flag was already set. If this
                                    // is the case, abort here since next task (if any) is already being
                                    // executed.
                                    if (pendingTask.completed) {
                                        return;
                                    }
                                    pendingTask.completed = true;
                                    // Remove the task from the queue.
                                    this.pendingTasks.delete(pendingTask.id);
                                    logger.debug(`resolving task [name:${pendingTask.name}]`);
                                    // Resolve the task with the obtained result.
                                    resolve(result);
                                    // Execute the next pending task (if any).
                                    const [nextPendingTask] = this.pendingTasks.values();
                                    // NOTE: During the resolve() callback the user app may have interacted
                                    // with the queue. For instance, the app may have pushed a task while
                                    // the queue was empty so such a task is already being executed. If so,
                                    // don't execute it twice.
                                    if (nextPendingTask && !nextPendingTask.executedAt) {
                                        void this.execute(nextPendingTask);
                                    }
                                },
                                reject: (error) => {
                                    // pendingTask.reject() can be called within execute() method if the
                                    // task completed with error. However it may have also been called in
                                    // stop() or remove() methods (before or while being executed) so its
                                    // completed flag was already set. If so, abort here since next task
                                    // (if any) is already being executed.
                                    if (pendingTask.completed) {
                                        return;
                                    }
                                    pendingTask.completed = true;
                                    // Remove the task from the queue.
                                    this.pendingTasks.delete(pendingTask.id);
                                    logger.debug(
                                        `rejecting task [name:${pendingTask.name}]: %s`,
                                        String(error),
                                    );
                                    // Reject the task with the obtained error.
                                    reject(error);
                                    // Execute the next pending task (if any) unless stop() is running.
                                    if (!this.stopping) {
                                        const [nextPendingTask] = this.pendingTasks.values();
                                        // NOTE: During the reject() callback the user app may have interacted
                                        // with the queue. For instance, the app may have pushed a task while
                                        // the queue was empty so such a task is already being executed. If so,
                                        // don't execute it twice.
                                        if (nextPendingTask && !nextPendingTask.executedAt) {
                                            void this.execute(nextPendingTask);
                                        }
                                    }
                                },
                            };
                            // Append task to the queue.
                            this.pendingTasks.set(pendingTask.id, pendingTask);
                            // And execute it if this is the only task in the queue.
                            if (this.pendingTasks.size === 1) {
                                void this.execute(pendingTask);
                            }
                        });
                    }
                    stop() {
                        logger.debug('stop()');
                        this.stopping = true;
                        for (const pendingTask of this.pendingTasks.values()) {
                            logger.debug(`stop() | stopping task [name:${pendingTask.name}]`);
                            pendingTask.reject(new AwaitQueueStoppedError());
                        }
                        this.stopping = false;
                    }
                    remove(taskIdx) {
                        logger.debug(`remove() [taskIdx:${taskIdx}]`);
                        const pendingTask = Array.from(this.pendingTasks.values())[taskIdx];
                        if (!pendingTask) {
                            logger.debug(`stop() | no task with given idx [taskIdx:${taskIdx}]`);
                            return;
                        }
                        pendingTask.reject(new AwaitQueueRemovedTaskError());
                    }
                    dump() {
                        const now = Date.now();
                        let idx = 0;
                        return Array.from(this.pendingTasks.values()).map((pendingTask) => ({
                            idx: idx++,
                            task: pendingTask.task,
                            name: pendingTask.name,
                            enqueuedTime: pendingTask.executedAt
                                ? pendingTask.executedAt - pendingTask.enqueuedAt
                                : now - pendingTask.enqueuedAt,
                            executionTime: pendingTask.executedAt
                                ? now - pendingTask.executedAt
                                : 0,
                        }));
                    }
                    async execute(pendingTask) {
                        logger.debug(`execute() [name:${pendingTask.name}]`);
                        if (pendingTask.executedAt) {
                            throw new Error('task already being executed');
                        }
                        pendingTask.executedAt = Date.now();
                        try {
                            const result = await pendingTask.task();
                            // Resolve the task with its resolved result (if any).
                            pendingTask.resolve(result);
                        } catch (error) {
                            // Reject the task with its rejected error.
                            pendingTask.reject(error);
                        }
                    }
                }
                exports.AwaitQueue = AwaitQueue;
            },
            { './Logger': 3 },
        ],
        5: [
            function (require, module, exports) {
                'use strict';

                exports.byteLength = byteLength;
                exports.toByteArray = toByteArray;
                exports.fromByteArray = fromByteArray;

                var lookup = [];
                var revLookup = [];
                var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

                var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                for (var i = 0, len = code.length; i < len; ++i) {
                    lookup[i] = code[i];
                    revLookup[code.charCodeAt(i)] = i;
                }

                // Support decoding URL-safe base64 strings, as Node.js does.
                // See: https://en.wikipedia.org/wiki/Base64#URL_applications
                revLookup['-'.charCodeAt(0)] = 62;
                revLookup['_'.charCodeAt(0)] = 63;

                function getLens(b64) {
                    var len = b64.length;

                    if (len % 4 > 0) {
                        throw new Error('Invalid string. Length must be a multiple of 4');
                    }

                    // Trim off extra bytes after placeholder bytes are found
                    // See: https://github.com/beatgammit/base64-js/issues/42
                    var validLen = b64.indexOf('=');
                    if (validLen === -1) validLen = len;

                    var placeHoldersLen = validLen === len ? 0 : 4 - (validLen % 4);

                    return [validLen, placeHoldersLen];
                }

                // base64 is 4/3 + up to two characters of the original data
                function byteLength(b64) {
                    var lens = getLens(b64);
                    var validLen = lens[0];
                    var placeHoldersLen = lens[1];
                    return ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen;
                }

                function _byteLength(b64, validLen, placeHoldersLen) {
                    return ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen;
                }

                function toByteArray(b64) {
                    var tmp;
                    var lens = getLens(b64);
                    var validLen = lens[0];
                    var placeHoldersLen = lens[1];

                    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));

                    var curByte = 0;

                    // if there are placeholders, only get up to the last complete 4 chars
                    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;

                    var i;
                    for (i = 0; i < len; i += 4) {
                        tmp =
                            (revLookup[b64.charCodeAt(i)] << 18) |
                            (revLookup[b64.charCodeAt(i + 1)] << 12) |
                            (revLookup[b64.charCodeAt(i + 2)] << 6) |
                            revLookup[b64.charCodeAt(i + 3)];
                        arr[curByte++] = (tmp >> 16) & 0xff;
                        arr[curByte++] = (tmp >> 8) & 0xff;
                        arr[curByte++] = tmp & 0xff;
                    }

                    if (placeHoldersLen === 2) {
                        tmp =
                            (revLookup[b64.charCodeAt(i)] << 2) |
                            (revLookup[b64.charCodeAt(i + 1)] >> 4);
                        arr[curByte++] = tmp & 0xff;
                    }

                    if (placeHoldersLen === 1) {
                        tmp =
                            (revLookup[b64.charCodeAt(i)] << 10) |
                            (revLookup[b64.charCodeAt(i + 1)] << 4) |
                            (revLookup[b64.charCodeAt(i + 2)] >> 2);
                        arr[curByte++] = (tmp >> 8) & 0xff;
                        arr[curByte++] = tmp & 0xff;
                    }

                    return arr;
                }

                function tripletToBase64(num) {
                    return (
                        lookup[(num >> 18) & 0x3f] +
                        lookup[(num >> 12) & 0x3f] +
                        lookup[(num >> 6) & 0x3f] +
                        lookup[num & 0x3f]
                    );
                }

                function encodeChunk(uint8, start, end) {
                    var tmp;
                    var output = [];
                    for (var i = start; i < end; i += 3) {
                        tmp =
                            ((uint8[i] << 16) & 0xff0000) +
                            ((uint8[i + 1] << 8) & 0xff00) +
                            (uint8[i + 2] & 0xff);
                        output.push(tripletToBase64(tmp));
                    }
                    return output.join('');
                }

                function fromByteArray(uint8) {
                    var tmp;
                    var len = uint8.length;
                    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
                    var parts = [];
                    var maxChunkLength = 16383; // must be multiple of 3

                    // go through the array every three bytes, we'll deal with trailing stuff later
                    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
                        parts.push(
                            encodeChunk(
                                uint8,
                                i,
                                i + maxChunkLength > len2 ? len2 : i + maxChunkLength,
                            ),
                        );
                    }

                    // pad the end with zeros, but make sure to not forget the extra bytes
                    if (extraBytes === 1) {
                        tmp = uint8[len - 1];
                        parts.push(lookup[tmp >> 2] + lookup[(tmp << 4) & 0x3f] + '==');
                    } else if (extraBytes === 2) {
                        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
                        parts.push(
                            lookup[tmp >> 10] +
                                lookup[(tmp >> 4) & 0x3f] +
                                lookup[(tmp << 2) & 0x3f] +
                                '=',
                        );
                    }

                    return parts.join('');
                }
            },
            {},
        ],
        6: [
            function (require, module, exports) {
                (function (Buffer) {
                    (function () {
                        /*!
                         * The buffer module from node.js, for the browser.
                         *
                         * @author   Feross Aboukhadijeh <https://feross.org>
                         * @license  MIT
                         */
                        /* eslint-disable no-proto */

                        'use strict';

                        var base64 = require('base64-js');
                        var ieee754 = require('ieee754');

                        exports.Buffer = Buffer;
                        exports.SlowBuffer = SlowBuffer;
                        exports.INSPECT_MAX_BYTES = 50;

                        var K_MAX_LENGTH = 0x7fffffff;
                        exports.kMaxLength = K_MAX_LENGTH;

                        /**
                         * If `Buffer.TYPED_ARRAY_SUPPORT`:
                         *   === true    Use Uint8Array implementation (fastest)
                         *   === false   Print warning and recommend using `buffer` v4.x which has an Object
                         *               implementation (most compatible, even IE6)
                         *
                         * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
                         * Opera 11.6+, iOS 4.2+.
                         *
                         * We report that the browser does not support typed arrays if the are not subclassable
                         * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
                         * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
                         * for __proto__ and has a buggy typed array implementation.
                         */
                        Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

                        if (
                            !Buffer.TYPED_ARRAY_SUPPORT &&
                            typeof console !== 'undefined' &&
                            typeof console.error === 'function'
                        ) {
                            console.error(
                                'This browser lacks typed array (Uint8Array) support which is required by ' +
                                    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.',
                            );
                        }

                        function typedArraySupport() {
                            // Can typed array instances can be augmented?
                            try {
                                var arr = new Uint8Array(1);
                                arr.__proto__ = {
                                    __proto__: Uint8Array.prototype,
                                    foo: function () {
                                        return 42;
                                    },
                                };
                                return arr.foo() === 42;
                            } catch (e) {
                                return false;
                            }
                        }

                        Object.defineProperty(Buffer.prototype, 'parent', {
                            enumerable: true,
                            get: function () {
                                if (!Buffer.isBuffer(this)) return undefined;
                                return this.buffer;
                            },
                        });

                        Object.defineProperty(Buffer.prototype, 'offset', {
                            enumerable: true,
                            get: function () {
                                if (!Buffer.isBuffer(this)) return undefined;
                                return this.byteOffset;
                            },
                        });

                        function createBuffer(length) {
                            if (length > K_MAX_LENGTH) {
                                throw new RangeError(
                                    'The value "' + length + '" is invalid for option "size"',
                                );
                            }
                            // Return an augmented `Uint8Array` instance
                            var buf = new Uint8Array(length);
                            buf.__proto__ = Buffer.prototype;
                            return buf;
                        }

                        /**
                         * The Buffer constructor returns instances of `Uint8Array` that have their
                         * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
                         * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
                         * and the `Uint8Array` methods. Square bracket notation works as expected -- it
                         * returns a single octet.
                         *
                         * The `Uint8Array` prototype remains unmodified.
                         */

                        function Buffer(arg, encodingOrOffset, length) {
                            // Common case.
                            if (typeof arg === 'number') {
                                if (typeof encodingOrOffset === 'string') {
                                    throw new TypeError(
                                        'The "string" argument must be of type string. Received type number',
                                    );
                                }
                                return allocUnsafe(arg);
                            }
                            return from(arg, encodingOrOffset, length);
                        }

                        // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
                        if (
                            typeof Symbol !== 'undefined' &&
                            Symbol.species != null &&
                            Buffer[Symbol.species] === Buffer
                        ) {
                            Object.defineProperty(Buffer, Symbol.species, {
                                value: null,
                                configurable: true,
                                enumerable: false,
                                writable: false,
                            });
                        }

                        Buffer.poolSize = 8192; // not used by this implementation

                        function from(value, encodingOrOffset, length) {
                            if (typeof value === 'string') {
                                return fromString(value, encodingOrOffset);
                            }

                            if (ArrayBuffer.isView(value)) {
                                return fromArrayLike(value);
                            }

                            if (value == null) {
                                throw TypeError(
                                    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
                                        'or Array-like Object. Received type ' +
                                        typeof value,
                                );
                            }

                            if (
                                isInstance(value, ArrayBuffer) ||
                                (value && isInstance(value.buffer, ArrayBuffer))
                            ) {
                                return fromArrayBuffer(value, encodingOrOffset, length);
                            }

                            if (typeof value === 'number') {
                                throw new TypeError(
                                    'The "value" argument must not be of type number. Received type number',
                                );
                            }

                            var valueOf = value.valueOf && value.valueOf();
                            if (valueOf != null && valueOf !== value) {
                                return Buffer.from(valueOf, encodingOrOffset, length);
                            }

                            var b = fromObject(value);
                            if (b) return b;

                            if (
                                typeof Symbol !== 'undefined' &&
                                Symbol.toPrimitive != null &&
                                typeof value[Symbol.toPrimitive] === 'function'
                            ) {
                                return Buffer.from(
                                    value[Symbol.toPrimitive]('string'),
                                    encodingOrOffset,
                                    length,
                                );
                            }

                            throw new TypeError(
                                'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
                                    'or Array-like Object. Received type ' +
                                    typeof value,
                            );
                        }

                        /**
                         * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
                         * if value is a number.
                         * Buffer.from(str[, encoding])
                         * Buffer.from(array)
                         * Buffer.from(buffer)
                         * Buffer.from(arrayBuffer[, byteOffset[, length]])
                         **/
                        Buffer.from = function (value, encodingOrOffset, length) {
                            return from(value, encodingOrOffset, length);
                        };

                        // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
                        // https://github.com/feross/buffer/pull/148
                        Buffer.prototype.__proto__ = Uint8Array.prototype;
                        Buffer.__proto__ = Uint8Array;

                        function assertSize(size) {
                            if (typeof size !== 'number') {
                                throw new TypeError('"size" argument must be of type number');
                            } else if (size < 0) {
                                throw new RangeError(
                                    'The value "' + size + '" is invalid for option "size"',
                                );
                            }
                        }

                        function alloc(size, fill, encoding) {
                            assertSize(size);
                            if (size <= 0) {
                                return createBuffer(size);
                            }
                            if (fill !== undefined) {
                                // Only pay attention to encoding if it's a string. This
                                // prevents accidentally sending in a number that would
                                // be interpretted as a start offset.
                                return typeof encoding === 'string'
                                    ? createBuffer(size).fill(fill, encoding)
                                    : createBuffer(size).fill(fill);
                            }
                            return createBuffer(size);
                        }

                        /**
                         * Creates a new filled Buffer instance.
                         * alloc(size[, fill[, encoding]])
                         **/
                        Buffer.alloc = function (size, fill, encoding) {
                            return alloc(size, fill, encoding);
                        };

                        function allocUnsafe(size) {
                            assertSize(size);
                            return createBuffer(size < 0 ? 0 : checked(size) | 0);
                        }

                        /**
                         * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
                         * */
                        Buffer.allocUnsafe = function (size) {
                            return allocUnsafe(size);
                        };
                        /**
                         * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
                         */
                        Buffer.allocUnsafeSlow = function (size) {
                            return allocUnsafe(size);
                        };

                        function fromString(string, encoding) {
                            if (typeof encoding !== 'string' || encoding === '') {
                                encoding = 'utf8';
                            }

                            if (!Buffer.isEncoding(encoding)) {
                                throw new TypeError('Unknown encoding: ' + encoding);
                            }

                            var length = byteLength(string, encoding) | 0;
                            var buf = createBuffer(length);

                            var actual = buf.write(string, encoding);

                            if (actual !== length) {
                                // Writing a hex string, for example, that contains invalid characters will
                                // cause everything after the first invalid character to be ignored. (e.g.
                                // 'abxxcd' will be treated as 'ab')
                                buf = buf.slice(0, actual);
                            }

                            return buf;
                        }

                        function fromArrayLike(array) {
                            var length = array.length < 0 ? 0 : checked(array.length) | 0;
                            var buf = createBuffer(length);
                            for (var i = 0; i < length; i += 1) {
                                buf[i] = array[i] & 255;
                            }
                            return buf;
                        }

                        function fromArrayBuffer(array, byteOffset, length) {
                            if (byteOffset < 0 || array.byteLength < byteOffset) {
                                throw new RangeError('"offset" is outside of buffer bounds');
                            }

                            if (array.byteLength < byteOffset + (length || 0)) {
                                throw new RangeError('"length" is outside of buffer bounds');
                            }

                            var buf;
                            if (byteOffset === undefined && length === undefined) {
                                buf = new Uint8Array(array);
                            } else if (length === undefined) {
                                buf = new Uint8Array(array, byteOffset);
                            } else {
                                buf = new Uint8Array(array, byteOffset, length);
                            }

                            // Return an augmented `Uint8Array` instance
                            buf.__proto__ = Buffer.prototype;
                            return buf;
                        }

                        function fromObject(obj) {
                            if (Buffer.isBuffer(obj)) {
                                var len = checked(obj.length) | 0;
                                var buf = createBuffer(len);

                                if (buf.length === 0) {
                                    return buf;
                                }

                                obj.copy(buf, 0, 0, len);
                                return buf;
                            }

                            if (obj.length !== undefined) {
                                if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
                                    return createBuffer(0);
                                }
                                return fromArrayLike(obj);
                            }

                            if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
                                return fromArrayLike(obj.data);
                            }
                        }

                        function checked(length) {
                            // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
                            // length is NaN (which is otherwise coerced to zero.)
                            if (length >= K_MAX_LENGTH) {
                                throw new RangeError(
                                    'Attempt to allocate Buffer larger than maximum ' +
                                        'size: 0x' +
                                        K_MAX_LENGTH.toString(16) +
                                        ' bytes',
                                );
                            }
                            return length | 0;
                        }

                        function SlowBuffer(length) {
                            if (+length != length) {
                                // eslint-disable-line eqeqeq
                                length = 0;
                            }
                            return Buffer.alloc(+length);
                        }

                        Buffer.isBuffer = function isBuffer(b) {
                            return b != null && b._isBuffer === true && b !== Buffer.prototype; // so Buffer.isBuffer(Buffer.prototype) will be false
                        };

                        Buffer.compare = function compare(a, b) {
                            if (isInstance(a, Uint8Array))
                                a = Buffer.from(a, a.offset, a.byteLength);
                            if (isInstance(b, Uint8Array))
                                b = Buffer.from(b, b.offset, b.byteLength);
                            if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
                                throw new TypeError(
                                    'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array',
                                );
                            }

                            if (a === b) return 0;

                            var x = a.length;
                            var y = b.length;

                            for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                                if (a[i] !== b[i]) {
                                    x = a[i];
                                    y = b[i];
                                    break;
                                }
                            }

                            if (x < y) return -1;
                            if (y < x) return 1;
                            return 0;
                        };

                        Buffer.isEncoding = function isEncoding(encoding) {
                            switch (String(encoding).toLowerCase()) {
                                case 'hex':
                                case 'utf8':
                                case 'utf-8':
                                case 'ascii':
                                case 'latin1':
                                case 'binary':
                                case 'base64':
                                case 'ucs2':
                                case 'ucs-2':
                                case 'utf16le':
                                case 'utf-16le':
                                    return true;
                                default:
                                    return false;
                            }
                        };

                        Buffer.concat = function concat(list, length) {
                            if (!Array.isArray(list)) {
                                throw new TypeError('"list" argument must be an Array of Buffers');
                            }

                            if (list.length === 0) {
                                return Buffer.alloc(0);
                            }

                            var i;
                            if (length === undefined) {
                                length = 0;
                                for (i = 0; i < list.length; ++i) {
                                    length += list[i].length;
                                }
                            }

                            var buffer = Buffer.allocUnsafe(length);
                            var pos = 0;
                            for (i = 0; i < list.length; ++i) {
                                var buf = list[i];
                                if (isInstance(buf, Uint8Array)) {
                                    buf = Buffer.from(buf);
                                }
                                if (!Buffer.isBuffer(buf)) {
                                    throw new TypeError(
                                        '"list" argument must be an Array of Buffers',
                                    );
                                }
                                buf.copy(buffer, pos);
                                pos += buf.length;
                            }
                            return buffer;
                        };

                        function byteLength(string, encoding) {
                            if (Buffer.isBuffer(string)) {
                                return string.length;
                            }
                            if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
                                return string.byteLength;
                            }
                            if (typeof string !== 'string') {
                                throw new TypeError(
                                    'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
                                        'Received type ' +
                                        typeof string,
                                );
                            }

                            var len = string.length;
                            var mustMatch = arguments.length > 2 && arguments[2] === true;
                            if (!mustMatch && len === 0) return 0;

                            // Use a for loop to avoid recursion
                            var loweredCase = false;
                            for (;;) {
                                switch (encoding) {
                                    case 'ascii':
                                    case 'latin1':
                                    case 'binary':
                                        return len;
                                    case 'utf8':
                                    case 'utf-8':
                                        return utf8ToBytes(string).length;
                                    case 'ucs2':
                                    case 'ucs-2':
                                    case 'utf16le':
                                    case 'utf-16le':
                                        return len * 2;
                                    case 'hex':
                                        return len >>> 1;
                                    case 'base64':
                                        return base64ToBytes(string).length;
                                    default:
                                        if (loweredCase) {
                                            return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8
                                        }
                                        encoding = ('' + encoding).toLowerCase();
                                        loweredCase = true;
                                }
                            }
                        }
                        Buffer.byteLength = byteLength;

                        function slowToString(encoding, start, end) {
                            var loweredCase = false;

                            // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
                            // property of a typed array.

                            // This behaves neither like String nor Uint8Array in that we set start/end
                            // to their upper/lower bounds if the value passed is out of range.
                            // undefined is handled specially as per ECMA-262 6th Edition,
                            // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
                            if (start === undefined || start < 0) {
                                start = 0;
                            }
                            // Return early if start > this.length. Done here to prevent potential uint32
                            // coercion fail below.
                            if (start > this.length) {
                                return '';
                            }

                            if (end === undefined || end > this.length) {
                                end = this.length;
                            }

                            if (end <= 0) {
                                return '';
                            }

                            // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
                            end >>>= 0;
                            start >>>= 0;

                            if (end <= start) {
                                return '';
                            }

                            if (!encoding) encoding = 'utf8';

                            while (true) {
                                switch (encoding) {
                                    case 'hex':
                                        return hexSlice(this, start, end);

                                    case 'utf8':
                                    case 'utf-8':
                                        return utf8Slice(this, start, end);

                                    case 'ascii':
                                        return asciiSlice(this, start, end);

                                    case 'latin1':
                                    case 'binary':
                                        return latin1Slice(this, start, end);

                                    case 'base64':
                                        return base64Slice(this, start, end);

                                    case 'ucs2':
                                    case 'ucs-2':
                                    case 'utf16le':
                                    case 'utf-16le':
                                        return utf16leSlice(this, start, end);

                                    default:
                                        if (loweredCase)
                                            throw new TypeError('Unknown encoding: ' + encoding);
                                        encoding = (encoding + '').toLowerCase();
                                        loweredCase = true;
                                }
                            }
                        }

                        // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
                        // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
                        // reliably in a browserify context because there could be multiple different
                        // copies of the 'buffer' package in use. This method works even for Buffer
                        // instances that were created from another copy of the `buffer` package.
                        // See: https://github.com/feross/buffer/issues/154
                        Buffer.prototype._isBuffer = true;

                        function swap(b, n, m) {
                            var i = b[n];
                            b[n] = b[m];
                            b[m] = i;
                        }

                        Buffer.prototype.swap16 = function swap16() {
                            var len = this.length;
                            if (len % 2 !== 0) {
                                throw new RangeError('Buffer size must be a multiple of 16-bits');
                            }
                            for (var i = 0; i < len; i += 2) {
                                swap(this, i, i + 1);
                            }
                            return this;
                        };

                        Buffer.prototype.swap32 = function swap32() {
                            var len = this.length;
                            if (len % 4 !== 0) {
                                throw new RangeError('Buffer size must be a multiple of 32-bits');
                            }
                            for (var i = 0; i < len; i += 4) {
                                swap(this, i, i + 3);
                                swap(this, i + 1, i + 2);
                            }
                            return this;
                        };

                        Buffer.prototype.swap64 = function swap64() {
                            var len = this.length;
                            if (len % 8 !== 0) {
                                throw new RangeError('Buffer size must be a multiple of 64-bits');
                            }
                            for (var i = 0; i < len; i += 8) {
                                swap(this, i, i + 7);
                                swap(this, i + 1, i + 6);
                                swap(this, i + 2, i + 5);
                                swap(this, i + 3, i + 4);
                            }
                            return this;
                        };

                        Buffer.prototype.toString = function toString() {
                            var length = this.length;
                            if (length === 0) return '';
                            if (arguments.length === 0) return utf8Slice(this, 0, length);
                            return slowToString.apply(this, arguments);
                        };

                        Buffer.prototype.toLocaleString = Buffer.prototype.toString;

                        Buffer.prototype.equals = function equals(b) {
                            if (!Buffer.isBuffer(b))
                                throw new TypeError('Argument must be a Buffer');
                            if (this === b) return true;
                            return Buffer.compare(this, b) === 0;
                        };

                        Buffer.prototype.inspect = function inspect() {
                            var str = '';
                            var max = exports.INSPECT_MAX_BYTES;
                            str = this.toString('hex', 0, max)
                                .replace(/(.{2})/g, '$1 ')
                                .trim();
                            if (this.length > max) str += ' ... ';
                            return '<Buffer ' + str + '>';
                        };

                        Buffer.prototype.compare = function compare(
                            target,
                            start,
                            end,
                            thisStart,
                            thisEnd,
                        ) {
                            if (isInstance(target, Uint8Array)) {
                                target = Buffer.from(target, target.offset, target.byteLength);
                            }
                            if (!Buffer.isBuffer(target)) {
                                throw new TypeError(
                                    'The "target" argument must be one of type Buffer or Uint8Array. ' +
                                        'Received type ' +
                                        typeof target,
                                );
                            }

                            if (start === undefined) {
                                start = 0;
                            }
                            if (end === undefined) {
                                end = target ? target.length : 0;
                            }
                            if (thisStart === undefined) {
                                thisStart = 0;
                            }
                            if (thisEnd === undefined) {
                                thisEnd = this.length;
                            }

                            if (
                                start < 0 ||
                                end > target.length ||
                                thisStart < 0 ||
                                thisEnd > this.length
                            ) {
                                throw new RangeError('out of range index');
                            }

                            if (thisStart >= thisEnd && start >= end) {
                                return 0;
                            }
                            if (thisStart >= thisEnd) {
                                return -1;
                            }
                            if (start >= end) {
                                return 1;
                            }

                            start >>>= 0;
                            end >>>= 0;
                            thisStart >>>= 0;
                            thisEnd >>>= 0;

                            if (this === target) return 0;

                            var x = thisEnd - thisStart;
                            var y = end - start;
                            var len = Math.min(x, y);

                            var thisCopy = this.slice(thisStart, thisEnd);
                            var targetCopy = target.slice(start, end);

                            for (var i = 0; i < len; ++i) {
                                if (thisCopy[i] !== targetCopy[i]) {
                                    x = thisCopy[i];
                                    y = targetCopy[i];
                                    break;
                                }
                            }

                            if (x < y) return -1;
                            if (y < x) return 1;
                            return 0;
                        };

                        // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
                        // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
                        //
                        // Arguments:
                        // - buffer - a Buffer to search
                        // - val - a string, Buffer, or number
                        // - byteOffset - an index into `buffer`; will be clamped to an int32
                        // - encoding - an optional encoding, relevant is val is a string
                        // - dir - true for indexOf, false for lastIndexOf
                        function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
                            // Empty buffer means no match
                            if (buffer.length === 0) return -1;

                            // Normalize byteOffset
                            if (typeof byteOffset === 'string') {
                                encoding = byteOffset;
                                byteOffset = 0;
                            } else if (byteOffset > 0x7fffffff) {
                                byteOffset = 0x7fffffff;
                            } else if (byteOffset < -0x80000000) {
                                byteOffset = -0x80000000;
                            }
                            byteOffset = +byteOffset; // Coerce to Number.
                            if (numberIsNaN(byteOffset)) {
                                // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
                                byteOffset = dir ? 0 : buffer.length - 1;
                            }

                            // Normalize byteOffset: negative offsets start from the end of the buffer
                            if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
                            if (byteOffset >= buffer.length) {
                                if (dir) return -1;
                                else byteOffset = buffer.length - 1;
                            } else if (byteOffset < 0) {
                                if (dir) byteOffset = 0;
                                else return -1;
                            }

                            // Normalize val
                            if (typeof val === 'string') {
                                val = Buffer.from(val, encoding);
                            }

                            // Finally, search either indexOf (if dir is true) or lastIndexOf
                            if (Buffer.isBuffer(val)) {
                                // Special case: looking for empty string/buffer always fails
                                if (val.length === 0) {
                                    return -1;
                                }
                                return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
                            } else if (typeof val === 'number') {
                                val = val & 0xff; // Search for a byte value [0-255]
                                if (typeof Uint8Array.prototype.indexOf === 'function') {
                                    if (dir) {
                                        return Uint8Array.prototype.indexOf.call(
                                            buffer,
                                            val,
                                            byteOffset,
                                        );
                                    } else {
                                        return Uint8Array.prototype.lastIndexOf.call(
                                            buffer,
                                            val,
                                            byteOffset,
                                        );
                                    }
                                }
                                return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
                            }

                            throw new TypeError('val must be string, number or Buffer');
                        }

                        function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
                            var indexSize = 1;
                            var arrLength = arr.length;
                            var valLength = val.length;

                            if (encoding !== undefined) {
                                encoding = String(encoding).toLowerCase();
                                if (
                                    encoding === 'ucs2' ||
                                    encoding === 'ucs-2' ||
                                    encoding === 'utf16le' ||
                                    encoding === 'utf-16le'
                                ) {
                                    if (arr.length < 2 || val.length < 2) {
                                        return -1;
                                    }
                                    indexSize = 2;
                                    arrLength /= 2;
                                    valLength /= 2;
                                    byteOffset /= 2;
                                }
                            }

                            function read(buf, i) {
                                if (indexSize === 1) {
                                    return buf[i];
                                } else {
                                    return buf.readUInt16BE(i * indexSize);
                                }
                            }

                            var i;
                            if (dir) {
                                var foundIndex = -1;
                                for (i = byteOffset; i < arrLength; i++) {
                                    if (
                                        read(arr, i) ===
                                        read(val, foundIndex === -1 ? 0 : i - foundIndex)
                                    ) {
                                        if (foundIndex === -1) foundIndex = i;
                                        if (i - foundIndex + 1 === valLength)
                                            return foundIndex * indexSize;
                                    } else {
                                        if (foundIndex !== -1) i -= i - foundIndex;
                                        foundIndex = -1;
                                    }
                                }
                            } else {
                                if (byteOffset + valLength > arrLength)
                                    byteOffset = arrLength - valLength;
                                for (i = byteOffset; i >= 0; i--) {
                                    var found = true;
                                    for (var j = 0; j < valLength; j++) {
                                        if (read(arr, i + j) !== read(val, j)) {
                                            found = false;
                                            break;
                                        }
                                    }
                                    if (found) return i;
                                }
                            }

                            return -1;
                        }

                        Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
                            return this.indexOf(val, byteOffset, encoding) !== -1;
                        };

                        Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
                            return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
                        };

                        Buffer.prototype.lastIndexOf = function lastIndexOf(
                            val,
                            byteOffset,
                            encoding,
                        ) {
                            return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
                        };

                        function hexWrite(buf, string, offset, length) {
                            offset = Number(offset) || 0;
                            var remaining = buf.length - offset;
                            if (!length) {
                                length = remaining;
                            } else {
                                length = Number(length);
                                if (length > remaining) {
                                    length = remaining;
                                }
                            }

                            var strLen = string.length;

                            if (length > strLen / 2) {
                                length = strLen / 2;
                            }
                            for (var i = 0; i < length; ++i) {
                                var parsed = parseInt(string.substr(i * 2, 2), 16);
                                if (numberIsNaN(parsed)) return i;
                                buf[offset + i] = parsed;
                            }
                            return i;
                        }

                        function utf8Write(buf, string, offset, length) {
                            return blitBuffer(
                                utf8ToBytes(string, buf.length - offset),
                                buf,
                                offset,
                                length,
                            );
                        }

                        function asciiWrite(buf, string, offset, length) {
                            return blitBuffer(asciiToBytes(string), buf, offset, length);
                        }

                        function latin1Write(buf, string, offset, length) {
                            return asciiWrite(buf, string, offset, length);
                        }

                        function base64Write(buf, string, offset, length) {
                            return blitBuffer(base64ToBytes(string), buf, offset, length);
                        }

                        function ucs2Write(buf, string, offset, length) {
                            return blitBuffer(
                                utf16leToBytes(string, buf.length - offset),
                                buf,
                                offset,
                                length,
                            );
                        }

                        Buffer.prototype.write = function write(string, offset, length, encoding) {
                            // Buffer#write(string)
                            if (offset === undefined) {
                                encoding = 'utf8';
                                length = this.length;
                                offset = 0;
                                // Buffer#write(string, encoding)
                            } else if (length === undefined && typeof offset === 'string') {
                                encoding = offset;
                                length = this.length;
                                offset = 0;
                                // Buffer#write(string, offset[, length][, encoding])
                            } else if (isFinite(offset)) {
                                offset = offset >>> 0;
                                if (isFinite(length)) {
                                    length = length >>> 0;
                                    if (encoding === undefined) encoding = 'utf8';
                                } else {
                                    encoding = length;
                                    length = undefined;
                                }
                            } else {
                                throw new Error(
                                    'Buffer.write(string, encoding, offset[, length]) is no longer supported',
                                );
                            }

                            var remaining = this.length - offset;
                            if (length === undefined || length > remaining) length = remaining;

                            if (
                                (string.length > 0 && (length < 0 || offset < 0)) ||
                                offset > this.length
                            ) {
                                throw new RangeError('Attempt to write outside buffer bounds');
                            }

                            if (!encoding) encoding = 'utf8';

                            var loweredCase = false;
                            for (;;) {
                                switch (encoding) {
                                    case 'hex':
                                        return hexWrite(this, string, offset, length);

                                    case 'utf8':
                                    case 'utf-8':
                                        return utf8Write(this, string, offset, length);

                                    case 'ascii':
                                        return asciiWrite(this, string, offset, length);

                                    case 'latin1':
                                    case 'binary':
                                        return latin1Write(this, string, offset, length);

                                    case 'base64':
                                        // Warning: maxLength not taken into account in base64Write
                                        return base64Write(this, string, offset, length);

                                    case 'ucs2':
                                    case 'ucs-2':
                                    case 'utf16le':
                                    case 'utf-16le':
                                        return ucs2Write(this, string, offset, length);

                                    default:
                                        if (loweredCase)
                                            throw new TypeError('Unknown encoding: ' + encoding);
                                        encoding = ('' + encoding).toLowerCase();
                                        loweredCase = true;
                                }
                            }
                        };

                        Buffer.prototype.toJSON = function toJSON() {
                            return {
                                type: 'Buffer',
                                data: Array.prototype.slice.call(this._arr || this, 0),
                            };
                        };

                        function base64Slice(buf, start, end) {
                            if (start === 0 && end === buf.length) {
                                return base64.fromByteArray(buf);
                            } else {
                                return base64.fromByteArray(buf.slice(start, end));
                            }
                        }

                        function utf8Slice(buf, start, end) {
                            end = Math.min(buf.length, end);
                            var res = [];

                            var i = start;
                            while (i < end) {
                                var firstByte = buf[i];
                                var codePoint = null;
                                var bytesPerSequence =
                                    firstByte > 0xef
                                        ? 4
                                        : firstByte > 0xdf
                                        ? 3
                                        : firstByte > 0xbf
                                        ? 2
                                        : 1;

                                if (i + bytesPerSequence <= end) {
                                    var secondByte, thirdByte, fourthByte, tempCodePoint;

                                    switch (bytesPerSequence) {
                                        case 1:
                                            if (firstByte < 0x80) {
                                                codePoint = firstByte;
                                            }
                                            break;
                                        case 2:
                                            secondByte = buf[i + 1];
                                            if ((secondByte & 0xc0) === 0x80) {
                                                tempCodePoint =
                                                    ((firstByte & 0x1f) << 0x6) |
                                                    (secondByte & 0x3f);
                                                if (tempCodePoint > 0x7f) {
                                                    codePoint = tempCodePoint;
                                                }
                                            }
                                            break;
                                        case 3:
                                            secondByte = buf[i + 1];
                                            thirdByte = buf[i + 2];
                                            if (
                                                (secondByte & 0xc0) === 0x80 &&
                                                (thirdByte & 0xc0) === 0x80
                                            ) {
                                                tempCodePoint =
                                                    ((firstByte & 0xf) << 0xc) |
                                                    ((secondByte & 0x3f) << 0x6) |
                                                    (thirdByte & 0x3f);
                                                if (
                                                    tempCodePoint > 0x7ff &&
                                                    (tempCodePoint < 0xd800 ||
                                                        tempCodePoint > 0xdfff)
                                                ) {
                                                    codePoint = tempCodePoint;
                                                }
                                            }
                                            break;
                                        case 4:
                                            secondByte = buf[i + 1];
                                            thirdByte = buf[i + 2];
                                            fourthByte = buf[i + 3];
                                            if (
                                                (secondByte & 0xc0) === 0x80 &&
                                                (thirdByte & 0xc0) === 0x80 &&
                                                (fourthByte & 0xc0) === 0x80
                                            ) {
                                                tempCodePoint =
                                                    ((firstByte & 0xf) << 0x12) |
                                                    ((secondByte & 0x3f) << 0xc) |
                                                    ((thirdByte & 0x3f) << 0x6) |
                                                    (fourthByte & 0x3f);
                                                if (
                                                    tempCodePoint > 0xffff &&
                                                    tempCodePoint < 0x110000
                                                ) {
                                                    codePoint = tempCodePoint;
                                                }
                                            }
                                    }
                                }

                                if (codePoint === null) {
                                    // we did not generate a valid codePoint so insert a
                                    // replacement char (U+FFFD) and advance only 1 byte
                                    codePoint = 0xfffd;
                                    bytesPerSequence = 1;
                                } else if (codePoint > 0xffff) {
                                    // encode to utf16 (surrogate pair dance)
                                    codePoint -= 0x10000;
                                    res.push(((codePoint >>> 10) & 0x3ff) | 0xd800);
                                    codePoint = 0xdc00 | (codePoint & 0x3ff);
                                }

                                res.push(codePoint);
                                i += bytesPerSequence;
                            }

                            return decodeCodePointsArray(res);
                        }

                        // Based on http://stackoverflow.com/a/22747272/680742, the browser with
                        // the lowest limit is Chrome, with 0x10000 args.
                        // We go 1 magnitude less, for safety
                        var MAX_ARGUMENTS_LENGTH = 0x1000;

                        function decodeCodePointsArray(codePoints) {
                            var len = codePoints.length;
                            if (len <= MAX_ARGUMENTS_LENGTH) {
                                return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
                            }

                            // Decode in chunks to avoid "call stack size exceeded".
                            var res = '';
                            var i = 0;
                            while (i < len) {
                                res += String.fromCharCode.apply(
                                    String,
                                    codePoints.slice(i, (i += MAX_ARGUMENTS_LENGTH)),
                                );
                            }
                            return res;
                        }

                        function asciiSlice(buf, start, end) {
                            var ret = '';
                            end = Math.min(buf.length, end);

                            for (var i = start; i < end; ++i) {
                                ret += String.fromCharCode(buf[i] & 0x7f);
                            }
                            return ret;
                        }

                        function latin1Slice(buf, start, end) {
                            var ret = '';
                            end = Math.min(buf.length, end);

                            for (var i = start; i < end; ++i) {
                                ret += String.fromCharCode(buf[i]);
                            }
                            return ret;
                        }

                        function hexSlice(buf, start, end) {
                            var len = buf.length;

                            if (!start || start < 0) start = 0;
                            if (!end || end < 0 || end > len) end = len;

                            var out = '';
                            for (var i = start; i < end; ++i) {
                                out += toHex(buf[i]);
                            }
                            return out;
                        }

                        function utf16leSlice(buf, start, end) {
                            var bytes = buf.slice(start, end);
                            var res = '';
                            for (var i = 0; i < bytes.length; i += 2) {
                                res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
                            }
                            return res;
                        }

                        Buffer.prototype.slice = function slice(start, end) {
                            var len = this.length;
                            start = ~~start;
                            end = end === undefined ? len : ~~end;

                            if (start < 0) {
                                start += len;
                                if (start < 0) start = 0;
                            } else if (start > len) {
                                start = len;
                            }

                            if (end < 0) {
                                end += len;
                                if (end < 0) end = 0;
                            } else if (end > len) {
                                end = len;
                            }

                            if (end < start) end = start;

                            var newBuf = this.subarray(start, end);
                            // Return an augmented `Uint8Array` instance
                            newBuf.__proto__ = Buffer.prototype;
                            return newBuf;
                        };

                        /*
                         * Need to make sure that buffer isn't trying to write out of bounds.
                         */
                        function checkOffset(offset, ext, length) {
                            if (offset % 1 !== 0 || offset < 0)
                                throw new RangeError('offset is not uint');
                            if (offset + ext > length)
                                throw new RangeError('Trying to access beyond buffer length');
                        }

                        Buffer.prototype.readUIntLE = function readUIntLE(
                            offset,
                            byteLength,
                            noAssert,
                        ) {
                            offset = offset >>> 0;
                            byteLength = byteLength >>> 0;
                            if (!noAssert) checkOffset(offset, byteLength, this.length);

                            var val = this[offset];
                            var mul = 1;
                            var i = 0;
                            while (++i < byteLength && (mul *= 0x100)) {
                                val += this[offset + i] * mul;
                            }

                            return val;
                        };

                        Buffer.prototype.readUIntBE = function readUIntBE(
                            offset,
                            byteLength,
                            noAssert,
                        ) {
                            offset = offset >>> 0;
                            byteLength = byteLength >>> 0;
                            if (!noAssert) {
                                checkOffset(offset, byteLength, this.length);
                            }

                            var val = this[offset + --byteLength];
                            var mul = 1;
                            while (byteLength > 0 && (mul *= 0x100)) {
                                val += this[offset + --byteLength] * mul;
                            }

                            return val;
                        };

                        Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 1, this.length);
                            return this[offset];
                        };

                        Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 2, this.length);
                            return this[offset] | (this[offset + 1] << 8);
                        };

                        Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 2, this.length);
                            return (this[offset] << 8) | this[offset + 1];
                        };

                        Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 4, this.length);

                            return (
                                (this[offset] |
                                    (this[offset + 1] << 8) |
                                    (this[offset + 2] << 16)) +
                                this[offset + 3] * 0x1000000
                            );
                        };

                        Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 4, this.length);

                            return (
                                this[offset] * 0x1000000 +
                                ((this[offset + 1] << 16) |
                                    (this[offset + 2] << 8) |
                                    this[offset + 3])
                            );
                        };

                        Buffer.prototype.readIntLE = function readIntLE(
                            offset,
                            byteLength,
                            noAssert,
                        ) {
                            offset = offset >>> 0;
                            byteLength = byteLength >>> 0;
                            if (!noAssert) checkOffset(offset, byteLength, this.length);

                            var val = this[offset];
                            var mul = 1;
                            var i = 0;
                            while (++i < byteLength && (mul *= 0x100)) {
                                val += this[offset + i] * mul;
                            }
                            mul *= 0x80;

                            if (val >= mul) val -= Math.pow(2, 8 * byteLength);

                            return val;
                        };

                        Buffer.prototype.readIntBE = function readIntBE(
                            offset,
                            byteLength,
                            noAssert,
                        ) {
                            offset = offset >>> 0;
                            byteLength = byteLength >>> 0;
                            if (!noAssert) checkOffset(offset, byteLength, this.length);

                            var i = byteLength;
                            var mul = 1;
                            var val = this[offset + --i];
                            while (i > 0 && (mul *= 0x100)) {
                                val += this[offset + --i] * mul;
                            }
                            mul *= 0x80;

                            if (val >= mul) val -= Math.pow(2, 8 * byteLength);

                            return val;
                        };

                        Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 1, this.length);
                            if (!(this[offset] & 0x80)) return this[offset];
                            return (0xff - this[offset] + 1) * -1;
                        };

                        Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 2, this.length);
                            var val = this[offset] | (this[offset + 1] << 8);
                            return val & 0x8000 ? val | 0xffff0000 : val;
                        };

                        Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 2, this.length);
                            var val = this[offset + 1] | (this[offset] << 8);
                            return val & 0x8000 ? val | 0xffff0000 : val;
                        };

                        Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 4, this.length);

                            return (
                                this[offset] |
                                (this[offset + 1] << 8) |
                                (this[offset + 2] << 16) |
                                (this[offset + 3] << 24)
                            );
                        };

                        Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 4, this.length);

                            return (
                                (this[offset] << 24) |
                                (this[offset + 1] << 16) |
                                (this[offset + 2] << 8) |
                                this[offset + 3]
                            );
                        };

                        Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 4, this.length);
                            return ieee754.read(this, offset, true, 23, 4);
                        };

                        Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 4, this.length);
                            return ieee754.read(this, offset, false, 23, 4);
                        };

                        Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 8, this.length);
                            return ieee754.read(this, offset, true, 52, 8);
                        };

                        Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 8, this.length);
                            return ieee754.read(this, offset, false, 52, 8);
                        };

                        function checkInt(buf, value, offset, ext, max, min) {
                            if (!Buffer.isBuffer(buf))
                                throw new TypeError('"buffer" argument must be a Buffer instance');
                            if (value > max || value < min)
                                throw new RangeError('"value" argument is out of bounds');
                            if (offset + ext > buf.length)
                                throw new RangeError('Index out of range');
                        }

                        Buffer.prototype.writeUIntLE = function writeUIntLE(
                            value,
                            offset,
                            byteLength,
                            noAssert,
                        ) {
                            value = +value;
                            offset = offset >>> 0;
                            byteLength = byteLength >>> 0;
                            if (!noAssert) {
                                var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                                checkInt(this, value, offset, byteLength, maxBytes, 0);
                            }

                            var mul = 1;
                            var i = 0;
                            this[offset] = value & 0xff;
                            while (++i < byteLength && (mul *= 0x100)) {
                                this[offset + i] = (value / mul) & 0xff;
                            }

                            return offset + byteLength;
                        };

                        Buffer.prototype.writeUIntBE = function writeUIntBE(
                            value,
                            offset,
                            byteLength,
                            noAssert,
                        ) {
                            value = +value;
                            offset = offset >>> 0;
                            byteLength = byteLength >>> 0;
                            if (!noAssert) {
                                var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                                checkInt(this, value, offset, byteLength, maxBytes, 0);
                            }

                            var i = byteLength - 1;
                            var mul = 1;
                            this[offset + i] = value & 0xff;
                            while (--i >= 0 && (mul *= 0x100)) {
                                this[offset + i] = (value / mul) & 0xff;
                            }

                            return offset + byteLength;
                        };

                        Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
                            this[offset] = value & 0xff;
                            return offset + 1;
                        };

                        Buffer.prototype.writeUInt16LE = function writeUInt16LE(
                            value,
                            offset,
                            noAssert,
                        ) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
                            this[offset] = value & 0xff;
                            this[offset + 1] = value >>> 8;
                            return offset + 2;
                        };

                        Buffer.prototype.writeUInt16BE = function writeUInt16BE(
                            value,
                            offset,
                            noAssert,
                        ) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
                            this[offset] = value >>> 8;
                            this[offset + 1] = value & 0xff;
                            return offset + 2;
                        };

                        Buffer.prototype.writeUInt32LE = function writeUInt32LE(
                            value,
                            offset,
                            noAssert,
                        ) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
                            this[offset + 3] = value >>> 24;
                            this[offset + 2] = value >>> 16;
                            this[offset + 1] = value >>> 8;
                            this[offset] = value & 0xff;
                            return offset + 4;
                        };

                        Buffer.prototype.writeUInt32BE = function writeUInt32BE(
                            value,
                            offset,
                            noAssert,
                        ) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
                            this[offset] = value >>> 24;
                            this[offset + 1] = value >>> 16;
                            this[offset + 2] = value >>> 8;
                            this[offset + 3] = value & 0xff;
                            return offset + 4;
                        };

                        Buffer.prototype.writeIntLE = function writeIntLE(
                            value,
                            offset,
                            byteLength,
                            noAssert,
                        ) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert) {
                                var limit = Math.pow(2, 8 * byteLength - 1);

                                checkInt(this, value, offset, byteLength, limit - 1, -limit);
                            }

                            var i = 0;
                            var mul = 1;
                            var sub = 0;
                            this[offset] = value & 0xff;
                            while (++i < byteLength && (mul *= 0x100)) {
                                if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                                    sub = 1;
                                }
                                this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;
                            }

                            return offset + byteLength;
                        };

                        Buffer.prototype.writeIntBE = function writeIntBE(
                            value,
                            offset,
                            byteLength,
                            noAssert,
                        ) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert) {
                                var limit = Math.pow(2, 8 * byteLength - 1);

                                checkInt(this, value, offset, byteLength, limit - 1, -limit);
                            }

                            var i = byteLength - 1;
                            var mul = 1;
                            var sub = 0;
                            this[offset + i] = value & 0xff;
                            while (--i >= 0 && (mul *= 0x100)) {
                                if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                                    sub = 1;
                                }
                                this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;
                            }

                            return offset + byteLength;
                        };

                        Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
                            if (value < 0) value = 0xff + value + 1;
                            this[offset] = value & 0xff;
                            return offset + 1;
                        };

                        Buffer.prototype.writeInt16LE = function writeInt16LE(
                            value,
                            offset,
                            noAssert,
                        ) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
                            this[offset] = value & 0xff;
                            this[offset + 1] = value >>> 8;
                            return offset + 2;
                        };

                        Buffer.prototype.writeInt16BE = function writeInt16BE(
                            value,
                            offset,
                            noAssert,
                        ) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
                            this[offset] = value >>> 8;
                            this[offset + 1] = value & 0xff;
                            return offset + 2;
                        };

                        Buffer.prototype.writeInt32LE = function writeInt32LE(
                            value,
                            offset,
                            noAssert,
                        ) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert)
                                checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
                            this[offset] = value & 0xff;
                            this[offset + 1] = value >>> 8;
                            this[offset + 2] = value >>> 16;
                            this[offset + 3] = value >>> 24;
                            return offset + 4;
                        };

                        Buffer.prototype.writeInt32BE = function writeInt32BE(
                            value,
                            offset,
                            noAssert,
                        ) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert)
                                checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
                            if (value < 0) value = 0xffffffff + value + 1;
                            this[offset] = value >>> 24;
                            this[offset + 1] = value >>> 16;
                            this[offset + 2] = value >>> 8;
                            this[offset + 3] = value & 0xff;
                            return offset + 4;
                        };

                        function checkIEEE754(buf, value, offset, ext, max, min) {
                            if (offset + ext > buf.length)
                                throw new RangeError('Index out of range');
                            if (offset < 0) throw new RangeError('Index out of range');
                        }

                        function writeFloat(buf, value, offset, littleEndian, noAssert) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert) {
                                checkIEEE754(
                                    buf,
                                    value,
                                    offset,
                                    4,
                                    3.4028234663852886e38,
                                    -3.4028234663852886e38,
                                );
                            }
                            ieee754.write(buf, value, offset, littleEndian, 23, 4);
                            return offset + 4;
                        }

                        Buffer.prototype.writeFloatLE = function writeFloatLE(
                            value,
                            offset,
                            noAssert,
                        ) {
                            return writeFloat(this, value, offset, true, noAssert);
                        };

                        Buffer.prototype.writeFloatBE = function writeFloatBE(
                            value,
                            offset,
                            noAssert,
                        ) {
                            return writeFloat(this, value, offset, false, noAssert);
                        };

                        function writeDouble(buf, value, offset, littleEndian, noAssert) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert) {
                                checkIEEE754(
                                    buf,
                                    value,
                                    offset,
                                    8,
                                    1.7976931348623157e308,
                                    -1.7976931348623157e308,
                                );
                            }
                            ieee754.write(buf, value, offset, littleEndian, 52, 8);
                            return offset + 8;
                        }

                        Buffer.prototype.writeDoubleLE = function writeDoubleLE(
                            value,
                            offset,
                            noAssert,
                        ) {
                            return writeDouble(this, value, offset, true, noAssert);
                        };

                        Buffer.prototype.writeDoubleBE = function writeDoubleBE(
                            value,
                            offset,
                            noAssert,
                        ) {
                            return writeDouble(this, value, offset, false, noAssert);
                        };

                        // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
                        Buffer.prototype.copy = function copy(target, targetStart, start, end) {
                            if (!Buffer.isBuffer(target))
                                throw new TypeError('argument should be a Buffer');
                            if (!start) start = 0;
                            if (!end && end !== 0) end = this.length;
                            if (targetStart >= target.length) targetStart = target.length;
                            if (!targetStart) targetStart = 0;
                            if (end > 0 && end < start) end = start;

                            // Copy 0 bytes; we're done
                            if (end === start) return 0;
                            if (target.length === 0 || this.length === 0) return 0;

                            // Fatal error conditions
                            if (targetStart < 0) {
                                throw new RangeError('targetStart out of bounds');
                            }
                            if (start < 0 || start >= this.length)
                                throw new RangeError('Index out of range');
                            if (end < 0) throw new RangeError('sourceEnd out of bounds');

                            // Are we oob?
                            if (end > this.length) end = this.length;
                            if (target.length - targetStart < end - start) {
                                end = target.length - targetStart + start;
                            }

                            var len = end - start;

                            if (
                                this === target &&
                                typeof Uint8Array.prototype.copyWithin === 'function'
                            ) {
                                // Use built-in when available, missing from IE11
                                this.copyWithin(targetStart, start, end);
                            } else if (
                                this === target &&
                                start < targetStart &&
                                targetStart < end
                            ) {
                                // descending copy from end
                                for (var i = len - 1; i >= 0; --i) {
                                    target[i + targetStart] = this[i + start];
                                }
                            } else {
                                Uint8Array.prototype.set.call(
                                    target,
                                    this.subarray(start, end),
                                    targetStart,
                                );
                            }

                            return len;
                        };

                        // Usage:
                        //    buffer.fill(number[, offset[, end]])
                        //    buffer.fill(buffer[, offset[, end]])
                        //    buffer.fill(string[, offset[, end]][, encoding])
                        Buffer.prototype.fill = function fill(val, start, end, encoding) {
                            // Handle string cases:
                            if (typeof val === 'string') {
                                if (typeof start === 'string') {
                                    encoding = start;
                                    start = 0;
                                    end = this.length;
                                } else if (typeof end === 'string') {
                                    encoding = end;
                                    end = this.length;
                                }
                                if (encoding !== undefined && typeof encoding !== 'string') {
                                    throw new TypeError('encoding must be a string');
                                }
                                if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
                                    throw new TypeError('Unknown encoding: ' + encoding);
                                }
                                if (val.length === 1) {
                                    var code = val.charCodeAt(0);
                                    if (
                                        (encoding === 'utf8' && code < 128) ||
                                        encoding === 'latin1'
                                    ) {
                                        // Fast path: If `val` fits into a single byte, use that numeric value.
                                        val = code;
                                    }
                                }
                            } else if (typeof val === 'number') {
                                val = val & 255;
                            }

                            // Invalid ranges are not set to a default, so can range check early.
                            if (start < 0 || this.length < start || this.length < end) {
                                throw new RangeError('Out of range index');
                            }

                            if (end <= start) {
                                return this;
                            }

                            start = start >>> 0;
                            end = end === undefined ? this.length : end >>> 0;

                            if (!val) val = 0;

                            var i;
                            if (typeof val === 'number') {
                                for (i = start; i < end; ++i) {
                                    this[i] = val;
                                }
                            } else {
                                var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
                                var len = bytes.length;
                                if (len === 0) {
                                    throw new TypeError(
                                        'The value "' + val + '" is invalid for argument "value"',
                                    );
                                }
                                for (i = 0; i < end - start; ++i) {
                                    this[i + start] = bytes[i % len];
                                }
                            }

                            return this;
                        };

                        // HELPER FUNCTIONS
                        // ================

                        var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

                        function base64clean(str) {
                            // Node takes equal signs as end of the Base64 encoding
                            str = str.split('=')[0];
                            // Node strips out invalid characters like \n and \t from the string, base64-js does not
                            str = str.trim().replace(INVALID_BASE64_RE, '');
                            // Node converts strings with length < 2 to ''
                            if (str.length < 2) return '';
                            // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
                            while (str.length % 4 !== 0) {
                                str = str + '=';
                            }
                            return str;
                        }

                        function toHex(n) {
                            if (n < 16) return '0' + n.toString(16);
                            return n.toString(16);
                        }

                        function utf8ToBytes(string, units) {
                            units = units || Infinity;
                            var codePoint;
                            var length = string.length;
                            var leadSurrogate = null;
                            var bytes = [];

                            for (var i = 0; i < length; ++i) {
                                codePoint = string.charCodeAt(i);

                                // is surrogate component
                                if (codePoint > 0xd7ff && codePoint < 0xe000) {
                                    // last char was a lead
                                    if (!leadSurrogate) {
                                        // no lead yet
                                        if (codePoint > 0xdbff) {
                                            // unexpected trail
                                            if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                                            continue;
                                        } else if (i + 1 === length) {
                                            // unpaired lead
                                            if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                                            continue;
                                        }

                                        // valid lead
                                        leadSurrogate = codePoint;

                                        continue;
                                    }

                                    // 2 leads in a row
                                    if (codePoint < 0xdc00) {
                                        if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                                        leadSurrogate = codePoint;
                                        continue;
                                    }

                                    // valid surrogate pair
                                    codePoint =
                                        (((leadSurrogate - 0xd800) << 10) | (codePoint - 0xdc00)) +
                                        0x10000;
                                } else if (leadSurrogate) {
                                    // valid bmp char, but last char was a lead
                                    if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                                }

                                leadSurrogate = null;

                                // encode utf8
                                if (codePoint < 0x80) {
                                    if ((units -= 1) < 0) break;
                                    bytes.push(codePoint);
                                } else if (codePoint < 0x800) {
                                    if ((units -= 2) < 0) break;
                                    bytes.push(
                                        (codePoint >> 0x6) | 0xc0,
                                        (codePoint & 0x3f) | 0x80,
                                    );
                                } else if (codePoint < 0x10000) {
                                    if ((units -= 3) < 0) break;
                                    bytes.push(
                                        (codePoint >> 0xc) | 0xe0,
                                        ((codePoint >> 0x6) & 0x3f) | 0x80,
                                        (codePoint & 0x3f) | 0x80,
                                    );
                                } else if (codePoint < 0x110000) {
                                    if ((units -= 4) < 0) break;
                                    bytes.push(
                                        (codePoint >> 0x12) | 0xf0,
                                        ((codePoint >> 0xc) & 0x3f) | 0x80,
                                        ((codePoint >> 0x6) & 0x3f) | 0x80,
                                        (codePoint & 0x3f) | 0x80,
                                    );
                                } else {
                                    throw new Error('Invalid code point');
                                }
                            }

                            return bytes;
                        }

                        function asciiToBytes(str) {
                            var byteArray = [];
                            for (var i = 0; i < str.length; ++i) {
                                // Node's code seems to be doing this and not & 0x7F..
                                byteArray.push(str.charCodeAt(i) & 0xff);
                            }
                            return byteArray;
                        }

                        function utf16leToBytes(str, units) {
                            var c, hi, lo;
                            var byteArray = [];
                            for (var i = 0; i < str.length; ++i) {
                                if ((units -= 2) < 0) break;

                                c = str.charCodeAt(i);
                                hi = c >> 8;
                                lo = c % 256;
                                byteArray.push(lo);
                                byteArray.push(hi);
                            }

                            return byteArray;
                        }

                        function base64ToBytes(str) {
                            return base64.toByteArray(base64clean(str));
                        }

                        function blitBuffer(src, dst, offset, length) {
                            for (var i = 0; i < length; ++i) {
                                if (i + offset >= dst.length || i >= src.length) break;
                                dst[i + offset] = src[i];
                            }
                            return i;
                        }

                        // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
                        // the `instanceof` check but they should be treated as of that type.
                        // See: https://github.com/feross/buffer/issues/166
                        function isInstance(obj, type) {
                            return (
                                obj instanceof type ||
                                (obj != null &&
                                    obj.constructor != null &&
                                    obj.constructor.name != null &&
                                    obj.constructor.name === type.name)
                            );
                        }
                        function numberIsNaN(obj) {
                            // For IE11 support
                            return obj !== obj; // eslint-disable-line no-self-compare
                        }
                    }).call(this);
                }).call(this, require('buffer').Buffer);
            },
            { 'base64-js': 5, buffer: 6, ieee754: 32 },
        ],
        7: [
            function (require, module, exports) {
                /**
                 * Redirects console output to an &lt;ul&gt; element
                 * @namespace
                 */
                var ConsoleLogHTML = (function (
                    original,
                    methods,
                    console,
                    Object,
                    TYPE_UNDEFINED,
                    TYPE_BOOLEAN,
                    INSTANCE_OBJECT_OBJECT,
                ) {
                    'use strict';
                    for (var i = 0; i < methods.length; i++) {
                        if (TYPE_UNDEFINED !== typeof console[methods[i]]) {
                            original[methods[i]] = console[methods[i]];
                        }
                    }

                    var originalSkipHtml = console.skipHtml,
                        originalKeys = Object.keys(original),
                        originalClear =
                            TYPE_UNDEFINED !== typeof console.clear ? console.clear : false,
                        jQueryIsUp = typeof jQuery !== TYPE_UNDEFINED ? jQuery : false,
                        extend = function () {
                            var out = {},
                                i = 0,
                                j,
                                keys;

                            for (; i < arguments.length; i++) {
                                keys = Object.keys(arguments[i]);
                                for (j = 0; j < keys.length; j++) {
                                    out[keys[j]] = arguments[i][keys[j]];
                                }
                            }

                            return out;
                        },
                        register = function (
                            method,
                            target,
                            options,
                            includeTimestamp,
                            logToConsole,
                            appendAtBottom,
                        ) {
                            console.skipHtml[method] = function () {
                                original[method].apply(console, arguments);
                            };

                            console[method] = function () {
                                var finalMsg, msgPart, i, li;

                                finalMsg = '';
                                for (i = 0; i < arguments.length; i++) {
                                    msgPart = arguments[i] + ''; // "safe toString()" (works with null & undefined)
                                    if (msgPart === INSTANCE_OBJECT_OBJECT) {
                                        try {
                                            // Prefix with "Object" like in Firefox-, Chrome-, and node.js-output
                                            msgPart = 'Object ' + JSON.stringify(arguments[i]);
                                        } catch (e) {}
                                    }

                                    finalMsg += (i > 0 ? ' ' : '') + msgPart;
                                }

                                finalMsg =
                                    (includeTimestamp
                                        ? '[' + new Date().toLocaleTimeString() + '] '
                                        : '') + finalMsg;
                                li = document.createElement('li');
                                li.setAttribute('data-level', method);
                                li.innerText = finalMsg;
                                if (options[method]) {
                                    li.setAttribute('class', options[method]);
                                }

                                if (appendAtBottom) {
                                    target.appendChild(li);
                                } else {
                                    target.insertBefore(li, target.firstChild);
                                }

                                if (logToConsole) {
                                    console.skipHtml[method].apply(console, arguments);
                                }
                            };
                        };

                    return {
                        /**
                         * Default CSS classes
                         * @type Object
                         * @memberof ConsoleLogHTML
                         * @prop {?string} error=text-danger The default CSS class for error messages
                         * @prop {?string} warn=text-warning The default CSS class for warning messages
                         * @prop {?string} info=text-success The default CSS class for info messages
                         * @prop {?string} debug=text-info The default CSS class for debug messages
                         * @prop {?string} log=null The default CSS class for log messages
                         */
                        DEFAULTS: {
                            error: 'text-danger',
                            warn: 'text-warning',
                            info: 'text-success',
                            debug: 'text-info',
                            log: '',
                        },
                        /**
                         * Disconnect our console overrides, reverting to the original state
                         * @memberof ConsoleLogHTML
                         */
                        disconnect: function () {
                            console.skipHtml = originalSkipHtml;
                            for (var i = 0; i < originalKeys.length; i++) {
                                console[originalKeys[i]] = original[originalKeys[i]];
                            }
                            if (false !== originalClear) {
                                console.clear = originalClear;
                            }
                        },
                        /**
                         * Overwrite the original console.* methods and start outputting to screen
                         * @memberof ConsoleLogHTML
                         * @param {$|jQuery|HTMLUListElement} target The target &lt;ul&gt; element to output to. Can can either be a
                         * jQuery or vanilla JS HTMLUListElement.
                         * @param {Object} [options=ConsoleLogHTML.DEFAULTS] CSS class options. See {@link ConsoleLogHTML.DEFAULTS} for
                         * default values.
                         * @param {boolean} [includeTimestamp=true] Whether to include the log message timestamp in HTML
                         * @param {boolean} [logToConsole=true] Whether to continue logging to the console as well as HTML.
                         * @param {boolean} [appendAtBottom=false] Whether to append the log messages at the end of the ul-list
                         * @throws {Error} If target is not an &lt;ul&gt; element
                         */
                        connect: function (
                            target,
                            options,
                            includeTimestamp,
                            logToConsole,
                            appendAtBottom,
                        ) {
                            if (jQueryIsUp && target instanceof jQueryIsUp) {
                                target = target[0];
                            }
                            if (typeof logToConsole !== TYPE_BOOLEAN) {
                                logToConsole = true;
                            }
                            if (typeof includeTimestamp !== TYPE_BOOLEAN) {
                                includeTimestamp = true;
                            }
                            if (!(target instanceof HTMLUListElement)) {
                                throw new Error('The target must be a HTML <ul> element');
                            } else {
                                options = extend(ConsoleLogHTML.DEFAULTS, options || {});

                                console.skipHtml = {};
                                for (var i = 0; i < originalKeys.length; i++) {
                                    register(
                                        originalKeys[i],
                                        target,
                                        options,
                                        includeTimestamp,
                                        logToConsole,
                                        appendAtBottom,
                                    );
                                }

                                if (false !== originalClear) {
                                    console.clear = function () {
                                        target.innerText = '';
                                        originalClear.apply(console);
                                    };
                                }
                            }
                        },
                    };
                })(
                    {},
                    ['log', 'debug', 'info', 'warn', 'error'],
                    console,
                    Object,
                    'undefined',
                    'boolean',
                    '[object Object]',
                );

                if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
                    module.exports = ConsoleLogHTML;
                }
            },
            {},
        ],
        8: [
            function (require, module, exports) {
                (function (process) {
                    (function () {
                        /* eslint-env browser */

                        /**
                         * This is the web browser implementation of `debug()`.
                         */

                        exports.formatArgs = formatArgs;
                        exports.save = save;
                        exports.load = load;
                        exports.useColors = useColors;
                        exports.storage = localstorage();
                        exports.destroy = (() => {
                            let warned = false;

                            return () => {
                                if (!warned) {
                                    warned = true;
                                    console.warn(
                                        'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.',
                                    );
                                }
                            };
                        })();

                        /**
                         * Colors.
                         */

                        exports.colors = [
                            '#0000CC',
                            '#0000FF',
                            '#0033CC',
                            '#0033FF',
                            '#0066CC',
                            '#0066FF',
                            '#0099CC',
                            '#0099FF',
                            '#00CC00',
                            '#00CC33',
                            '#00CC66',
                            '#00CC99',
                            '#00CCCC',
                            '#00CCFF',
                            '#3300CC',
                            '#3300FF',
                            '#3333CC',
                            '#3333FF',
                            '#3366CC',
                            '#3366FF',
                            '#3399CC',
                            '#3399FF',
                            '#33CC00',
                            '#33CC33',
                            '#33CC66',
                            '#33CC99',
                            '#33CCCC',
                            '#33CCFF',
                            '#6600CC',
                            '#6600FF',
                            '#6633CC',
                            '#6633FF',
                            '#66CC00',
                            '#66CC33',
                            '#9900CC',
                            '#9900FF',
                            '#9933CC',
                            '#9933FF',
                            '#99CC00',
                            '#99CC33',
                            '#CC0000',
                            '#CC0033',
                            '#CC0066',
                            '#CC0099',
                            '#CC00CC',
                            '#CC00FF',
                            '#CC3300',
                            '#CC3333',
                            '#CC3366',
                            '#CC3399',
                            '#CC33CC',
                            '#CC33FF',
                            '#CC6600',
                            '#CC6633',
                            '#CC9900',
                            '#CC9933',
                            '#CCCC00',
                            '#CCCC33',
                            '#FF0000',
                            '#FF0033',
                            '#FF0066',
                            '#FF0099',
                            '#FF00CC',
                            '#FF00FF',
                            '#FF3300',
                            '#FF3333',
                            '#FF3366',
                            '#FF3399',
                            '#FF33CC',
                            '#FF33FF',
                            '#FF6600',
                            '#FF6633',
                            '#FF9900',
                            '#FF9933',
                            '#FFCC00',
                            '#FFCC33',
                        ];

                        /**
                         * Currently only WebKit-based Web Inspectors, Firefox >= v31,
                         * and the Firebug extension (any Firefox version) are known
                         * to support "%c" CSS customizations.
                         *
                         * TODO: add a `localStorage` variable to explicitly enable/disable colors
                         */

                        // eslint-disable-next-line complexity
                        function useColors() {
                            // NB: In an Electron preload script, document will be defined but not fully
                            // initialized. Since we know we're in Chrome, we'll just detect this case
                            // explicitly
                            if (
                                typeof window !== 'undefined' &&
                                window.process &&
                                (window.process.type === 'renderer' || window.process.__nwjs)
                            ) {
                                return true;
                            }

                            // Internet Explorer and Edge do not support colors.
                            if (
                                typeof navigator !== 'undefined' &&
                                navigator.userAgent &&
                                navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)
                            ) {
                                return false;
                            }

                            // Is webkit? http://stackoverflow.com/a/16459606/376773
                            // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
                            return (
                                (typeof document !== 'undefined' &&
                                    document.documentElement &&
                                    document.documentElement.style &&
                                    document.documentElement.style.WebkitAppearance) ||
                                // Is firebug? http://stackoverflow.com/a/398120/376773
                                (typeof window !== 'undefined' &&
                                    window.console &&
                                    (window.console.firebug ||
                                        (window.console.exception && window.console.table))) ||
                                // Is firefox >= v31?
                                // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
                                (typeof navigator !== 'undefined' &&
                                    navigator.userAgent &&
                                    navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) &&
                                    parseInt(RegExp.$1, 10) >= 31) ||
                                // Double check webkit in userAgent just in case we are in a worker
                                (typeof navigator !== 'undefined' &&
                                    navigator.userAgent &&
                                    navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))
                            );
                        }

                        /**
                         * Colorize log arguments if enabled.
                         *
                         * @api public
                         */

                        function formatArgs(args) {
                            args[0] =
                                (this.useColors ? '%c' : '') +
                                this.namespace +
                                (this.useColors ? ' %c' : ' ') +
                                args[0] +
                                (this.useColors ? '%c ' : ' ') +
                                '+' +
                                module.exports.humanize(this.diff);

                            if (!this.useColors) {
                                return;
                            }

                            const c = 'color: ' + this.color;
                            args.splice(1, 0, c, 'color: inherit');

                            // The final "%c" is somewhat tricky, because there could be other
                            // arguments passed either before or after the %c, so we need to
                            // figure out the correct index to insert the CSS into
                            let index = 0;
                            let lastC = 0;
                            args[0].replace(/%[a-zA-Z%]/g, (match) => {
                                if (match === '%%') {
                                    return;
                                }
                                index++;
                                if (match === '%c') {
                                    // We only are interested in the *last* %c
                                    // (the user may have provided their own)
                                    lastC = index;
                                }
                            });

                            args.splice(lastC, 0, c);
                        }

                        /**
                         * Invokes `console.debug()` when available.
                         * No-op when `console.debug` is not a "function".
                         * If `console.debug` is not available, falls back
                         * to `console.log`.
                         *
                         * @api public
                         */
                        exports.log = console.debug || console.log || (() => {});

                        /**
                         * Save `namespaces`.
                         *
                         * @param {String} namespaces
                         * @api private
                         */
                        function save(namespaces) {
                            try {
                                if (namespaces) {
                                    exports.storage.setItem('debug', namespaces);
                                } else {
                                    exports.storage.removeItem('debug');
                                }
                            } catch (error) {
                                // Swallow
                                // XXX (@Qix-) should we be logging these?
                            }
                        }

                        /**
                         * Load `namespaces`.
                         *
                         * @return {String} returns the previously persisted debug modes
                         * @api private
                         */
                        function load() {
                            let r;
                            try {
                                r = exports.storage.getItem('debug');
                            } catch (error) {
                                // Swallow
                                // XXX (@Qix-) should we be logging these?
                            }

                            // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
                            if (!r && typeof process !== 'undefined' && 'env' in process) {
                                r = process.env.DEBUG;
                            }

                            return r;
                        }

                        /**
                         * Localstorage attempts to return the localstorage.
                         *
                         * This is necessary because safari throws
                         * when a user disables cookies/localstorage
                         * and you attempt to access it.
                         *
                         * @return {LocalStorage}
                         * @api private
                         */

                        function localstorage() {
                            try {
                                // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
                                // The Browser also has localStorage in the global context.
                                return localStorage;
                            } catch (error) {
                                // Swallow
                                // XXX (@Qix-) should we be logging these?
                            }
                        }

                        module.exports = require('./common')(exports);

                        const { formatters } = module.exports;

                        /**
                         * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
                         */

                        formatters.j = function (v) {
                            try {
                                return JSON.stringify(v);
                            } catch (error) {
                                return '[UnexpectedJSONParseError]: ' + error.message;
                            }
                        };
                    }).call(this);
                }).call(this, require('_process'));
            },
            { './common': 9, _process: 70 },
        ],
        9: [
            function (require, module, exports) {
                /**
                 * This is the common logic for both the Node.js and web browser
                 * implementations of `debug()`.
                 */

                function setup(env) {
                    createDebug.debug = createDebug;
                    createDebug.default = createDebug;
                    createDebug.coerce = coerce;
                    createDebug.disable = disable;
                    createDebug.enable = enable;
                    createDebug.enabled = enabled;
                    createDebug.humanize = require('ms');
                    createDebug.destroy = destroy;

                    Object.keys(env).forEach((key) => {
                        createDebug[key] = env[key];
                    });

                    /**
                     * The currently active debug mode names, and names to skip.
                     */

                    createDebug.names = [];
                    createDebug.skips = [];

                    /**
                     * Map of special "%n" handling functions, for the debug "format" argument.
                     *
                     * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
                     */
                    createDebug.formatters = {};

                    /**
                     * Selects a color for a debug namespace
                     * @param {String} namespace The namespace string for the debug instance to be colored
                     * @return {Number|String} An ANSI color code for the given namespace
                     * @api private
                     */
                    function selectColor(namespace) {
                        let hash = 0;

                        for (let i = 0; i < namespace.length; i++) {
                            hash = (hash << 5) - hash + namespace.charCodeAt(i);
                            hash |= 0; // Convert to 32bit integer
                        }

                        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
                    }
                    createDebug.selectColor = selectColor;

                    /**
                     * Create a debugger with the given `namespace`.
                     *
                     * @param {String} namespace
                     * @return {Function}
                     * @api public
                     */
                    function createDebug(namespace) {
                        let prevTime;
                        let enableOverride = null;
                        let namespacesCache;
                        let enabledCache;

                        function debug(...args) {
                            // Disabled?
                            if (!debug.enabled) {
                                return;
                            }

                            const self = debug;

                            // Set `diff` timestamp
                            const curr = Number(new Date());
                            const ms = curr - (prevTime || curr);
                            self.diff = ms;
                            self.prev = prevTime;
                            self.curr = curr;
                            prevTime = curr;

                            args[0] = createDebug.coerce(args[0]);

                            if (typeof args[0] !== 'string') {
                                // Anything else let's inspect with %O
                                args.unshift('%O');
                            }

                            // Apply any `formatters` transformations
                            let index = 0;
                            args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
                                // If we encounter an escaped % then don't increase the array index
                                if (match === '%%') {
                                    return '%';
                                }
                                index++;
                                const formatter = createDebug.formatters[format];
                                if (typeof formatter === 'function') {
                                    const val = args[index];
                                    match = formatter.call(self, val);

                                    // Now we need to remove `args[index]` since it's inlined in the `format`
                                    args.splice(index, 1);
                                    index--;
                                }
                                return match;
                            });

                            // Apply env-specific formatting (colors, etc.)
                            createDebug.formatArgs.call(self, args);

                            const logFn = self.log || createDebug.log;
                            logFn.apply(self, args);
                        }

                        debug.namespace = namespace;
                        debug.useColors = createDebug.useColors();
                        debug.color = createDebug.selectColor(namespace);
                        debug.extend = extend;
                        debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

                        Object.defineProperty(debug, 'enabled', {
                            enumerable: true,
                            configurable: false,
                            get: () => {
                                if (enableOverride !== null) {
                                    return enableOverride;
                                }
                                if (namespacesCache !== createDebug.namespaces) {
                                    namespacesCache = createDebug.namespaces;
                                    enabledCache = createDebug.enabled(namespace);
                                }

                                return enabledCache;
                            },
                            set: (v) => {
                                enableOverride = v;
                            },
                        });

                        // Env-specific initialization logic for debug instances
                        if (typeof createDebug.init === 'function') {
                            createDebug.init(debug);
                        }

                        return debug;
                    }

                    function extend(namespace, delimiter) {
                        const newDebug = createDebug(
                            this.namespace +
                                (typeof delimiter === 'undefined' ? ':' : delimiter) +
                                namespace,
                        );
                        newDebug.log = this.log;
                        return newDebug;
                    }

                    /**
                     * Enables a debug mode by namespaces. This can include modes
                     * separated by a colon and wildcards.
                     *
                     * @param {String} namespaces
                     * @api public
                     */
                    function enable(namespaces) {
                        createDebug.save(namespaces);
                        createDebug.namespaces = namespaces;

                        createDebug.names = [];
                        createDebug.skips = [];

                        let i;
                        const split = (typeof namespaces === 'string' ? namespaces : '').split(
                            /[\s,]+/,
                        );
                        const len = split.length;

                        for (i = 0; i < len; i++) {
                            if (!split[i]) {
                                // ignore empty strings
                                continue;
                            }

                            namespaces = split[i].replace(/\*/g, '.*?');

                            if (namespaces[0] === '-') {
                                createDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));
                            } else {
                                createDebug.names.push(new RegExp('^' + namespaces + '$'));
                            }
                        }
                    }

                    /**
                     * Disable debug output.
                     *
                     * @return {String} namespaces
                     * @api public
                     */
                    function disable() {
                        const namespaces = [
                            ...createDebug.names.map(toNamespace),
                            ...createDebug.skips
                                .map(toNamespace)
                                .map((namespace) => '-' + namespace),
                        ].join(',');
                        createDebug.enable('');
                        return namespaces;
                    }

                    /**
                     * Returns true if the given mode name is enabled, false otherwise.
                     *
                     * @param {String} name
                     * @return {Boolean}
                     * @api public
                     */
                    function enabled(name) {
                        if (name[name.length - 1] === '*') {
                            return true;
                        }

                        let i;
                        let len;

                        for (i = 0, len = createDebug.skips.length; i < len; i++) {
                            if (createDebug.skips[i].test(name)) {
                                return false;
                            }
                        }

                        for (i = 0, len = createDebug.names.length; i < len; i++) {
                            if (createDebug.names[i].test(name)) {
                                return true;
                            }
                        }

                        return false;
                    }

                    /**
                     * Convert regexp to namespace
                     *
                     * @param {RegExp} regxep
                     * @return {String} namespace
                     * @api private
                     */
                    function toNamespace(regexp) {
                        return regexp
                            .toString()
                            .substring(2, regexp.toString().length - 2)
                            .replace(/\.\*\?$/, '*');
                    }

                    /**
                     * Coerce `val`.
                     *
                     * @param {Mixed} val
                     * @return {Mixed}
                     * @api private
                     */
                    function coerce(val) {
                        if (val instanceof Error) {
                            return val.stack || val.message;
                        }
                        return val;
                    }

                    /**
                     * XXX DO NOT USE. This is a temporary stub function.
                     * XXX It WILL be removed in the next major release.
                     */
                    function destroy() {
                        console.warn(
                            'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.',
                        );
                    }

                    createDebug.enable(createDebug.load());

                    return createDebug;
                }

                module.exports = setup;
            },
            { ms: 69 },
        ],
        10: [
            function (require, module, exports) {
                'use strict';
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.hasCORS = void 0;
                // imported from https://github.com/component/has-cors
                let value = false;
                try {
                    value =
                        typeof XMLHttpRequest !== 'undefined' &&
                        'withCredentials' in new XMLHttpRequest();
                } catch (err) {
                    // if XMLHttp support is disabled in IE then it will throw
                    // when trying to create
                }
                exports.hasCORS = value;
            },
            {},
        ],
        11: [
            function (require, module, exports) {
                'use strict';
                // imported from https://github.com/galkn/querystring
                /**
                 * Compiles a querystring
                 * Returns string representation of the object
                 *
                 * @param {Object}
                 * @api private
                 */
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.decode = exports.encode = void 0;
                function encode(obj) {
                    let str = '';
                    for (let i in obj) {
                        if (obj.hasOwnProperty(i)) {
                            if (str.length) str += '&';
                            str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
                        }
                    }
                    return str;
                }
                exports.encode = encode;
                /**
                 * Parses a simple querystring into an object
                 *
                 * @param {String} qs
                 * @api private
                 */
                function decode(qs) {
                    let qry = {};
                    let pairs = qs.split('&');
                    for (let i = 0, l = pairs.length; i < l; i++) {
                        let pair = pairs[i].split('=');
                        qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
                    }
                    return qry;
                }
                exports.decode = decode;
            },
            {},
        ],
        12: [
            function (require, module, exports) {
                'use strict';
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.parse = void 0;
                // imported from https://github.com/galkn/parseuri
                /**
                 * Parses a URI
                 *
                 * Note: we could also have used the built-in URL object, but it isn't supported on all platforms.
                 *
                 * See:
                 * - https://developer.mozilla.org/en-US/docs/Web/API/URL
                 * - https://caniuse.com/url
                 * - https://www.rfc-editor.org/rfc/rfc3986#appendix-B
                 *
                 * History of the parse() method:
                 * - first commit: https://github.com/socketio/socket.io-client/commit/4ee1d5d94b3906a9c052b459f1a818b15f38f91c
                 * - export into its own module: https://github.com/socketio/engine.io-client/commit/de2c561e4564efeb78f1bdb1ba39ef81b2822cb3
                 * - reimport: https://github.com/socketio/engine.io-client/commit/df32277c3f6d622eec5ed09f493cae3f3391d242
                 *
                 * @author Steven Levithan <stevenlevithan.com> (MIT license)
                 * @api private
                 */
                const re =
                    /^(?:(?![^:@\/?#]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@\/?#]*)(?::([^:@\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;
                const parts = [
                    'source',
                    'protocol',
                    'authority',
                    'userInfo',
                    'user',
                    'password',
                    'host',
                    'port',
                    'relative',
                    'path',
                    'directory',
                    'file',
                    'query',
                    'anchor',
                ];
                function parse(str) {
                    const src = str,
                        b = str.indexOf('['),
                        e = str.indexOf(']');
                    if (b != -1 && e != -1) {
                        str =
                            str.substring(0, b) +
                            str.substring(b, e).replace(/:/g, ';') +
                            str.substring(e, str.length);
                    }
                    let m = re.exec(str || ''),
                        uri = {},
                        i = 14;
                    while (i--) {
                        uri[parts[i]] = m[i] || '';
                    }
                    if (b != -1 && e != -1) {
                        uri.source = src;
                        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
                        uri.authority = uri.authority
                            .replace('[', '')
                            .replace(']', '')
                            .replace(/;/g, ':');
                        uri.ipv6uri = true;
                    }
                    uri.pathNames = pathNames(uri, uri['path']);
                    uri.queryKey = queryKey(uri, uri['query']);
                    return uri;
                }
                exports.parse = parse;
                function pathNames(obj, path) {
                    const regx = /\/{2,9}/g,
                        names = path.replace(regx, '/').split('/');
                    if (path.slice(0, 1) == '/' || path.length === 0) {
                        names.splice(0, 1);
                    }
                    if (path.slice(-1) == '/') {
                        names.splice(names.length - 1, 1);
                    }
                    return names;
                }
                function queryKey(uri, query) {
                    const data = {};
                    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {
                        if ($1) {
                            data[$1] = $2;
                        }
                    });
                    return data;
                }
            },
            {},
        ],
        13: [
            function (require, module, exports) {
                // imported from https://github.com/unshiftio/yeast
                'use strict';
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.yeast = exports.decode = exports.encode = void 0;
                const alphabet =
                        '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split(
                            '',
                        ),
                    length = 64,
                    map = {};
                let seed = 0,
                    i = 0,
                    prev;
                /**
                 * Return a string representing the specified number.
                 *
                 * @param {Number} num The number to convert.
                 * @returns {String} The string representation of the number.
                 * @api public
                 */
                function encode(num) {
                    let encoded = '';
                    do {
                        encoded = alphabet[num % length] + encoded;
                        num = Math.floor(num / length);
                    } while (num > 0);
                    return encoded;
                }
                exports.encode = encode;
                /**
                 * Return the integer value specified by the given string.
                 *
                 * @param {String} str The string to convert.
                 * @returns {Number} The integer value represented by the string.
                 * @api public
                 */
                function decode(str) {
                    let decoded = 0;
                    for (i = 0; i < str.length; i++) {
                        decoded = decoded * length + map[str.charAt(i)];
                    }
                    return decoded;
                }
                exports.decode = decode;
                /**
                 * Yeast: A tiny growing id generator.
                 *
                 * @returns {String} A unique id.
                 * @api public
                 */
                function yeast() {
                    const now = encode(+new Date());
                    if (now !== prev) return (seed = 0), (prev = now);
                    return now + '.' + encode(seed++);
                }
                exports.yeast = yeast;
                //
                // Map each character to its index.
                //
                for (; i < length; i++) map[alphabet[i]] = i;
            },
            {},
        ],
        14: [
            function (require, module, exports) {
                'use strict';
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.globalThisShim = void 0;
                exports.globalThisShim = (() => {
                    if (typeof self !== 'undefined') {
                        return self;
                    } else if (typeof window !== 'undefined') {
                        return window;
                    } else {
                        return Function('return this')();
                    }
                })();
            },
            {},
        ],
        15: [
            function (require, module, exports) {
                'use strict';
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.nextTick =
                    exports.parse =
                    exports.installTimerFunctions =
                    exports.transports =
                    exports.Transport =
                    exports.protocol =
                    exports.Socket =
                        void 0;
                const socket_js_1 = require('./socket.js');
                Object.defineProperty(exports, 'Socket', {
                    enumerable: true,
                    get: function () {
                        return socket_js_1.Socket;
                    },
                });
                exports.protocol = socket_js_1.Socket.protocol;
                var transport_js_1 = require('./transport.js');
                Object.defineProperty(exports, 'Transport', {
                    enumerable: true,
                    get: function () {
                        return transport_js_1.Transport;
                    },
                });
                var index_js_1 = require('./transports/index.js');
                Object.defineProperty(exports, 'transports', {
                    enumerable: true,
                    get: function () {
                        return index_js_1.transports;
                    },
                });
                var util_js_1 = require('./util.js');
                Object.defineProperty(exports, 'installTimerFunctions', {
                    enumerable: true,
                    get: function () {
                        return util_js_1.installTimerFunctions;
                    },
                });
                var parseuri_js_1 = require('./contrib/parseuri.js');
                Object.defineProperty(exports, 'parse', {
                    enumerable: true,
                    get: function () {
                        return parseuri_js_1.parse;
                    },
                });
                var websocket_constructor_js_1 = require('./transports/websocket-constructor.js');
                Object.defineProperty(exports, 'nextTick', {
                    enumerable: true,
                    get: function () {
                        return websocket_constructor_js_1.nextTick;
                    },
                });
            },
            {
                './contrib/parseuri.js': 12,
                './socket.js': 16,
                './transport.js': 17,
                './transports/index.js': 18,
                './transports/websocket-constructor.js': 20,
                './util.js': 24,
            },
        ],
        16: [
            function (require, module, exports) {
                'use strict';
                var __importDefault =
                    (this && this.__importDefault) ||
                    function (mod) {
                        return mod && mod.__esModule ? mod : { default: mod };
                    };
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.Socket = void 0;
                const index_js_1 = require('./transports/index.js');
                const util_js_1 = require('./util.js');
                const parseqs_js_1 = require('./contrib/parseqs.js');
                const parseuri_js_1 = require('./contrib/parseuri.js');
                const debug_1 = __importDefault(require('debug')); // debug()
                const component_emitter_1 = require('@socket.io/component-emitter');
                const engine_io_parser_1 = require('engine.io-parser');
                const websocket_constructor_js_1 = require('./transports/websocket-constructor.js');
                const debug = (0, debug_1.default)('engine.io-client:socket'); // debug()
                class Socket extends component_emitter_1.Emitter {
                    /**
                     * Socket constructor.
                     *
                     * @param {String|Object} uri - uri or options
                     * @param {Object} opts - options
                     */
                    constructor(uri, opts = {}) {
                        super();
                        this.binaryType = websocket_constructor_js_1.defaultBinaryType;
                        this.writeBuffer = [];
                        if (uri && 'object' === typeof uri) {
                            opts = uri;
                            uri = null;
                        }
                        if (uri) {
                            uri = (0, parseuri_js_1.parse)(uri);
                            opts.hostname = uri.host;
                            opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';
                            opts.port = uri.port;
                            if (uri.query) opts.query = uri.query;
                        } else if (opts.host) {
                            opts.hostname = (0, parseuri_js_1.parse)(opts.host).host;
                        }
                        (0, util_js_1.installTimerFunctions)(this, opts);
                        this.secure =
                            null != opts.secure
                                ? opts.secure
                                : typeof location !== 'undefined' && 'https:' === location.protocol;
                        if (opts.hostname && !opts.port) {
                            // if no port is specified manually, use the protocol default
                            opts.port = this.secure ? '443' : '80';
                        }
                        this.hostname =
                            opts.hostname ||
                            (typeof location !== 'undefined' ? location.hostname : 'localhost');
                        this.port =
                            opts.port ||
                            (typeof location !== 'undefined' && location.port
                                ? location.port
                                : this.secure
                                ? '443'
                                : '80');
                        this.transports = opts.transports || [
                            'polling',
                            'websocket',
                            'webtransport',
                        ];
                        this.writeBuffer = [];
                        this.prevBufferLen = 0;
                        this.opts = Object.assign(
                            {
                                path: '/engine.io',
                                agent: false,
                                withCredentials: false,
                                upgrade: true,
                                timestampParam: 't',
                                rememberUpgrade: false,
                                addTrailingSlash: true,
                                rejectUnauthorized: true,
                                perMessageDeflate: {
                                    threshold: 1024,
                                },
                                transportOptions: {},
                                closeOnBeforeunload: false,
                            },
                            opts,
                        );
                        this.opts.path =
                            this.opts.path.replace(/\/$/, '') +
                            (this.opts.addTrailingSlash ? '/' : '');
                        if (typeof this.opts.query === 'string') {
                            this.opts.query = (0, parseqs_js_1.decode)(this.opts.query);
                        }
                        // set on handshake
                        this.id = null;
                        this.upgrades = null;
                        this.pingInterval = null;
                        this.pingTimeout = null;
                        // set on heartbeat
                        this.pingTimeoutTimer = null;
                        if (typeof addEventListener === 'function') {
                            if (this.opts.closeOnBeforeunload) {
                                // Firefox closes the connection when the "beforeunload" event is emitted but not Chrome. This event listener
                                // ensures every browser behaves the same (no "disconnect" event at the Socket.IO level when the page is
                                // closed/reloaded)
                                this.beforeunloadEventListener = () => {
                                    if (this.transport) {
                                        // silently close the transport
                                        this.transport.removeAllListeners();
                                        this.transport.close();
                                    }
                                };
                                addEventListener(
                                    'beforeunload',
                                    this.beforeunloadEventListener,
                                    false,
                                );
                            }
                            if (this.hostname !== 'localhost') {
                                this.offlineEventListener = () => {
                                    this.onClose('transport close', {
                                        description: 'network connection lost',
                                    });
                                };
                                addEventListener('offline', this.offlineEventListener, false);
                            }
                        }
                        this.open();
                    }
                    /**
                     * Creates transport of the given type.
                     *
                     * @param {String} name - transport name
                     * @return {Transport}
                     * @private
                     */
                    createTransport(name) {
                        debug('creating transport "%s"', name);
                        const query = Object.assign({}, this.opts.query);
                        // append engine.io protocol identifier
                        query.EIO = engine_io_parser_1.protocol;
                        // transport name
                        query.transport = name;
                        // session id if we already have one
                        if (this.id) query.sid = this.id;
                        const opts = Object.assign(
                            {},
                            this.opts,
                            {
                                query,
                                socket: this,
                                hostname: this.hostname,
                                secure: this.secure,
                                port: this.port,
                            },
                            this.opts.transportOptions[name],
                        );
                        debug('options: %j', opts);
                        return new index_js_1.transports[name](opts);
                    }
                    /**
                     * Initializes transport to use and starts probe.
                     *
                     * @private
                     */
                    open() {
                        let transport;
                        if (
                            this.opts.rememberUpgrade &&
                            Socket.priorWebsocketSuccess &&
                            this.transports.indexOf('websocket') !== -1
                        ) {
                            transport = 'websocket';
                        } else if (0 === this.transports.length) {
                            // Emit error on next tick so it can be listened to
                            this.setTimeoutFn(() => {
                                this.emitReserved('error', 'No transports available');
                            }, 0);
                            return;
                        } else {
                            transport = this.transports[0];
                        }
                        this.readyState = 'opening';
                        // Retry with the next transport if the transport is disabled (jsonp: false)
                        try {
                            transport = this.createTransport(transport);
                        } catch (e) {
                            debug('error while creating transport: %s', e);
                            this.transports.shift();
                            this.open();
                            return;
                        }
                        transport.open();
                        this.setTransport(transport);
                    }
                    /**
                     * Sets the current transport. Disables the existing one (if any).
                     *
                     * @private
                     */
                    setTransport(transport) {
                        debug('setting transport %s', transport.name);
                        if (this.transport) {
                            debug('clearing existing transport %s', this.transport.name);
                            this.transport.removeAllListeners();
                        }
                        // set up transport
                        this.transport = transport;
                        // set up transport listeners
                        transport
                            .on('drain', this.onDrain.bind(this))
                            .on('packet', this.onPacket.bind(this))
                            .on('error', this.onError.bind(this))
                            .on('close', (reason) => this.onClose('transport close', reason));
                    }
                    /**
                     * Probes a transport.
                     *
                     * @param {String} name - transport name
                     * @private
                     */
                    probe(name) {
                        debug('probing transport "%s"', name);
                        let transport = this.createTransport(name);
                        let failed = false;
                        Socket.priorWebsocketSuccess = false;
                        const onTransportOpen = () => {
                            if (failed) return;
                            debug('probe transport "%s" opened', name);
                            transport.send([{ type: 'ping', data: 'probe' }]);
                            transport.once('packet', (msg) => {
                                if (failed) return;
                                if ('pong' === msg.type && 'probe' === msg.data) {
                                    debug('probe transport "%s" pong', name);
                                    this.upgrading = true;
                                    this.emitReserved('upgrading', transport);
                                    if (!transport) return;
                                    Socket.priorWebsocketSuccess = 'websocket' === transport.name;
                                    debug('pausing current transport "%s"', this.transport.name);
                                    this.transport.pause(() => {
                                        if (failed) return;
                                        if ('closed' === this.readyState) return;
                                        debug('changing transport and sending upgrade packet');
                                        cleanup();
                                        this.setTransport(transport);
                                        transport.send([{ type: 'upgrade' }]);
                                        this.emitReserved('upgrade', transport);
                                        transport = null;
                                        this.upgrading = false;
                                        this.flush();
                                    });
                                } else {
                                    debug('probe transport "%s" failed', name);
                                    const err = new Error('probe error');
                                    // @ts-ignore
                                    err.transport = transport.name;
                                    this.emitReserved('upgradeError', err);
                                }
                            });
                        };
                        function freezeTransport() {
                            if (failed) return;
                            // Any callback called by transport should be ignored since now
                            failed = true;
                            cleanup();
                            transport.close();
                            transport = null;
                        }
                        // Handle any error that happens while probing
                        const onerror = (err) => {
                            const error = new Error('probe error: ' + err);
                            // @ts-ignore
                            error.transport = transport.name;
                            freezeTransport();
                            debug('probe transport "%s" failed because of error: %s', name, err);
                            this.emitReserved('upgradeError', error);
                        };
                        function onTransportClose() {
                            onerror('transport closed');
                        }
                        // When the socket is closed while we're probing
                        function onclose() {
                            onerror('socket closed');
                        }
                        // When the socket is upgraded while we're probing
                        function onupgrade(to) {
                            if (transport && to.name !== transport.name) {
                                debug('"%s" works - aborting "%s"', to.name, transport.name);
                                freezeTransport();
                            }
                        }
                        // Remove all listeners on the transport and on self
                        const cleanup = () => {
                            transport.removeListener('open', onTransportOpen);
                            transport.removeListener('error', onerror);
                            transport.removeListener('close', onTransportClose);
                            this.off('close', onclose);
                            this.off('upgrading', onupgrade);
                        };
                        transport.once('open', onTransportOpen);
                        transport.once('error', onerror);
                        transport.once('close', onTransportClose);
                        this.once('close', onclose);
                        this.once('upgrading', onupgrade);
                        if (
                            this.upgrades.indexOf('webtransport') !== -1 &&
                            name !== 'webtransport'
                        ) {
                            // favor WebTransport
                            this.setTimeoutFn(() => {
                                if (!failed) {
                                    transport.open();
                                }
                            }, 200);
                        } else {
                            transport.open();
                        }
                    }
                    /**
                     * Called when connection is deemed open.
                     *
                     * @private
                     */
                    onOpen() {
                        debug('socket open');
                        this.readyState = 'open';
                        Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;
                        this.emitReserved('open');
                        this.flush();
                        // we check for `readyState` in case an `open`
                        // listener already closed the socket
                        if ('open' === this.readyState && this.opts.upgrade) {
                            debug('starting upgrade probes');
                            let i = 0;
                            const l = this.upgrades.length;
                            for (; i < l; i++) {
                                this.probe(this.upgrades[i]);
                            }
                        }
                    }
                    /**
                     * Handles a packet.
                     *
                     * @private
                     */
                    onPacket(packet) {
                        if (
                            'opening' === this.readyState ||
                            'open' === this.readyState ||
                            'closing' === this.readyState
                        ) {
                            debug('socket receive: type "%s", data "%s"', packet.type, packet.data);
                            this.emitReserved('packet', packet);
                            // Socket is live - any packet counts
                            this.emitReserved('heartbeat');
                            this.resetPingTimeout();
                            switch (packet.type) {
                                case 'open':
                                    this.onHandshake(JSON.parse(packet.data));
                                    break;
                                case 'ping':
                                    this.sendPacket('pong');
                                    this.emitReserved('ping');
                                    this.emitReserved('pong');
                                    break;
                                case 'error':
                                    const err = new Error('server error');
                                    // @ts-ignore
                                    err.code = packet.data;
                                    this.onError(err);
                                    break;
                                case 'message':
                                    this.emitReserved('data', packet.data);
                                    this.emitReserved('message', packet.data);
                                    break;
                            }
                        } else {
                            debug('packet received with socket readyState "%s"', this.readyState);
                        }
                    }
                    /**
                     * Called upon handshake completion.
                     *
                     * @param {Object} data - handshake obj
                     * @private
                     */
                    onHandshake(data) {
                        this.emitReserved('handshake', data);
                        this.id = data.sid;
                        this.transport.query.sid = data.sid;
                        this.upgrades = this.filterUpgrades(data.upgrades);
                        this.pingInterval = data.pingInterval;
                        this.pingTimeout = data.pingTimeout;
                        this.maxPayload = data.maxPayload;
                        this.onOpen();
                        // In case open handler closes socket
                        if ('closed' === this.readyState) return;
                        this.resetPingTimeout();
                    }
                    /**
                     * Sets and resets ping timeout timer based on server pings.
                     *
                     * @private
                     */
                    resetPingTimeout() {
                        this.clearTimeoutFn(this.pingTimeoutTimer);
                        this.pingTimeoutTimer = this.setTimeoutFn(() => {
                            this.onClose('ping timeout');
                        }, this.pingInterval + this.pingTimeout);
                        if (this.opts.autoUnref) {
                            this.pingTimeoutTimer.unref();
                        }
                    }
                    /**
                     * Called on `drain` event
                     *
                     * @private
                     */
                    onDrain() {
                        this.writeBuffer.splice(0, this.prevBufferLen);
                        // setting prevBufferLen = 0 is very important
                        // for example, when upgrading, upgrade packet is sent over,
                        // and a nonzero prevBufferLen could cause problems on `drain`
                        this.prevBufferLen = 0;
                        if (0 === this.writeBuffer.length) {
                            this.emitReserved('drain');
                        } else {
                            this.flush();
                        }
                    }
                    /**
                     * Flush write buffers.
                     *
                     * @private
                     */
                    flush() {
                        if (
                            'closed' !== this.readyState &&
                            this.transport.writable &&
                            !this.upgrading &&
                            this.writeBuffer.length
                        ) {
                            const packets = this.getWritablePackets();
                            debug('flushing %d packets in socket', packets.length);
                            this.transport.send(packets);
                            // keep track of current length of writeBuffer
                            // splice writeBuffer and callbackBuffer on `drain`
                            this.prevBufferLen = packets.length;
                            this.emitReserved('flush');
                        }
                    }
                    /**
                     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP
                     * long-polling)
                     *
                     * @private
                     */
                    getWritablePackets() {
                        const shouldCheckPayloadSize =
                            this.maxPayload &&
                            this.transport.name === 'polling' &&
                            this.writeBuffer.length > 1;
                        if (!shouldCheckPayloadSize) {
                            return this.writeBuffer;
                        }
                        let payloadSize = 1; // first packet type
                        for (let i = 0; i < this.writeBuffer.length; i++) {
                            const data = this.writeBuffer[i].data;
                            if (data) {
                                payloadSize += (0, util_js_1.byteLength)(data);
                            }
                            if (i > 0 && payloadSize > this.maxPayload) {
                                debug('only send %d out of %d packets', i, this.writeBuffer.length);
                                return this.writeBuffer.slice(0, i);
                            }
                            payloadSize += 2; // separator + packet type
                        }
                        debug('payload size is %d (max: %d)', payloadSize, this.maxPayload);
                        return this.writeBuffer;
                    }
                    /**
                     * Sends a message.
                     *
                     * @param {String} msg - message.
                     * @param {Object} options.
                     * @param {Function} callback function.
                     * @return {Socket} for chaining.
                     */
                    write(msg, options, fn) {
                        this.sendPacket('message', msg, options, fn);
                        return this;
                    }
                    send(msg, options, fn) {
                        this.sendPacket('message', msg, options, fn);
                        return this;
                    }
                    /**
                     * Sends a packet.
                     *
                     * @param {String} type: packet type.
                     * @param {String} data.
                     * @param {Object} options.
                     * @param {Function} fn - callback function.
                     * @private
                     */
                    sendPacket(type, data, options, fn) {
                        if ('function' === typeof data) {
                            fn = data;
                            data = undefined;
                        }
                        if ('function' === typeof options) {
                            fn = options;
                            options = null;
                        }
                        if ('closing' === this.readyState || 'closed' === this.readyState) {
                            return;
                        }
                        options = options || {};
                        options.compress = false !== options.compress;
                        const packet = {
                            type: type,
                            data: data,
                            options: options,
                        };
                        this.emitReserved('packetCreate', packet);
                        this.writeBuffer.push(packet);
                        if (fn) this.once('flush', fn);
                        this.flush();
                    }
                    /**
                     * Closes the connection.
                     */
                    close() {
                        const close = () => {
                            this.onClose('forced close');
                            debug('socket closing - telling transport to close');
                            this.transport.close();
                        };
                        const cleanupAndClose = () => {
                            this.off('upgrade', cleanupAndClose);
                            this.off('upgradeError', cleanupAndClose);
                            close();
                        };
                        const waitForUpgrade = () => {
                            // wait for upgrade to finish since we can't send packets while pausing a transport
                            this.once('upgrade', cleanupAndClose);
                            this.once('upgradeError', cleanupAndClose);
                        };
                        if ('opening' === this.readyState || 'open' === this.readyState) {
                            this.readyState = 'closing';
                            if (this.writeBuffer.length) {
                                this.once('drain', () => {
                                    if (this.upgrading) {
                                        waitForUpgrade();
                                    } else {
                                        close();
                                    }
                                });
                            } else if (this.upgrading) {
                                waitForUpgrade();
                            } else {
                                close();
                            }
                        }
                        return this;
                    }
                    /**
                     * Called upon transport error
                     *
                     * @private
                     */
                    onError(err) {
                        debug('socket error %j', err);
                        Socket.priorWebsocketSuccess = false;
                        this.emitReserved('error', err);
                        this.onClose('transport error', err);
                    }
                    /**
                     * Called upon transport close.
                     *
                     * @private
                     */
                    onClose(reason, description) {
                        if (
                            'opening' === this.readyState ||
                            'open' === this.readyState ||
                            'closing' === this.readyState
                        ) {
                            debug('socket close with reason: "%s"', reason);
                            // clear timers
                            this.clearTimeoutFn(this.pingTimeoutTimer);
                            // stop event from firing again for transport
                            this.transport.removeAllListeners('close');
                            // ensure transport won't stay open
                            this.transport.close();
                            // ignore further transport communication
                            this.transport.removeAllListeners();
                            if (typeof removeEventListener === 'function') {
                                removeEventListener(
                                    'beforeunload',
                                    this.beforeunloadEventListener,
                                    false,
                                );
                                removeEventListener('offline', this.offlineEventListener, false);
                            }
                            // set ready state
                            this.readyState = 'closed';
                            // clear session id
                            this.id = null;
                            // emit close event
                            this.emitReserved('close', reason, description);
                            // clean buffers after, so users can still
                            // grab the buffers on `close` event
                            this.writeBuffer = [];
                            this.prevBufferLen = 0;
                        }
                    }
                    /**
                     * Filters upgrades, returning only those matching client transports.
                     *
                     * @param {Array} upgrades - server upgrades
                     * @private
                     */
                    filterUpgrades(upgrades) {
                        const filteredUpgrades = [];
                        let i = 0;
                        const j = upgrades.length;
                        for (; i < j; i++) {
                            if (~this.transports.indexOf(upgrades[i]))
                                filteredUpgrades.push(upgrades[i]);
                        }
                        return filteredUpgrades;
                    }
                }
                exports.Socket = Socket;
                Socket.protocol = engine_io_parser_1.protocol;
            },
            {
                './contrib/parseqs.js': 11,
                './contrib/parseuri.js': 12,
                './transports/index.js': 18,
                './transports/websocket-constructor.js': 20,
                './util.js': 24,
                '@socket.io/component-emitter': 2,
                debug: 8,
                'engine.io-parser': 29,
            },
        ],
        17: [
            function (require, module, exports) {
                'use strict';
                var __importDefault =
                    (this && this.__importDefault) ||
                    function (mod) {
                        return mod && mod.__esModule ? mod : { default: mod };
                    };
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.Transport = void 0;
                const engine_io_parser_1 = require('engine.io-parser');
                const component_emitter_1 = require('@socket.io/component-emitter');
                const util_js_1 = require('./util.js');
                const debug_1 = __importDefault(require('debug')); // debug()
                const parseqs_js_1 = require('./contrib/parseqs.js');
                const debug = (0, debug_1.default)('engine.io-client:transport'); // debug()
                class TransportError extends Error {
                    constructor(reason, description, context) {
                        super(reason);
                        this.description = description;
                        this.context = context;
                        this.type = 'TransportError';
                    }
                }
                class Transport extends component_emitter_1.Emitter {
                    /**
                     * Transport abstract constructor.
                     *
                     * @param {Object} opts - options
                     * @protected
                     */
                    constructor(opts) {
                        super();
                        this.writable = false;
                        (0, util_js_1.installTimerFunctions)(this, opts);
                        this.opts = opts;
                        this.query = opts.query;
                        this.socket = opts.socket;
                    }
                    /**
                     * Emits an error.
                     *
                     * @param {String} reason
                     * @param description
                     * @param context - the error context
                     * @return {Transport} for chaining
                     * @protected
                     */
                    onError(reason, description, context) {
                        super.emitReserved(
                            'error',
                            new TransportError(reason, description, context),
                        );
                        return this;
                    }
                    /**
                     * Opens the transport.
                     */
                    open() {
                        this.readyState = 'opening';
                        this.doOpen();
                        return this;
                    }
                    /**
                     * Closes the transport.
                     */
                    close() {
                        if (this.readyState === 'opening' || this.readyState === 'open') {
                            this.doClose();
                            this.onClose();
                        }
                        return this;
                    }
                    /**
                     * Sends multiple packets.
                     *
                     * @param {Array} packets
                     */
                    send(packets) {
                        if (this.readyState === 'open') {
                            this.write(packets);
                        } else {
                            // this might happen if the transport was silently closed in the beforeunload event handler
                            debug('transport is not open, discarding packets');
                        }
                    }
                    /**
                     * Called upon open
                     *
                     * @protected
                     */
                    onOpen() {
                        this.readyState = 'open';
                        this.writable = true;
                        super.emitReserved('open');
                    }
                    /**
                     * Called with data.
                     *
                     * @param {String} data
                     * @protected
                     */
                    onData(data) {
                        const packet = (0, engine_io_parser_1.decodePacket)(
                            data,
                            this.socket.binaryType,
                        );
                        this.onPacket(packet);
                    }
                    /**
                     * Called with a decoded packet.
                     *
                     * @protected
                     */
                    onPacket(packet) {
                        super.emitReserved('packet', packet);
                    }
                    /**
                     * Called upon close.
                     *
                     * @protected
                     */
                    onClose(details) {
                        this.readyState = 'closed';
                        super.emitReserved('close', details);
                    }
                    /**
                     * Pauses the transport, in order not to lose packets during an upgrade.
                     *
                     * @param onPause
                     */
                    pause(onPause) {}
                    createUri(schema, query = {}) {
                        return (
                            schema +
                            '://' +
                            this._hostname() +
                            this._port() +
                            this.opts.path +
                            this._query(query)
                        );
                    }
                    _hostname() {
                        const hostname = this.opts.hostname;
                        return hostname.indexOf(':') === -1 ? hostname : '[' + hostname + ']';
                    }
                    _port() {
                        if (
                            this.opts.port &&
                            ((this.opts.secure && Number(this.opts.port !== 443)) ||
                                (!this.opts.secure && Number(this.opts.port) !== 80))
                        ) {
                            return ':' + this.opts.port;
                        } else {
                            return '';
                        }
                    }
                    _query(query) {
                        const encodedQuery = (0, parseqs_js_1.encode)(query);
                        return encodedQuery.length ? '?' + encodedQuery : '';
                    }
                }
                exports.Transport = Transport;
            },
            {
                './contrib/parseqs.js': 11,
                './util.js': 24,
                '@socket.io/component-emitter': 2,
                debug: 8,
                'engine.io-parser': 29,
            },
        ],
        18: [
            function (require, module, exports) {
                'use strict';
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.transports = void 0;
                const polling_js_1 = require('./polling.js');
                const websocket_js_1 = require('./websocket.js');
                const webtransport_js_1 = require('./webtransport.js');
                exports.transports = {
                    websocket: websocket_js_1.WS,
                    webtransport: webtransport_js_1.WT,
                    polling: polling_js_1.Polling,
                };
            },
            { './polling.js': 19, './websocket.js': 21, './webtransport.js': 22 },
        ],
        19: [
            function (require, module, exports) {
                'use strict';
                var __importDefault =
                    (this && this.__importDefault) ||
                    function (mod) {
                        return mod && mod.__esModule ? mod : { default: mod };
                    };
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.Request = exports.Polling = void 0;
                const transport_js_1 = require('../transport.js');
                const debug_1 = __importDefault(require('debug')); // debug()
                const yeast_js_1 = require('../contrib/yeast.js');
                const engine_io_parser_1 = require('engine.io-parser');
                const xmlhttprequest_js_1 = require('./xmlhttprequest.js');
                const component_emitter_1 = require('@socket.io/component-emitter');
                const util_js_1 = require('../util.js');
                const globalThis_js_1 = require('../globalThis.js');
                const debug = (0, debug_1.default)('engine.io-client:polling'); // debug()
                function empty() {}
                const hasXHR2 = (function () {
                    const xhr = new xmlhttprequest_js_1.XHR({
                        xdomain: false,
                    });
                    return null != xhr.responseType;
                })();
                class Polling extends transport_js_1.Transport {
                    /**
                     * XHR Polling constructor.
                     *
                     * @param {Object} opts
                     * @package
                     */
                    constructor(opts) {
                        super(opts);
                        this.polling = false;
                        if (typeof location !== 'undefined') {
                            const isSSL = 'https:' === location.protocol;
                            let port = location.port;
                            // some user agents have empty `location.port`
                            if (!port) {
                                port = isSSL ? '443' : '80';
                            }
                            this.xd =
                                (typeof location !== 'undefined' &&
                                    opts.hostname !== location.hostname) ||
                                port !== opts.port;
                        }
                        /**
                         * XHR supports binary
                         */
                        const forceBase64 = opts && opts.forceBase64;
                        this.supportsBinary = hasXHR2 && !forceBase64;
                        if (this.opts.withCredentials) {
                            this.cookieJar = (0, xmlhttprequest_js_1.createCookieJar)();
                        }
                    }
                    get name() {
                        return 'polling';
                    }
                    /**
                     * Opens the socket (triggers polling). We write a PING message to determine
                     * when the transport is open.
                     *
                     * @protected
                     */
                    doOpen() {
                        this.poll();
                    }
                    /**
                     * Pauses polling.
                     *
                     * @param {Function} onPause - callback upon buffers are flushed and transport is paused
                     * @package
                     */
                    pause(onPause) {
                        this.readyState = 'pausing';
                        const pause = () => {
                            debug('paused');
                            this.readyState = 'paused';
                            onPause();
                        };
                        if (this.polling || !this.writable) {
                            let total = 0;
                            if (this.polling) {
                                debug('we are currently polling - waiting to pause');
                                total++;
                                this.once('pollComplete', function () {
                                    debug('pre-pause polling complete');
                                    --total || pause();
                                });
                            }
                            if (!this.writable) {
                                debug('we are currently writing - waiting to pause');
                                total++;
                                this.once('drain', function () {
                                    debug('pre-pause writing complete');
                                    --total || pause();
                                });
                            }
                        } else {
                            pause();
                        }
                    }
                    /**
                     * Starts polling cycle.
                     *
                     * @private
                     */
                    poll() {
                        debug('polling');
                        this.polling = true;
                        this.doPoll();
                        this.emitReserved('poll');
                    }
                    /**
                     * Overloads onData to detect payloads.
                     *
                     * @protected
                     */
                    onData(data) {
                        debug('polling got data %s', data);
                        const callback = (packet) => {
                            // if its the first message we consider the transport open
                            if ('opening' === this.readyState && packet.type === 'open') {
                                this.onOpen();
                            }
                            // if its a close packet, we close the ongoing requests
                            if ('close' === packet.type) {
                                this.onClose({ description: 'transport closed by the server' });
                                return false;
                            }
                            // otherwise bypass onData and handle the message
                            this.onPacket(packet);
                        };
                        // decode payload
                        (0, engine_io_parser_1.decodePayload)(data, this.socket.binaryType).forEach(
                            callback,
                        );
                        // if an event did not trigger closing
                        if ('closed' !== this.readyState) {
                            // if we got data we're not polling
                            this.polling = false;
                            this.emitReserved('pollComplete');
                            if ('open' === this.readyState) {
                                this.poll();
                            } else {
                                debug('ignoring poll - transport state "%s"', this.readyState);
                            }
                        }
                    }
                    /**
                     * For polling, send a close packet.
                     *
                     * @protected
                     */
                    doClose() {
                        const close = () => {
                            debug('writing close packet');
                            this.write([{ type: 'close' }]);
                        };
                        if ('open' === this.readyState) {
                            debug('transport open - closing');
                            close();
                        } else {
                            // in case we're trying to close while
                            // handshaking is in progress (GH-164)
                            debug('transport not open - deferring close');
                            this.once('open', close);
                        }
                    }
                    /**
                     * Writes a packets payload.
                     *
                     * @param {Array} packets - data packets
                     * @protected
                     */
                    write(packets) {
                        this.writable = false;
                        (0, engine_io_parser_1.encodePayload)(packets, (data) => {
                            this.doWrite(data, () => {
                                this.writable = true;
                                this.emitReserved('drain');
                            });
                        });
                    }
                    /**
                     * Generates uri for connection.
                     *
                     * @private
                     */
                    uri() {
                        const schema = this.opts.secure ? 'https' : 'http';
                        const query = this.query || {};
                        // cache busting is forced
                        if (false !== this.opts.timestampRequests) {
                            query[this.opts.timestampParam] = (0, yeast_js_1.yeast)();
                        }
                        if (!this.supportsBinary && !query.sid) {
                            query.b64 = 1;
                        }
                        return this.createUri(schema, query);
                    }
                    /**
                     * Creates a request.
                     *
                     * @param {String} method
                     * @private
                     */
                    request(opts = {}) {
                        Object.assign(opts, { xd: this.xd, cookieJar: this.cookieJar }, this.opts);
                        return new Request(this.uri(), opts);
                    }
                    /**
                     * Sends data.
                     *
                     * @param {String} data to send.
                     * @param {Function} called upon flush.
                     * @private
                     */
                    doWrite(data, fn) {
                        const req = this.request({
                            method: 'POST',
                            data: data,
                        });
                        req.on('success', fn);
                        req.on('error', (xhrStatus, context) => {
                            this.onError('xhr post error', xhrStatus, context);
                        });
                    }
                    /**
                     * Starts a poll cycle.
                     *
                     * @private
                     */
                    doPoll() {
                        debug('xhr poll');
                        const req = this.request();
                        req.on('data', this.onData.bind(this));
                        req.on('error', (xhrStatus, context) => {
                            this.onError('xhr poll error', xhrStatus, context);
                        });
                        this.pollXhr = req;
                    }
                }
                exports.Polling = Polling;
                class Request extends component_emitter_1.Emitter {
                    /**
                     * Request constructor
                     *
                     * @param {Object} options
                     * @package
                     */
                    constructor(uri, opts) {
                        super();
                        (0, util_js_1.installTimerFunctions)(this, opts);
                        this.opts = opts;
                        this.method = opts.method || 'GET';
                        this.uri = uri;
                        this.data = undefined !== opts.data ? opts.data : null;
                        this.create();
                    }
                    /**
                     * Creates the XHR object and sends the request.
                     *
                     * @private
                     */
                    create() {
                        var _a;
                        const opts = (0, util_js_1.pick)(
                            this.opts,
                            'agent',
                            'pfx',
                            'key',
                            'passphrase',
                            'cert',
                            'ca',
                            'ciphers',
                            'rejectUnauthorized',
                            'autoUnref',
                        );
                        opts.xdomain = !!this.opts.xd;
                        const xhr = (this.xhr = new xmlhttprequest_js_1.XHR(opts));
                        try {
                            debug('xhr open %s: %s', this.method, this.uri);
                            xhr.open(this.method, this.uri, true);
                            try {
                                if (this.opts.extraHeaders) {
                                    xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);
                                    for (let i in this.opts.extraHeaders) {
                                        if (this.opts.extraHeaders.hasOwnProperty(i)) {
                                            xhr.setRequestHeader(i, this.opts.extraHeaders[i]);
                                        }
                                    }
                                }
                            } catch (e) {}
                            if ('POST' === this.method) {
                                try {
                                    xhr.setRequestHeader(
                                        'Content-type',
                                        'text/plain;charset=UTF-8',
                                    );
                                } catch (e) {}
                            }
                            try {
                                xhr.setRequestHeader('Accept', '*/*');
                            } catch (e) {}
                            (_a = this.opts.cookieJar) === null || _a === void 0
                                ? void 0
                                : _a.addCookies(xhr);
                            // ie6 check
                            if ('withCredentials' in xhr) {
                                xhr.withCredentials = this.opts.withCredentials;
                            }
                            if (this.opts.requestTimeout) {
                                xhr.timeout = this.opts.requestTimeout;
                            }
                            xhr.onreadystatechange = () => {
                                var _a;
                                if (xhr.readyState === 3) {
                                    (_a = this.opts.cookieJar) === null || _a === void 0
                                        ? void 0
                                        : _a.parseCookies(xhr);
                                }
                                if (4 !== xhr.readyState) return;
                                if (200 === xhr.status || 1223 === xhr.status) {
                                    this.onLoad();
                                } else {
                                    // make sure the `error` event handler that's user-set
                                    // does not throw in the same tick and gets caught here
                                    this.setTimeoutFn(() => {
                                        this.onError(
                                            typeof xhr.status === 'number' ? xhr.status : 0,
                                        );
                                    }, 0);
                                }
                            };
                            debug('xhr data %s', this.data);
                            xhr.send(this.data);
                        } catch (e) {
                            // Need to defer since .create() is called directly from the constructor
                            // and thus the 'error' event can only be only bound *after* this exception
                            // occurs.  Therefore, also, we cannot throw here at all.
                            this.setTimeoutFn(() => {
                                this.onError(e);
                            }, 0);
                            return;
                        }
                        if (typeof document !== 'undefined') {
                            this.index = Request.requestsCount++;
                            Request.requests[this.index] = this;
                        }
                    }
                    /**
                     * Called upon error.
                     *
                     * @private
                     */
                    onError(err) {
                        this.emitReserved('error', err, this.xhr);
                        this.cleanup(true);
                    }
                    /**
                     * Cleans up house.
                     *
                     * @private
                     */
                    cleanup(fromError) {
                        if ('undefined' === typeof this.xhr || null === this.xhr) {
                            return;
                        }
                        this.xhr.onreadystatechange = empty;
                        if (fromError) {
                            try {
                                this.xhr.abort();
                            } catch (e) {}
                        }
                        if (typeof document !== 'undefined') {
                            delete Request.requests[this.index];
                        }
                        this.xhr = null;
                    }
                    /**
                     * Called upon load.
                     *
                     * @private
                     */
                    onLoad() {
                        const data = this.xhr.responseText;
                        if (data !== null) {
                            this.emitReserved('data', data);
                            this.emitReserved('success');
                            this.cleanup();
                        }
                    }
                    /**
                     * Aborts the request.
                     *
                     * @package
                     */
                    abort() {
                        this.cleanup();
                    }
                }
                exports.Request = Request;
                Request.requestsCount = 0;
                Request.requests = {};
                /**
                 * Aborts pending requests when unloading the window. This is needed to prevent
                 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
                 * emitted.
                 */
                if (typeof document !== 'undefined') {
                    // @ts-ignore
                    if (typeof attachEvent === 'function') {
                        // @ts-ignore
                        attachEvent('onunload', unloadHandler);
                    } else if (typeof addEventListener === 'function') {
                        const terminationEvent =
                            'onpagehide' in globalThis_js_1.globalThisShim ? 'pagehide' : 'unload';
                        addEventListener(terminationEvent, unloadHandler, false);
                    }
                }
                function unloadHandler() {
                    for (let i in Request.requests) {
                        if (Request.requests.hasOwnProperty(i)) {
                            Request.requests[i].abort();
                        }
                    }
                }
            },
            {
                '../contrib/yeast.js': 13,
                '../globalThis.js': 14,
                '../transport.js': 17,
                '../util.js': 24,
                './xmlhttprequest.js': 23,
                '@socket.io/component-emitter': 2,
                debug: 8,
                'engine.io-parser': 29,
            },
        ],
        20: [
            function (require, module, exports) {
                'use strict';
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.defaultBinaryType =
                    exports.usingBrowserWebSocket =
                    exports.WebSocket =
                    exports.nextTick =
                        void 0;
                const globalThis_js_1 = require('../globalThis.js');
                exports.nextTick = (() => {
                    const isPromiseAvailable =
                        typeof Promise === 'function' && typeof Promise.resolve === 'function';
                    if (isPromiseAvailable) {
                        return (cb) => Promise.resolve().then(cb);
                    } else {
                        return (cb, setTimeoutFn) => setTimeoutFn(cb, 0);
                    }
                })();
                exports.WebSocket =
                    globalThis_js_1.globalThisShim.WebSocket ||
                    globalThis_js_1.globalThisShim.MozWebSocket;
                exports.usingBrowserWebSocket = true;
                exports.defaultBinaryType = 'arraybuffer';
            },
            { '../globalThis.js': 14 },
        ],
        21: [
            function (require, module, exports) {
                (function (Buffer) {
                    (function () {
                        'use strict';
                        var __importDefault =
                            (this && this.__importDefault) ||
                            function (mod) {
                                return mod && mod.__esModule ? mod : { default: mod };
                            };
                        Object.defineProperty(exports, '__esModule', { value: true });
                        exports.WS = void 0;
                        const transport_js_1 = require('../transport.js');
                        const yeast_js_1 = require('../contrib/yeast.js');
                        const util_js_1 = require('../util.js');
                        const websocket_constructor_js_1 = require('./websocket-constructor.js');
                        const debug_1 = __importDefault(require('debug')); // debug()
                        const engine_io_parser_1 = require('engine.io-parser');
                        const debug = (0, debug_1.default)('engine.io-client:websocket'); // debug()
                        // detect ReactNative environment
                        const isReactNative =
                            typeof navigator !== 'undefined' &&
                            typeof navigator.product === 'string' &&
                            navigator.product.toLowerCase() === 'reactnative';
                        class WS extends transport_js_1.Transport {
                            /**
                             * WebSocket transport constructor.
                             *
                             * @param {Object} opts - connection options
                             * @protected
                             */
                            constructor(opts) {
                                super(opts);
                                this.supportsBinary = !opts.forceBase64;
                            }
                            get name() {
                                return 'websocket';
                            }
                            doOpen() {
                                if (!this.check()) {
                                    // let probe timeout
                                    return;
                                }
                                const uri = this.uri();
                                const protocols = this.opts.protocols;
                                // React Native only supports the 'headers' option, and will print a warning if anything else is passed
                                const opts = isReactNative
                                    ? {}
                                    : (0, util_js_1.pick)(
                                          this.opts,
                                          'agent',
                                          'perMessageDeflate',
                                          'pfx',
                                          'key',
                                          'passphrase',
                                          'cert',
                                          'ca',
                                          'ciphers',
                                          'rejectUnauthorized',
                                          'localAddress',
                                          'protocolVersion',
                                          'origin',
                                          'maxPayload',
                                          'family',
                                          'checkServerIdentity',
                                      );
                                if (this.opts.extraHeaders) {
                                    opts.headers = this.opts.extraHeaders;
                                }
                                try {
                                    this.ws =
                                        websocket_constructor_js_1.usingBrowserWebSocket &&
                                        !isReactNative
                                            ? protocols
                                                ? new websocket_constructor_js_1.WebSocket(
                                                      uri,
                                                      protocols,
                                                  )
                                                : new websocket_constructor_js_1.WebSocket(uri)
                                            : new websocket_constructor_js_1.WebSocket(
                                                  uri,
                                                  protocols,
                                                  opts,
                                              );
                                } catch (err) {
                                    return this.emitReserved('error', err);
                                }
                                this.ws.binaryType = this.socket.binaryType;
                                this.addEventListeners();
                            }
                            /**
                             * Adds event listeners to the socket
                             *
                             * @private
                             */
                            addEventListeners() {
                                this.ws.onopen = () => {
                                    if (this.opts.autoUnref) {
                                        this.ws._socket.unref();
                                    }
                                    this.onOpen();
                                };
                                this.ws.onclose = (closeEvent) =>
                                    this.onClose({
                                        description: 'websocket connection closed',
                                        context: closeEvent,
                                    });
                                this.ws.onmessage = (ev) => this.onData(ev.data);
                                this.ws.onerror = (e) => this.onError('websocket error', e);
                            }
                            write(packets) {
                                this.writable = false;
                                // encodePacket efficient as it uses WS framing
                                // no need for encodePayload
                                for (let i = 0; i < packets.length; i++) {
                                    const packet = packets[i];
                                    const lastPacket = i === packets.length - 1;
                                    (0, engine_io_parser_1.encodePacket)(
                                        packet,
                                        this.supportsBinary,
                                        (data) => {
                                            // always create a new object (GH-437)
                                            const opts = {};
                                            if (!websocket_constructor_js_1.usingBrowserWebSocket) {
                                                if (packet.options) {
                                                    opts.compress = packet.options.compress;
                                                }
                                                if (this.opts.perMessageDeflate) {
                                                    const len =
                                                        // @ts-ignore
                                                        'string' === typeof data
                                                            ? Buffer.byteLength(data)
                                                            : data.length;
                                                    if (
                                                        len < this.opts.perMessageDeflate.threshold
                                                    ) {
                                                        opts.compress = false;
                                                    }
                                                }
                                            }
                                            // Sometimes the websocket has already been closed but the browser didn't
                                            // have a chance of informing us about it yet, in that case send will
                                            // throw an error
                                            try {
                                                if (
                                                    websocket_constructor_js_1.usingBrowserWebSocket
                                                ) {
                                                    // TypeError is thrown when passing the second argument on Safari
                                                    this.ws.send(data);
                                                } else {
                                                    this.ws.send(data, opts);
                                                }
                                            } catch (e) {
                                                debug('websocket closed before onclose event');
                                            }
                                            if (lastPacket) {
                                                // fake drain
                                                // defer to next tick to allow Socket to clear writeBuffer
                                                (0, websocket_constructor_js_1.nextTick)(() => {
                                                    this.writable = true;
                                                    this.emitReserved('drain');
                                                }, this.setTimeoutFn);
                                            }
                                        },
                                    );
                                }
                            }
                            doClose() {
                                if (typeof this.ws !== 'undefined') {
                                    this.ws.close();
                                    this.ws = null;
                                }
                            }
                            /**
                             * Generates uri for connection.
                             *
                             * @private
                             */
                            uri() {
                                const schema = this.opts.secure ? 'wss' : 'ws';
                                const query = this.query || {};
                                // append timestamp to URI
                                if (this.opts.timestampRequests) {
                                    query[this.opts.timestampParam] = (0, yeast_js_1.yeast)();
                                }
                                // communicate binary support capabilities
                                if (!this.supportsBinary) {
                                    query.b64 = 1;
                                }
                                return this.createUri(schema, query);
                            }
                            /**
                             * Feature detection for WebSocket.
                             *
                             * @return {Boolean} whether this transport is available.
                             * @private
                             */
                            check() {
                                return !!websocket_constructor_js_1.WebSocket;
                            }
                        }
                        exports.WS = WS;
                    }).call(this);
                }).call(this, require('buffer').Buffer);
            },
            {
                '../contrib/yeast.js': 13,
                '../transport.js': 17,
                '../util.js': 24,
                './websocket-constructor.js': 20,
                buffer: 6,
                debug: 8,
                'engine.io-parser': 29,
            },
        ],
        22: [
            function (require, module, exports) {
                'use strict';
                var __importDefault =
                    (this && this.__importDefault) ||
                    function (mod) {
                        return mod && mod.__esModule ? mod : { default: mod };
                    };
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.WT = void 0;
                const transport_js_1 = require('../transport.js');
                const websocket_constructor_js_1 = require('./websocket-constructor.js');
                const engine_io_parser_1 = require('engine.io-parser');
                const debug_1 = __importDefault(require('debug')); // debug()
                const debug = (0, debug_1.default)('engine.io-client:webtransport'); // debug()
                class WT extends transport_js_1.Transport {
                    get name() {
                        return 'webtransport';
                    }
                    doOpen() {
                        // @ts-ignore
                        if (typeof WebTransport !== 'function') {
                            return;
                        }
                        // @ts-ignore
                        this.transport = new WebTransport(
                            this.createUri('https'),
                            this.opts.transportOptions[this.name],
                        );
                        this.transport.closed
                            .then(() => {
                                debug('transport closed gracefully');
                                this.onClose();
                            })
                            .catch((err) => {
                                debug('transport closed due to %s', err);
                                this.onError('webtransport error', err);
                            });
                        // note: we could have used async/await, but that would require some additional polyfills
                        this.transport.ready.then(() => {
                            this.transport.createBidirectionalStream().then((stream) => {
                                const decoderStream = (0,
                                engine_io_parser_1.createPacketDecoderStream)(
                                    Number.MAX_SAFE_INTEGER,
                                    this.socket.binaryType,
                                );
                                const reader = stream.readable
                                    .pipeThrough(decoderStream)
                                    .getReader();
                                const encoderStream = (0,
                                engine_io_parser_1.createPacketEncoderStream)();
                                encoderStream.readable.pipeTo(stream.writable);
                                this.writer = encoderStream.writable.getWriter();
                                const read = () => {
                                    reader
                                        .read()
                                        .then(({ done, value }) => {
                                            if (done) {
                                                debug('session is closed');
                                                return;
                                            }
                                            debug('received chunk: %o', value);
                                            this.onPacket(value);
                                            read();
                                        })
                                        .catch((err) => {
                                            debug('an error occurred while reading: %s', err);
                                        });
                                };
                                read();
                                const packet = { type: 'open' };
                                if (this.query.sid) {
                                    packet.data = `{"sid":"${this.query.sid}"}`;
                                }
                                this.writer.write(packet).then(() => this.onOpen());
                            });
                        });
                    }
                    write(packets) {
                        this.writable = false;
                        for (let i = 0; i < packets.length; i++) {
                            const packet = packets[i];
                            const lastPacket = i === packets.length - 1;
                            this.writer.write(packet).then(() => {
                                if (lastPacket) {
                                    (0, websocket_constructor_js_1.nextTick)(() => {
                                        this.writable = true;
                                        this.emitReserved('drain');
                                    }, this.setTimeoutFn);
                                }
                            });
                        }
                    }
                    doClose() {
                        var _a;
                        (_a = this.transport) === null || _a === void 0 ? void 0 : _a.close();
                    }
                }
                exports.WT = WT;
            },
            {
                '../transport.js': 17,
                './websocket-constructor.js': 20,
                debug: 8,
                'engine.io-parser': 29,
            },
        ],
        23: [
            function (require, module, exports) {
                'use strict';
                // browser shim for xmlhttprequest module
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.createCookieJar = exports.XHR = void 0;
                const has_cors_js_1 = require('../contrib/has-cors.js');
                const globalThis_js_1 = require('../globalThis.js');
                function XHR(opts) {
                    const xdomain = opts.xdomain;
                    // XMLHttpRequest can be disabled on IE
                    try {
                        if (
                            'undefined' !== typeof XMLHttpRequest &&
                            (!xdomain || has_cors_js_1.hasCORS)
                        ) {
                            return new XMLHttpRequest();
                        }
                    } catch (e) {}
                    if (!xdomain) {
                        try {
                            return new globalThis_js_1.globalThisShim[
                                ['Active'].concat('Object').join('X')
                            ]('Microsoft.XMLHTTP');
                        } catch (e) {}
                    }
                }
                exports.XHR = XHR;
                function createCookieJar() {}
                exports.createCookieJar = createCookieJar;
            },
            { '../contrib/has-cors.js': 10, '../globalThis.js': 14 },
        ],
        24: [
            function (require, module, exports) {
                'use strict';
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.byteLength = exports.installTimerFunctions = exports.pick = void 0;
                const globalThis_js_1 = require('./globalThis.js');
                function pick(obj, ...attr) {
                    return attr.reduce((acc, k) => {
                        if (obj.hasOwnProperty(k)) {
                            acc[k] = obj[k];
                        }
                        return acc;
                    }, {});
                }
                exports.pick = pick;
                // Keep a reference to the real timeout functions so they can be used when overridden
                const NATIVE_SET_TIMEOUT = globalThis_js_1.globalThisShim.setTimeout;
                const NATIVE_CLEAR_TIMEOUT = globalThis_js_1.globalThisShim.clearTimeout;
                function installTimerFunctions(obj, opts) {
                    if (opts.useNativeTimers) {
                        obj.setTimeoutFn = NATIVE_SET_TIMEOUT.bind(globalThis_js_1.globalThisShim);
                        obj.clearTimeoutFn = NATIVE_CLEAR_TIMEOUT.bind(
                            globalThis_js_1.globalThisShim,
                        );
                    } else {
                        obj.setTimeoutFn = globalThis_js_1.globalThisShim.setTimeout.bind(
                            globalThis_js_1.globalThisShim,
                        );
                        obj.clearTimeoutFn = globalThis_js_1.globalThisShim.clearTimeout.bind(
                            globalThis_js_1.globalThisShim,
                        );
                    }
                }
                exports.installTimerFunctions = installTimerFunctions;
                // base64 encoded buffers are about 33% bigger (https://en.wikipedia.org/wiki/Base64)
                const BASE64_OVERHEAD = 1.33;
                // we could also have used `new Blob([obj]).size`, but it isn't supported in IE9
                function byteLength(obj) {
                    if (typeof obj === 'string') {
                        return utf8Length(obj);
                    }
                    // arraybuffer or blob
                    return Math.ceil((obj.byteLength || obj.size) * BASE64_OVERHEAD);
                }
                exports.byteLength = byteLength;
                function utf8Length(str) {
                    let c = 0,
                        length = 0;
                    for (let i = 0, l = str.length; i < l; i++) {
                        c = str.charCodeAt(i);
                        if (c < 0x80) {
                            length += 1;
                        } else if (c < 0x800) {
                            length += 2;
                        } else if (c < 0xd800 || c >= 0xe000) {
                            length += 3;
                        } else {
                            i++;
                            length += 4;
                        }
                    }
                    return length;
                }
            },
            { './globalThis.js': 14 },
        ],
        25: [
            function (require, module, exports) {
                'use strict';
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.ERROR_PACKET = exports.PACKET_TYPES_REVERSE = exports.PACKET_TYPES = void 0;
                const PACKET_TYPES = Object.create(null); // no Map = no polyfill
                exports.PACKET_TYPES = PACKET_TYPES;
                PACKET_TYPES['open'] = '0';
                PACKET_TYPES['close'] = '1';
                PACKET_TYPES['ping'] = '2';
                PACKET_TYPES['pong'] = '3';
                PACKET_TYPES['message'] = '4';
                PACKET_TYPES['upgrade'] = '5';
                PACKET_TYPES['noop'] = '6';
                const PACKET_TYPES_REVERSE = Object.create(null);
                exports.PACKET_TYPES_REVERSE = PACKET_TYPES_REVERSE;
                Object.keys(PACKET_TYPES).forEach((key) => {
                    PACKET_TYPES_REVERSE[PACKET_TYPES[key]] = key;
                });
                const ERROR_PACKET = { type: 'error', data: 'parser error' };
                exports.ERROR_PACKET = ERROR_PACKET;
            },
            {},
        ],
        26: [
            function (require, module, exports) {
                'use strict';
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.decode = exports.encode = void 0;
                // imported from https://github.com/socketio/base64-arraybuffer
                const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                // Use a lookup table to find the index.
                const lookup = typeof Uint8Array === 'undefined' ? [] : new Uint8Array(256);
                for (let i = 0; i < chars.length; i++) {
                    lookup[chars.charCodeAt(i)] = i;
                }
                const encode = (arraybuffer) => {
                    let bytes = new Uint8Array(arraybuffer),
                        i,
                        len = bytes.length,
                        base64 = '';
                    for (i = 0; i < len; i += 3) {
                        base64 += chars[bytes[i] >> 2];
                        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
                        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
                        base64 += chars[bytes[i + 2] & 63];
                    }
                    if (len % 3 === 2) {
                        base64 = base64.substring(0, base64.length - 1) + '=';
                    } else if (len % 3 === 1) {
                        base64 = base64.substring(0, base64.length - 2) + '==';
                    }
                    return base64;
                };
                exports.encode = encode;
                const decode = (base64) => {
                    let bufferLength = base64.length * 0.75,
                        len = base64.length,
                        i,
                        p = 0,
                        encoded1,
                        encoded2,
                        encoded3,
                        encoded4;
                    if (base64[base64.length - 1] === '=') {
                        bufferLength--;
                        if (base64[base64.length - 2] === '=') {
                            bufferLength--;
                        }
                    }
                    const arraybuffer = new ArrayBuffer(bufferLength),
                        bytes = new Uint8Array(arraybuffer);
                    for (i = 0; i < len; i += 4) {
                        encoded1 = lookup[base64.charCodeAt(i)];
                        encoded2 = lookup[base64.charCodeAt(i + 1)];
                        encoded3 = lookup[base64.charCodeAt(i + 2)];
                        encoded4 = lookup[base64.charCodeAt(i + 3)];
                        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
                        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
                        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
                    }
                    return arraybuffer;
                };
                exports.decode = decode;
            },
            {},
        ],
        27: [
            function (require, module, exports) {
                'use strict';
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.decodePacket = void 0;
                const commons_js_1 = require('./commons.js');
                const base64_arraybuffer_js_1 = require('./contrib/base64-arraybuffer.js');
                const withNativeArrayBuffer = typeof ArrayBuffer === 'function';
                const decodePacket = (encodedPacket, binaryType) => {
                    if (typeof encodedPacket !== 'string') {
                        return {
                            type: 'message',
                            data: mapBinary(encodedPacket, binaryType),
                        };
                    }
                    const type = encodedPacket.charAt(0);
                    if (type === 'b') {
                        return {
                            type: 'message',
                            data: decodeBase64Packet(encodedPacket.substring(1), binaryType),
                        };
                    }
                    const packetType = commons_js_1.PACKET_TYPES_REVERSE[type];
                    if (!packetType) {
                        return commons_js_1.ERROR_PACKET;
                    }
                    return encodedPacket.length > 1
                        ? {
                              type: commons_js_1.PACKET_TYPES_REVERSE[type],
                              data: encodedPacket.substring(1),
                          }
                        : {
                              type: commons_js_1.PACKET_TYPES_REVERSE[type],
                          };
                };
                exports.decodePacket = decodePacket;
                const decodeBase64Packet = (data, binaryType) => {
                    if (withNativeArrayBuffer) {
                        const decoded = (0, base64_arraybuffer_js_1.decode)(data);
                        return mapBinary(decoded, binaryType);
                    } else {
                        return { base64: true, data }; // fallback for old browsers
                    }
                };
                const mapBinary = (data, binaryType) => {
                    switch (binaryType) {
                        case 'blob':
                            if (data instanceof Blob) {
                                // from WebSocket + binaryType "blob"
                                return data;
                            } else {
                                // from HTTP long-polling or WebTransport
                                return new Blob([data]);
                            }
                        case 'arraybuffer':
                        default:
                            if (data instanceof ArrayBuffer) {
                                // from HTTP long-polling (base64) or WebSocket + binaryType "arraybuffer"
                                return data;
                            } else {
                                // from WebTransport (Uint8Array)
                                return data.buffer;
                            }
                    }
                };
            },
            { './commons.js': 25, './contrib/base64-arraybuffer.js': 26 },
        ],
        28: [
            function (require, module, exports) {
                'use strict';
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.encodePacket = exports.encodePacketToBinary = void 0;
                const commons_js_1 = require('./commons.js');
                const withNativeBlob =
                    typeof Blob === 'function' ||
                    (typeof Blob !== 'undefined' &&
                        Object.prototype.toString.call(Blob) === '[object BlobConstructor]');
                const withNativeArrayBuffer = typeof ArrayBuffer === 'function';
                // ArrayBuffer.isView method is not defined in IE10
                const isView = (obj) => {
                    return typeof ArrayBuffer.isView === 'function'
                        ? ArrayBuffer.isView(obj)
                        : obj && obj.buffer instanceof ArrayBuffer;
                };
                const encodePacket = ({ type, data }, supportsBinary, callback) => {
                    if (withNativeBlob && data instanceof Blob) {
                        if (supportsBinary) {
                            return callback(data);
                        } else {
                            return encodeBlobAsBase64(data, callback);
                        }
                    } else if (
                        withNativeArrayBuffer &&
                        (data instanceof ArrayBuffer || isView(data))
                    ) {
                        if (supportsBinary) {
                            return callback(data);
                        } else {
                            return encodeBlobAsBase64(new Blob([data]), callback);
                        }
                    }
                    // plain string
                    return callback(commons_js_1.PACKET_TYPES[type] + (data || ''));
                };
                exports.encodePacket = encodePacket;
                const encodeBlobAsBase64 = (data, callback) => {
                    const fileReader = new FileReader();
                    fileReader.onload = function () {
                        const content = fileReader.result.split(',')[1];
                        callback('b' + (content || ''));
                    };
                    return fileReader.readAsDataURL(data);
                };
                function toArray(data) {
                    if (data instanceof Uint8Array) {
                        return data;
                    } else if (data instanceof ArrayBuffer) {
                        return new Uint8Array(data);
                    } else {
                        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);
                    }
                }
                let TEXT_ENCODER;
                function encodePacketToBinary(packet, callback) {
                    if (withNativeBlob && packet.data instanceof Blob) {
                        return packet.data.arrayBuffer().then(toArray).then(callback);
                    } else if (
                        withNativeArrayBuffer &&
                        (packet.data instanceof ArrayBuffer || isView(packet.data))
                    ) {
                        return callback(toArray(packet.data));
                    }
                    encodePacket(packet, false, (encoded) => {
                        if (!TEXT_ENCODER) {
                            TEXT_ENCODER = new TextEncoder();
                        }
                        callback(TEXT_ENCODER.encode(encoded));
                    });
                }
                exports.encodePacketToBinary = encodePacketToBinary;
            },
            { './commons.js': 25 },
        ],
        29: [
            function (require, module, exports) {
                'use strict';
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.decodePayload =
                    exports.decodePacket =
                    exports.encodePayload =
                    exports.encodePacket =
                    exports.protocol =
                    exports.createPacketDecoderStream =
                    exports.createPacketEncoderStream =
                        void 0;
                const encodePacket_js_1 = require('./encodePacket.js');
                Object.defineProperty(exports, 'encodePacket', {
                    enumerable: true,
                    get: function () {
                        return encodePacket_js_1.encodePacket;
                    },
                });
                const decodePacket_js_1 = require('./decodePacket.js');
                Object.defineProperty(exports, 'decodePacket', {
                    enumerable: true,
                    get: function () {
                        return decodePacket_js_1.decodePacket;
                    },
                });
                const commons_js_1 = require('./commons.js');
                const SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text
                const encodePayload = (packets, callback) => {
                    // some packets may be added to the array while encoding, so the initial length must be saved
                    const length = packets.length;
                    const encodedPackets = new Array(length);
                    let count = 0;
                    packets.forEach((packet, i) => {
                        // force base64 encoding for binary packets
                        (0, encodePacket_js_1.encodePacket)(packet, false, (encodedPacket) => {
                            encodedPackets[i] = encodedPacket;
                            if (++count === length) {
                                callback(encodedPackets.join(SEPARATOR));
                            }
                        });
                    });
                };
                exports.encodePayload = encodePayload;
                const decodePayload = (encodedPayload, binaryType) => {
                    const encodedPackets = encodedPayload.split(SEPARATOR);
                    const packets = [];
                    for (let i = 0; i < encodedPackets.length; i++) {
                        const decodedPacket = (0, decodePacket_js_1.decodePacket)(
                            encodedPackets[i],
                            binaryType,
                        );
                        packets.push(decodedPacket);
                        if (decodedPacket.type === 'error') {
                            break;
                        }
                    }
                    return packets;
                };
                exports.decodePayload = decodePayload;
                function createPacketEncoderStream() {
                    return new TransformStream({
                        transform(packet, controller) {
                            (0, encodePacket_js_1.encodePacketToBinary)(packet, (encodedPacket) => {
                                const payloadLength = encodedPacket.length;
                                let header;
                                // inspired by the WebSocket format: https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#decoding_payload_length
                                if (payloadLength < 126) {
                                    header = new Uint8Array(1);
                                    new DataView(header.buffer).setUint8(0, payloadLength);
                                } else if (payloadLength < 65536) {
                                    header = new Uint8Array(3);
                                    const view = new DataView(header.buffer);
                                    view.setUint8(0, 126);
                                    view.setUint16(1, payloadLength);
                                } else {
                                    header = new Uint8Array(9);
                                    const view = new DataView(header.buffer);
                                    view.setUint8(0, 127);
                                    view.setBigUint64(1, BigInt(payloadLength));
                                }
                                // first bit indicates whether the payload is plain text (0) or binary (1)
                                if (packet.data && typeof packet.data !== 'string') {
                                    header[0] |= 0x80;
                                }
                                controller.enqueue(header);
                                controller.enqueue(encodedPacket);
                            });
                        },
                    });
                }
                exports.createPacketEncoderStream = createPacketEncoderStream;
                let TEXT_DECODER;
                function totalLength(chunks) {
                    return chunks.reduce((acc, chunk) => acc + chunk.length, 0);
                }
                function concatChunks(chunks, size) {
                    if (chunks[0].length === size) {
                        return chunks.shift();
                    }
                    const buffer = new Uint8Array(size);
                    let j = 0;
                    for (let i = 0; i < size; i++) {
                        buffer[i] = chunks[0][j++];
                        if (j === chunks[0].length) {
                            chunks.shift();
                            j = 0;
                        }
                    }
                    if (chunks.length && j < chunks[0].length) {
                        chunks[0] = chunks[0].slice(j);
                    }
                    return buffer;
                }
                function createPacketDecoderStream(maxPayload, binaryType) {
                    if (!TEXT_DECODER) {
                        TEXT_DECODER = new TextDecoder();
                    }
                    const chunks = [];
                    let state = 0; /* READ_HEADER */
                    let expectedLength = -1;
                    let isBinary = false;
                    return new TransformStream({
                        transform(chunk, controller) {
                            chunks.push(chunk);
                            while (true) {
                                if (state === 0 /* READ_HEADER */) {
                                    if (totalLength(chunks) < 1) {
                                        break;
                                    }
                                    const header = concatChunks(chunks, 1);
                                    isBinary = (header[0] & 0x80) === 0x80;
                                    expectedLength = header[0] & 0x7f;
                                    if (expectedLength < 126) {
                                        state = 3 /* READ_PAYLOAD */;
                                    } else if (expectedLength === 126) {
                                        state = 1 /* READ_EXTENDED_LENGTH_16 */;
                                    } else {
                                        state = 2 /* READ_EXTENDED_LENGTH_64 */;
                                    }
                                } else if (state === 1 /* READ_EXTENDED_LENGTH_16 */) {
                                    if (totalLength(chunks) < 2) {
                                        break;
                                    }
                                    const headerArray = concatChunks(chunks, 2);
                                    expectedLength = new DataView(
                                        headerArray.buffer,
                                        headerArray.byteOffset,
                                        headerArray.length,
                                    ).getUint16(0);
                                    state = 3 /* READ_PAYLOAD */;
                                } else if (state === 2 /* READ_EXTENDED_LENGTH_64 */) {
                                    if (totalLength(chunks) < 8) {
                                        break;
                                    }
                                    const headerArray = concatChunks(chunks, 8);
                                    const view = new DataView(
                                        headerArray.buffer,
                                        headerArray.byteOffset,
                                        headerArray.length,
                                    );
                                    const n = view.getUint32(0);
                                    if (n > Math.pow(2, 53 - 32) - 1) {
                                        // the maximum safe integer in JavaScript is 2^53 - 1
                                        controller.enqueue(commons_js_1.ERROR_PACKET);
                                        break;
                                    }
                                    expectedLength = n * Math.pow(2, 32) + view.getUint32(4);
                                    state = 3 /* READ_PAYLOAD */;
                                } else {
                                    if (totalLength(chunks) < expectedLength) {
                                        break;
                                    }
                                    const data = concatChunks(chunks, expectedLength);
                                    controller.enqueue(
                                        (0, decodePacket_js_1.decodePacket)(
                                            isBinary ? data : TEXT_DECODER.decode(data),
                                            binaryType,
                                        ),
                                    );
                                    state = 0 /* READ_HEADER */;
                                }
                                if (expectedLength === 0 || expectedLength > maxPayload) {
                                    controller.enqueue(commons_js_1.ERROR_PACKET);
                                    break;
                                }
                            }
                        },
                    });
                }
                exports.createPacketDecoderStream = createPacketDecoderStream;
                exports.protocol = 4;
            },
            { './commons.js': 25, './decodePacket.js': 27, './encodePacket.js': 28 },
        ],
        30: [
            function (require, module, exports) {
                // Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.

                'use strict';

                var R = typeof Reflect === 'object' ? Reflect : null;
                var ReflectApply =
                    R && typeof R.apply === 'function'
                        ? R.apply
                        : function ReflectApply(target, receiver, args) {
                              return Function.prototype.apply.call(target, receiver, args);
                          };

                var ReflectOwnKeys;
                if (R && typeof R.ownKeys === 'function') {
                    ReflectOwnKeys = R.ownKeys;
                } else if (Object.getOwnPropertySymbols) {
                    ReflectOwnKeys = function ReflectOwnKeys(target) {
                        return Object.getOwnPropertyNames(target).concat(
                            Object.getOwnPropertySymbols(target),
                        );
                    };
                } else {
                    ReflectOwnKeys = function ReflectOwnKeys(target) {
                        return Object.getOwnPropertyNames(target);
                    };
                }

                function ProcessEmitWarning(warning) {
                    if (console && console.warn) console.warn(warning);
                }

                var NumberIsNaN =
                    Number.isNaN ||
                    function NumberIsNaN(value) {
                        return value !== value;
                    };

                function EventEmitter() {
                    EventEmitter.init.call(this);
                }
                module.exports = EventEmitter;
                module.exports.once = once;

                // Backwards-compat with node 0.10.x
                EventEmitter.EventEmitter = EventEmitter;

                EventEmitter.prototype._events = undefined;
                EventEmitter.prototype._eventsCount = 0;
                EventEmitter.prototype._maxListeners = undefined;

                // By default EventEmitters will print a warning if more than 10 listeners are
                // added to it. This is a useful default which helps finding memory leaks.
                var defaultMaxListeners = 10;

                function checkListener(listener) {
                    if (typeof listener !== 'function') {
                        throw new TypeError(
                            'The "listener" argument must be of type Function. Received type ' +
                                typeof listener,
                        );
                    }
                }

                Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
                    enumerable: true,
                    get: function () {
                        return defaultMaxListeners;
                    },
                    set: function (arg) {
                        if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
                            throw new RangeError(
                                'The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' +
                                    arg +
                                    '.',
                            );
                        }
                        defaultMaxListeners = arg;
                    },
                });

                EventEmitter.init = function () {
                    if (
                        this._events === undefined ||
                        this._events === Object.getPrototypeOf(this)._events
                    ) {
                        this._events = Object.create(null);
                        this._eventsCount = 0;
                    }

                    this._maxListeners = this._maxListeners || undefined;
                };

                // Obviously not all Emitters should be limited to 10. This function allows
                // that to be increased. Set to zero for unlimited.
                EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
                    if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
                        throw new RangeError(
                            'The value of "n" is out of range. It must be a non-negative number. Received ' +
                                n +
                                '.',
                        );
                    }
                    this._maxListeners = n;
                    return this;
                };

                function _getMaxListeners(that) {
                    if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
                    return that._maxListeners;
                }

                EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
                    return _getMaxListeners(this);
                };

                EventEmitter.prototype.emit = function emit(type) {
                    var args = [];
                    for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
                    var doError = type === 'error';

                    var events = this._events;
                    if (events !== undefined) doError = doError && events.error === undefined;
                    else if (!doError) return false;

                    // If there is no 'error' event listener then throw.
                    if (doError) {
                        var er;
                        if (args.length > 0) er = args[0];
                        if (er instanceof Error) {
                            // Note: The comments on the `throw` lines are intentional, they show
                            // up in Node's output if this results in an unhandled exception.
                            throw er; // Unhandled 'error' event
                        }
                        // At least give some kind of context to the user
                        var err = new Error(
                            'Unhandled error.' + (er ? ' (' + er.message + ')' : ''),
                        );
                        err.context = er;
                        throw err; // Unhandled 'error' event
                    }

                    var handler = events[type];

                    if (handler === undefined) return false;

                    if (typeof handler === 'function') {
                        ReflectApply(handler, this, args);
                    } else {
                        var len = handler.length;
                        var listeners = arrayClone(handler, len);
                        for (var i = 0; i < len; ++i) ReflectApply(listeners[i], this, args);
                    }

                    return true;
                };

                function _addListener(target, type, listener, prepend) {
                    var m;
                    var events;
                    var existing;

                    checkListener(listener);

                    events = target._events;
                    if (events === undefined) {
                        events = target._events = Object.create(null);
                        target._eventsCount = 0;
                    } else {
                        // To avoid recursion in the case that type === "newListener"! Before
                        // adding it to the listeners, first emit "newListener".
                        if (events.newListener !== undefined) {
                            target.emit(
                                'newListener',
                                type,
                                listener.listener ? listener.listener : listener,
                            );

                            // Re-assign `events` because a newListener handler could have caused the
                            // this._events to be assigned to a new object
                            events = target._events;
                        }
                        existing = events[type];
                    }

                    if (existing === undefined) {
                        // Optimize the case of one listener. Don't need the extra array object.
                        existing = events[type] = listener;
                        ++target._eventsCount;
                    } else {
                        if (typeof existing === 'function') {
                            // Adding the second element, need to change to array.
                            existing = events[type] = prepend
                                ? [listener, existing]
                                : [existing, listener];
                            // If we've already got an array, just append.
                        } else if (prepend) {
                            existing.unshift(listener);
                        } else {
                            existing.push(listener);
                        }

                        // Check for listener leak
                        m = _getMaxListeners(target);
                        if (m > 0 && existing.length > m && !existing.warned) {
                            existing.warned = true;
                            // No error code for this since it is a Warning
                            // eslint-disable-next-line no-restricted-syntax
                            var w = new Error(
                                'Possible EventEmitter memory leak detected. ' +
                                    existing.length +
                                    ' ' +
                                    String(type) +
                                    ' listeners ' +
                                    'added. Use emitter.setMaxListeners() to ' +
                                    'increase limit',
                            );
                            w.name = 'MaxListenersExceededWarning';
                            w.emitter = target;
                            w.type = type;
                            w.count = existing.length;
                            ProcessEmitWarning(w);
                        }
                    }

                    return target;
                }

                EventEmitter.prototype.addListener = function addListener(type, listener) {
                    return _addListener(this, type, listener, false);
                };

                EventEmitter.prototype.on = EventEmitter.prototype.addListener;

                EventEmitter.prototype.prependListener = function prependListener(type, listener) {
                    return _addListener(this, type, listener, true);
                };

                function onceWrapper() {
                    if (!this.fired) {
                        this.target.removeListener(this.type, this.wrapFn);
                        this.fired = true;
                        if (arguments.length === 0) return this.listener.call(this.target);
                        return this.listener.apply(this.target, arguments);
                    }
                }

                function _onceWrap(target, type, listener) {
                    var state = {
                        fired: false,
                        wrapFn: undefined,
                        target: target,
                        type: type,
                        listener: listener,
                    };
                    var wrapped = onceWrapper.bind(state);
                    wrapped.listener = listener;
                    state.wrapFn = wrapped;
                    return wrapped;
                }

                EventEmitter.prototype.once = function once(type, listener) {
                    checkListener(listener);
                    this.on(type, _onceWrap(this, type, listener));
                    return this;
                };

                EventEmitter.prototype.prependOnceListener = function prependOnceListener(
                    type,
                    listener,
                ) {
                    checkListener(listener);
                    this.prependListener(type, _onceWrap(this, type, listener));
                    return this;
                };

                // Emits a 'removeListener' event if and only if the listener was removed.
                EventEmitter.prototype.removeListener = function removeListener(type, listener) {
                    var list, events, position, i, originalListener;

                    checkListener(listener);

                    events = this._events;
                    if (events === undefined) return this;

                    list = events[type];
                    if (list === undefined) return this;

                    if (list === listener || list.listener === listener) {
                        if (--this._eventsCount === 0) this._events = Object.create(null);
                        else {
                            delete events[type];
                            if (events.removeListener)
                                this.emit('removeListener', type, list.listener || listener);
                        }
                    } else if (typeof list !== 'function') {
                        position = -1;

                        for (i = list.length - 1; i >= 0; i--) {
                            if (list[i] === listener || list[i].listener === listener) {
                                originalListener = list[i].listener;
                                position = i;
                                break;
                            }
                        }

                        if (position < 0) return this;

                        if (position === 0) list.shift();
                        else {
                            spliceOne(list, position);
                        }

                        if (list.length === 1) events[type] = list[0];

                        if (events.removeListener !== undefined)
                            this.emit('removeListener', type, originalListener || listener);
                    }

                    return this;
                };

                EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

                EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
                    var listeners, events, i;

                    events = this._events;
                    if (events === undefined) return this;

                    // not listening for removeListener, no need to emit
                    if (events.removeListener === undefined) {
                        if (arguments.length === 0) {
                            this._events = Object.create(null);
                            this._eventsCount = 0;
                        } else if (events[type] !== undefined) {
                            if (--this._eventsCount === 0) this._events = Object.create(null);
                            else delete events[type];
                        }
                        return this;
                    }

                    // emit removeListener for all listeners on all events
                    if (arguments.length === 0) {
                        var keys = Object.keys(events);
                        var key;
                        for (i = 0; i < keys.length; ++i) {
                            key = keys[i];
                            if (key === 'removeListener') continue;
                            this.removeAllListeners(key);
                        }
                        this.removeAllListeners('removeListener');
                        this._events = Object.create(null);
                        this._eventsCount = 0;
                        return this;
                    }

                    listeners = events[type];

                    if (typeof listeners === 'function') {
                        this.removeListener(type, listeners);
                    } else if (listeners !== undefined) {
                        // LIFO order
                        for (i = listeners.length - 1; i >= 0; i--) {
                            this.removeListener(type, listeners[i]);
                        }
                    }

                    return this;
                };

                function _listeners(target, type, unwrap) {
                    var events = target._events;

                    if (events === undefined) return [];

                    var evlistener = events[type];
                    if (evlistener === undefined) return [];

                    if (typeof evlistener === 'function')
                        return unwrap ? [evlistener.listener || evlistener] : [evlistener];

                    return unwrap
                        ? unwrapListeners(evlistener)
                        : arrayClone(evlistener, evlistener.length);
                }

                EventEmitter.prototype.listeners = function listeners(type) {
                    return _listeners(this, type, true);
                };

                EventEmitter.prototype.rawListeners = function rawListeners(type) {
                    return _listeners(this, type, false);
                };

                EventEmitter.listenerCount = function (emitter, type) {
                    if (typeof emitter.listenerCount === 'function') {
                        return emitter.listenerCount(type);
                    } else {
                        return listenerCount.call(emitter, type);
                    }
                };

                EventEmitter.prototype.listenerCount = listenerCount;
                function listenerCount(type) {
                    var events = this._events;

                    if (events !== undefined) {
                        var evlistener = events[type];

                        if (typeof evlistener === 'function') {
                            return 1;
                        } else if (evlistener !== undefined) {
                            return evlistener.length;
                        }
                    }

                    return 0;
                }

                EventEmitter.prototype.eventNames = function eventNames() {
                    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
                };

                function arrayClone(arr, n) {
                    var copy = new Array(n);
                    for (var i = 0; i < n; ++i) copy[i] = arr[i];
                    return copy;
                }

                function spliceOne(list, index) {
                    for (; index + 1 < list.length; index++) list[index] = list[index + 1];
                    list.pop();
                }

                function unwrapListeners(arr) {
                    var ret = new Array(arr.length);
                    for (var i = 0; i < ret.length; ++i) {
                        ret[i] = arr[i].listener || arr[i];
                    }
                    return ret;
                }

                function once(emitter, name) {
                    return new Promise(function (resolve, reject) {
                        function errorListener(err) {
                            emitter.removeListener(name, resolver);
                            reject(err);
                        }

                        function resolver() {
                            if (typeof emitter.removeListener === 'function') {
                                emitter.removeListener('error', errorListener);
                            }
                            resolve([].slice.call(arguments));
                        }

                        eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
                        if (name !== 'error') {
                            addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
                        }
                    });
                }

                function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
                    if (typeof emitter.on === 'function') {
                        eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
                    }
                }

                function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
                    if (typeof emitter.on === 'function') {
                        if (flags.once) {
                            emitter.once(name, listener);
                        } else {
                            emitter.on(name, listener);
                        }
                    } else if (typeof emitter.addEventListener === 'function') {
                        // EventTarget does not have `error` event semantics like Node
                        // EventEmitters, we do not listen for `error` events here.
                        emitter.addEventListener(name, function wrapListener(arg) {
                            // IE does not have builtin `{ once: true }` support so we
                            // have to do it manually.
                            if (flags.once) {
                                emitter.removeEventListener(name, wrapListener);
                            }
                            listener(arg);
                        });
                    } else {
                        throw new TypeError(
                            'The "emitter" argument must be of type EventEmitter. Received type ' +
                                typeof emitter,
                        );
                    }
                }
            },
            {},
        ],
        31: [
            function (require, module, exports) {
                const debug = require('debug')('h264-profile-level-id');

                /* eslint-disable no-console */
                debug.log = console.info.bind(console);
                /* eslint-enable no-console */

                const ProfileConstrainedBaseline = 1;
                const ProfileBaseline = 2;
                const ProfileMain = 3;
                const ProfileConstrainedHigh = 4;
                const ProfileHigh = 5;

                exports.ProfileConstrainedBaseline = ProfileConstrainedBaseline;
                exports.ProfileBaseline = ProfileBaseline;
                exports.ProfileMain = ProfileMain;
                exports.ProfileConstrainedHigh = ProfileConstrainedHigh;
                exports.ProfileHigh = ProfileHigh;

                // All values are equal to ten times the level number, except level 1b which is
                // special.
                const Level1_b = 0;
                const Level1 = 10;
                const Level1_1 = 11;
                const Level1_2 = 12;
                const Level1_3 = 13;
                const Level2 = 20;
                const Level2_1 = 21;
                const Level2_2 = 22;
                const Level3 = 30;
                const Level3_1 = 31;
                const Level3_2 = 32;
                const Level4 = 40;
                const Level4_1 = 41;
                const Level4_2 = 42;
                const Level5 = 50;
                const Level5_1 = 51;
                const Level5_2 = 52;

                exports.Level1_b = Level1_b;
                exports.Level1 = Level1;
                exports.Level1_1 = Level1_1;
                exports.Level1_2 = Level1_2;
                exports.Level1_3 = Level1_3;
                exports.Level2 = Level2;
                exports.Level2_1 = Level2_1;
                exports.Level2_2 = Level2_2;
                exports.Level3 = Level3;
                exports.Level3_1 = Level3_1;
                exports.Level3_2 = Level3_2;
                exports.Level4 = Level4;
                exports.Level4_1 = Level4_1;
                exports.Level4_2 = Level4_2;
                exports.Level5 = Level5;
                exports.Level5_1 = Level5_1;
                exports.Level5_2 = Level5_2;

                class ProfileLevelId {
                    constructor(profile, level) {
                        this.profile = profile;
                        this.level = level;
                    }
                }

                exports.ProfileLevelId = ProfileLevelId;

                // Default ProfileLevelId.
                //
                // TODO: The default should really be profile Baseline and level 1 according to
                // the spec: https://tools.ietf.org/html/rfc6184#section-8.1. In order to not
                // break backwards compatibility with older versions of WebRTC where external
                // codecs don't have any parameters, use profile ConstrainedBaseline level 3_1
                // instead. This workaround will only be done in an interim period to allow
                // external clients to update their code.
                //
                // http://crbug/webrtc/6337.
                const DefaultProfileLevelId = new ProfileLevelId(
                    ProfileConstrainedBaseline,
                    Level3_1,
                );

                // For level_idc=11 and profile_idc=0x42, 0x4D, or 0x58, the constraint set3
                // flag specifies if level 1b or level 1.1 is used.
                const ConstraintSet3Flag = 0x10;

                // Class for matching bit patterns such as "x1xx0000" where 'x' is allowed to be
                // either 0 or 1.
                class BitPattern {
                    constructor(str) {
                        this._mask = ~byteMaskString('x', str);
                        this._maskedValue = byteMaskString('1', str);
                    }

                    isMatch(value) {
                        return this._maskedValue === (value & this._mask);
                    }
                }

                // Class for converting between profile_idc/profile_iop to Profile.
                class ProfilePattern {
                    constructor(profile_idc, profile_iop, profile) {
                        this.profile_idc = profile_idc;
                        this.profile_iop = profile_iop;
                        this.profile = profile;
                    }
                }

                // This is from https://tools.ietf.org/html/rfc6184#section-8.1.
                const ProfilePatterns = [
                    new ProfilePattern(
                        0x42,
                        new BitPattern('x1xx0000'),
                        ProfileConstrainedBaseline,
                    ),
                    new ProfilePattern(
                        0x4d,
                        new BitPattern('1xxx0000'),
                        ProfileConstrainedBaseline,
                    ),
                    new ProfilePattern(
                        0x58,
                        new BitPattern('11xx0000'),
                        ProfileConstrainedBaseline,
                    ),
                    new ProfilePattern(0x42, new BitPattern('x0xx0000'), ProfileBaseline),
                    new ProfilePattern(0x58, new BitPattern('10xx0000'), ProfileBaseline),
                    new ProfilePattern(0x4d, new BitPattern('0x0x0000'), ProfileMain),
                    new ProfilePattern(0x64, new BitPattern('00000000'), ProfileHigh),
                    new ProfilePattern(0x64, new BitPattern('00001100'), ProfileConstrainedHigh),
                ];

                /**
                 * Parse profile level id that is represented as a string of 3 hex bytes.
                 * Nothing will be returned if the string is not a recognized H264 profile
                 * level id.
                 *
                 * @param {String} str - profile-level-id value as a string of 3 hex bytes.
                 *
                 * @returns {ProfileLevelId}
                 */
                exports.parseProfileLevelId = function (str) {
                    // The string should consist of 3 bytes in hexadecimal format.
                    if (typeof str !== 'string' || str.length !== 6) return null;

                    const profile_level_id_numeric = parseInt(str, 16);

                    if (profile_level_id_numeric === 0) return null;

                    // Separate into three bytes.
                    const level_idc = profile_level_id_numeric & 0xff;
                    const profile_iop = (profile_level_id_numeric >> 8) & 0xff;
                    const profile_idc = (profile_level_id_numeric >> 16) & 0xff;

                    // Parse level based on level_idc and constraint set 3 flag.
                    let level;

                    switch (level_idc) {
                        case Level1_1: {
                            level = (profile_iop & ConstraintSet3Flag) !== 0 ? Level1_b : Level1_1;
                            break;
                        }
                        case Level1:
                        case Level1_2:
                        case Level1_3:
                        case Level2:
                        case Level2_1:
                        case Level2_2:
                        case Level3:
                        case Level3_1:
                        case Level3_2:
                        case Level4:
                        case Level4_1:
                        case Level4_2:
                        case Level5:
                        case Level5_1:
                        case Level5_2: {
                            level = level_idc;
                            break;
                        }
                        // Unrecognized level_idc.
                        default: {
                            debug('parseProfileLevelId() | unrecognized level_idc:%s', level_idc);

                            return null;
                        }
                    }

                    // Parse profile_idc/profile_iop into a Profile enum.
                    for (const pattern of ProfilePatterns) {
                        if (
                            profile_idc === pattern.profile_idc &&
                            pattern.profile_iop.isMatch(profile_iop)
                        ) {
                            return new ProfileLevelId(pattern.profile, level);
                        }
                    }

                    debug(
                        'parseProfileLevelId() | unrecognized profile_idc/profile_iop combination',
                    );

                    return null;
                };

                /**
                 * Returns canonical string representation as three hex bytes of the profile
                 * level id, or returns nothing for invalid profile level ids.
                 *
                 * @param {ProfileLevelId} profile_level_id
                 *
                 * @returns {String}
                 */
                exports.profileLevelIdToString = function (profile_level_id) {
                    // Handle special case level == 1b.
                    if (profile_level_id.level == Level1_b) {
                        switch (profile_level_id.profile) {
                            case ProfileConstrainedBaseline: {
                                return '42f00b';
                            }
                            case ProfileBaseline: {
                                return '42100b';
                            }
                            case ProfileMain: {
                                return '4d100b';
                            }
                            // Level 1_b is not allowed for other profiles.
                            default: {
                                debug(
                                    'profileLevelIdToString() | Level 1_b not is allowed for profile:%s',
                                    profile_level_id.profile,
                                );

                                return null;
                            }
                        }
                    }

                    let profile_idc_iop_string;

                    switch (profile_level_id.profile) {
                        case ProfileConstrainedBaseline: {
                            profile_idc_iop_string = '42e0';
                            break;
                        }
                        case ProfileBaseline: {
                            profile_idc_iop_string = '4200';
                            break;
                        }
                        case ProfileMain: {
                            profile_idc_iop_string = '4d00';
                            break;
                        }
                        case ProfileConstrainedHigh: {
                            profile_idc_iop_string = '640c';
                            break;
                        }
                        case ProfileHigh: {
                            profile_idc_iop_string = '6400';
                            break;
                        }
                        default: {
                            debug(
                                'profileLevelIdToString() | unrecognized profile:%s',
                                profile_level_id.profile,
                            );

                            return null;
                        }
                    }

                    let levelStr = profile_level_id.level.toString(16);

                    if (levelStr.length === 1) levelStr = `0${levelStr}`;

                    return `${profile_idc_iop_string}${levelStr}`;
                };

                /**
                 * Parse profile level id that is represented as a string of 3 hex bytes
                 * contained in an SDP key-value map. A default profile level id will be
                 * returned if the profile-level-id key is missing. Nothing will be returned if
                 * the key is present but the string is invalid.
                 *
                 * @param {Object} [params={}] - Codec parameters object.
                 *
                 * @returns {ProfileLevelId}
                 */
                exports.parseSdpProfileLevelId = function (params = {}) {
                    const profile_level_id = params['profile-level-id'];

                    return !profile_level_id
                        ? DefaultProfileLevelId
                        : exports.parseProfileLevelId(profile_level_id);
                };

                /**
                 * Returns true if the parameters have the same H264 profile, i.e. the same
                 * H264 profile (Baseline, High, etc).
                 *
                 * @param {Object} [params1={}] - Codec parameters object.
                 * @param {Object} [params2={}] - Codec parameters object.
                 *
                 * @returns {Boolean}
                 */
                exports.isSameProfile = function (params1 = {}, params2 = {}) {
                    const profile_level_id_1 = exports.parseSdpProfileLevelId(params1);
                    const profile_level_id_2 = exports.parseSdpProfileLevelId(params2);

                    // Compare H264 profiles, but not levels.
                    return Boolean(
                        profile_level_id_1 &&
                            profile_level_id_2 &&
                            profile_level_id_1.profile === profile_level_id_2.profile,
                    );
                };

                /**
                 * Generate codec parameters that will be used as answer in an SDP negotiation
                 * based on local supported parameters and remote offered parameters. Both
                 * local_supported_params and remote_offered_params represent sendrecv media
                 * descriptions, i.e they are a mix of both encode and decode capabilities. In
                 * theory, when the profile in local_supported_params represent a strict superset
                 * of the profile in remote_offered_params, we could limit the profile in the
                 * answer to the profile in remote_offered_params.
                 *
                 * However, to simplify the code, each supported H264 profile should be listed
                 * explicitly in the list of local supported codecs, even if they are redundant.
                 * Then each local codec in the list should be tested one at a time against the
                 * remote codec, and only when the profiles are equal should this function be
                 * called. Therefore, this function does not need to handle profile intersection,
                 * and the profile of local_supported_params and remote_offered_params must be
                 * equal before calling this function. The parameters that are used when
                 * negotiating are the level part of profile-level-id and level-asymmetry-allowed.
                 *
                 * @param {Object} [local_supported_params={}]
                 * @param {Object} [remote_offered_params={}]
                 *
                 * @returns {String} Canonical string representation as three hex bytes of the
                 *   profile level id, or null if no one of the params have profile-level-id.
                 *
                 * @throws {TypeError} If Profile mismatch or invalid params.
                 */
                exports.generateProfileLevelIdForAnswer = function (
                    local_supported_params = {},
                    remote_offered_params = {},
                ) {
                    // If both local and remote params do not contain profile-level-id, they are
                    // both using the default profile. In this case, don't return anything.
                    if (
                        !local_supported_params['profile-level-id'] &&
                        !remote_offered_params['profile-level-id']
                    ) {
                        debug(
                            'generateProfileLevelIdForAnswer() | no profile-level-id in local and remote params',
                        );

                        return null;
                    }

                    // Parse profile-level-ids.
                    const local_profile_level_id =
                        exports.parseSdpProfileLevelId(local_supported_params);
                    const remote_profile_level_id =
                        exports.parseSdpProfileLevelId(remote_offered_params);

                    // The local and remote codec must have valid and equal H264 Profiles.
                    if (!local_profile_level_id)
                        throw new TypeError('invalid local_profile_level_id');

                    if (!remote_profile_level_id)
                        throw new TypeError('invalid remote_profile_level_id');

                    if (local_profile_level_id.profile !== remote_profile_level_id.profile)
                        throw new TypeError('H264 Profile mismatch');

                    // Parse level information.
                    const level_asymmetry_allowed =
                        isLevelAsymmetryAllowed(local_supported_params) &&
                        isLevelAsymmetryAllowed(remote_offered_params);

                    const local_level = local_profile_level_id.level;
                    const remote_level = remote_profile_level_id.level;
                    const min_level = minLevel(local_level, remote_level);

                    // Determine answer level. When level asymmetry is not allowed, level upgrade
                    // is not allowed, i.e., the level in the answer must be equal to or lower
                    // than the level in the offer.
                    const answer_level = level_asymmetry_allowed ? local_level : min_level;

                    debug(
                        'generateProfileLevelIdForAnswer() | result: [profile:%s, level:%s]',
                        local_profile_level_id.profile,
                        answer_level,
                    );

                    // Return the resulting profile-level-id for the answer parameters.
                    return exports.profileLevelIdToString(
                        new ProfileLevelId(local_profile_level_id.profile, answer_level),
                    );
                };

                // Convert a string of 8 characters into a byte where the positions containing
                // character c will have their bit set. For example, c = 'x', str = "x1xx0000"
                // will return 0b10110000.
                function byteMaskString(c, str) {
                    return (
                        ((str[0] === c) << 7) |
                        ((str[1] === c) << 6) |
                        ((str[2] === c) << 5) |
                        ((str[3] === c) << 4) |
                        ((str[4] === c) << 3) |
                        ((str[5] === c) << 2) |
                        ((str[6] === c) << 1) |
                        ((str[7] === c) << 0)
                    );
                }

                // Compare H264 levels and handle the level 1b case.
                function isLessLevel(a, b) {
                    if (a === Level1_b) return b !== Level1 && b !== Level1_b;

                    if (b === Level1_b) return a !== Level1;

                    return a < b;
                }

                function minLevel(a, b) {
                    return isLessLevel(a, b) ? a : b;
                }

                function isLevelAsymmetryAllowed(params = {}) {
                    const level_asymmetry_allowed = params['level-asymmetry-allowed'];

                    return level_asymmetry_allowed === 1 || level_asymmetry_allowed === '1';
                }
            },
            { debug: 8 },
        ],
        32: [
            function (require, module, exports) {
                /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
                exports.read = function (buffer, offset, isLE, mLen, nBytes) {
                    var e, m;
                    var eLen = nBytes * 8 - mLen - 1;
                    var eMax = (1 << eLen) - 1;
                    var eBias = eMax >> 1;
                    var nBits = -7;
                    var i = isLE ? nBytes - 1 : 0;
                    var d = isLE ? -1 : 1;
                    var s = buffer[offset + i];

                    i += d;

                    e = s & ((1 << -nBits) - 1);
                    s >>= -nBits;
                    nBits += eLen;
                    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

                    m = e & ((1 << -nBits) - 1);
                    e >>= -nBits;
                    nBits += mLen;
                    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

                    if (e === 0) {
                        e = 1 - eBias;
                    } else if (e === eMax) {
                        return m ? NaN : (s ? -1 : 1) * Infinity;
                    } else {
                        m = m + Math.pow(2, mLen);
                        e = e - eBias;
                    }
                    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
                };

                exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
                    var e, m, c;
                    var eLen = nBytes * 8 - mLen - 1;
                    var eMax = (1 << eLen) - 1;
                    var eBias = eMax >> 1;
                    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
                    var i = isLE ? 0 : nBytes - 1;
                    var d = isLE ? 1 : -1;
                    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

                    value = Math.abs(value);

                    if (isNaN(value) || value === Infinity) {
                        m = isNaN(value) ? 1 : 0;
                        e = eMax;
                    } else {
                        e = Math.floor(Math.log(value) / Math.LN2);
                        if (value * (c = Math.pow(2, -e)) < 1) {
                            e--;
                            c *= 2;
                        }
                        if (e + eBias >= 1) {
                            value += rt / c;
                        } else {
                            value += rt * Math.pow(2, 1 - eBias);
                        }
                        if (value * c >= 2) {
                            e++;
                            c /= 2;
                        }

                        if (e + eBias >= eMax) {
                            m = 0;
                            e = eMax;
                        } else if (e + eBias >= 1) {
                            m = (value * c - 1) * Math.pow(2, mLen);
                            e = e + eBias;
                        } else {
                            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                            e = 0;
                        }
                    }

                    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

                    e = (e << mLen) | m;
                    eLen += mLen;
                    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

                    buffer[offset + i - d] |= s * 128;
                };
            },
            {},
        ],
        33: [
            function (require, module, exports) {
                /*!
                 * jQuery JavaScript Library v3.7.1
                 * https://jquery.com/
                 *
                 * Copyright OpenJS Foundation and other contributors
                 * Released under the MIT license
                 * https://jquery.org/license
                 *
                 * Date: 2023-08-28T13:37Z
                 */
                (function (global, factory) {
                    'use strict';

                    if (typeof module === 'object' && typeof module.exports === 'object') {
                        // For CommonJS and CommonJS-like environments where a proper `window`
                        // is present, execute the factory and get jQuery.
                        // For environments that do not have a `window` with a `document`
                        // (such as Node.js), expose a factory as module.exports.
                        // This accentuates the need for the creation of a real `window`.
                        // e.g. var jQuery = require("jquery")(window);
                        // See ticket trac-14549 for more info.
                        module.exports = global.document
                            ? factory(global, true)
                            : function (w) {
                                  if (!w.document) {
                                      throw new Error('jQuery requires a window with a document');
                                  }
                                  return factory(w);
                              };
                    } else {
                        factory(global);
                    }

                    // Pass this if window is not defined yet
                })(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {
                    // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
                    // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
                    // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
                    // enough that all such attempts are guarded in a try block.
                    'use strict';

                    var arr = [];

                    var getProto = Object.getPrototypeOf;

                    var slice = arr.slice;

                    var flat = arr.flat
                        ? function (array) {
                              return arr.flat.call(array);
                          }
                        : function (array) {
                              return arr.concat.apply([], array);
                          };

                    var push = arr.push;

                    var indexOf = arr.indexOf;

                    var class2type = {};

                    var toString = class2type.toString;

                    var hasOwn = class2type.hasOwnProperty;

                    var fnToString = hasOwn.toString;

                    var ObjectFunctionString = fnToString.call(Object);

                    var support = {};

                    var isFunction = function isFunction(obj) {
                        // Support: Chrome <=57, Firefox <=52
                        // In some browsers, typeof returns "function" for HTML <object> elements
                        // (i.e., `typeof document.createElement( "object" ) === "function"`).
                        // We don't want to classify *any* DOM node as a function.
                        // Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
                        // Plus for old WebKit, typeof returns "function" for HTML collections
                        // (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
                        return (
                            typeof obj === 'function' &&
                            typeof obj.nodeType !== 'number' &&
                            typeof obj.item !== 'function'
                        );
                    };

                    var isWindow = function isWindow(obj) {
                        return obj != null && obj === obj.window;
                    };

                    var document = window.document;

                    var preservedScriptAttributes = {
                        type: true,
                        src: true,
                        nonce: true,
                        noModule: true,
                    };

                    function DOMEval(code, node, doc) {
                        doc = doc || document;

                        var i,
                            val,
                            script = doc.createElement('script');

                        script.text = code;
                        if (node) {
                            for (i in preservedScriptAttributes) {
                                // Support: Firefox 64+, Edge 18+
                                // Some browsers don't support the "nonce" property on scripts.
                                // On the other hand, just using `getAttribute` is not enough as
                                // the `nonce` attribute is reset to an empty string whenever it
                                // becomes browsing-context connected.
                                // See https://github.com/whatwg/html/issues/2369
                                // See https://html.spec.whatwg.org/#nonce-attributes
                                // The `node.getAttribute` check was added for the sake of
                                // `jQuery.globalEval` so that it can fake a nonce-containing node
                                // via an object.
                                val = node[i] || (node.getAttribute && node.getAttribute(i));
                                if (val) {
                                    script.setAttribute(i, val);
                                }
                            }
                        }
                        doc.head.appendChild(script).parentNode.removeChild(script);
                    }

                    function toType(obj) {
                        if (obj == null) {
                            return obj + '';
                        }

                        // Support: Android <=2.3 only (functionish RegExp)
                        return typeof obj === 'object' || typeof obj === 'function'
                            ? class2type[toString.call(obj)] || 'object'
                            : typeof obj;
                    }
                    /* global Symbol */
                    // Defining this global in .eslintrc.json would create a danger of using the global
                    // unguarded in another place, it seems safer to define global only for this module

                    var version = '3.7.1',
                        rhtmlSuffix = /HTML$/i,
                        // Define a local copy of jQuery
                        jQuery = function (selector, context) {
                            // The jQuery object is actually just the init constructor 'enhanced'
                            // Need init if jQuery is called (just allow error to be thrown if not included)
                            return new jQuery.fn.init(selector, context);
                        };

                    jQuery.fn = jQuery.prototype = {
                        // The current version of jQuery being used
                        jquery: version,

                        constructor: jQuery,

                        // The default length of a jQuery object is 0
                        length: 0,

                        toArray: function () {
                            return slice.call(this);
                        },

                        // Get the Nth element in the matched element set OR
                        // Get the whole matched element set as a clean array
                        get: function (num) {
                            // Return all the elements in a clean array
                            if (num == null) {
                                return slice.call(this);
                            }

                            // Return just the one element from the set
                            return num < 0 ? this[num + this.length] : this[num];
                        },

                        // Take an array of elements and push it onto the stack
                        // (returning the new matched element set)
                        pushStack: function (elems) {
                            // Build a new jQuery matched element set
                            var ret = jQuery.merge(this.constructor(), elems);

                            // Add the old object onto the stack (as a reference)
                            ret.prevObject = this;

                            // Return the newly-formed element set
                            return ret;
                        },

                        // Execute a callback for every element in the matched set.
                        each: function (callback) {
                            return jQuery.each(this, callback);
                        },

                        map: function (callback) {
                            return this.pushStack(
                                jQuery.map(this, function (elem, i) {
                                    return callback.call(elem, i, elem);
                                }),
                            );
                        },

                        slice: function () {
                            return this.pushStack(slice.apply(this, arguments));
                        },

                        first: function () {
                            return this.eq(0);
                        },

                        last: function () {
                            return this.eq(-1);
                        },

                        even: function () {
                            return this.pushStack(
                                jQuery.grep(this, function (_elem, i) {
                                    return (i + 1) % 2;
                                }),
                            );
                        },

                        odd: function () {
                            return this.pushStack(
                                jQuery.grep(this, function (_elem, i) {
                                    return i % 2;
                                }),
                            );
                        },

                        eq: function (i) {
                            var len = this.length,
                                j = +i + (i < 0 ? len : 0);
                            return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
                        },

                        end: function () {
                            return this.prevObject || this.constructor();
                        },

                        // For internal use only.
                        // Behaves like an Array's method, not like a jQuery method.
                        push: push,
                        sort: arr.sort,
                        splice: arr.splice,
                    };

                    jQuery.extend = jQuery.fn.extend = function () {
                        var options,
                            name,
                            src,
                            copy,
                            copyIsArray,
                            clone,
                            target = arguments[0] || {},
                            i = 1,
                            length = arguments.length,
                            deep = false;

                        // Handle a deep copy situation
                        if (typeof target === 'boolean') {
                            deep = target;

                            // Skip the boolean and the target
                            target = arguments[i] || {};
                            i++;
                        }

                        // Handle case when target is a string or something (possible in deep copy)
                        if (typeof target !== 'object' && !isFunction(target)) {
                            target = {};
                        }

                        // Extend jQuery itself if only one argument is passed
                        if (i === length) {
                            target = this;
                            i--;
                        }

                        for (; i < length; i++) {
                            // Only deal with non-null/undefined values
                            if ((options = arguments[i]) != null) {
                                // Extend the base object
                                for (name in options) {
                                    copy = options[name];

                                    // Prevent Object.prototype pollution
                                    // Prevent never-ending loop
                                    if (name === '__proto__' || target === copy) {
                                        continue;
                                    }

                                    // Recurse if we're merging plain objects or arrays
                                    if (
                                        deep &&
                                        copy &&
                                        (jQuery.isPlainObject(copy) ||
                                            (copyIsArray = Array.isArray(copy)))
                                    ) {
                                        src = target[name];

                                        // Ensure proper type for the source value
                                        if (copyIsArray && !Array.isArray(src)) {
                                            clone = [];
                                        } else if (!copyIsArray && !jQuery.isPlainObject(src)) {
                                            clone = {};
                                        } else {
                                            clone = src;
                                        }
                                        copyIsArray = false;

                                        // Never move original objects, clone them
                                        target[name] = jQuery.extend(deep, clone, copy);

                                        // Don't bring in undefined values
                                    } else if (copy !== undefined) {
                                        target[name] = copy;
                                    }
                                }
                            }
                        }

                        // Return the modified object
                        return target;
                    };

                    jQuery.extend({
                        // Unique for each copy of jQuery on the page
                        expando: 'jQuery' + (version + Math.random()).replace(/\D/g, ''),

                        // Assume jQuery is ready without the ready module
                        isReady: true,

                        error: function (msg) {
                            throw new Error(msg);
                        },

                        noop: function () {},

                        isPlainObject: function (obj) {
                            var proto, Ctor;

                            // Detect obvious negatives
                            // Use toString instead of jQuery.type to catch host objects
                            if (!obj || toString.call(obj) !== '[object Object]') {
                                return false;
                            }

                            proto = getProto(obj);

                            // Objects with no prototype (e.g., `Object.create( null )`) are plain
                            if (!proto) {
                                return true;
                            }

                            // Objects with prototype are plain iff they were constructed by a global Object function
                            Ctor = hasOwn.call(proto, 'constructor') && proto.constructor;
                            return (
                                typeof Ctor === 'function' &&
                                fnToString.call(Ctor) === ObjectFunctionString
                            );
                        },

                        isEmptyObject: function (obj) {
                            var name;

                            for (name in obj) {
                                return false;
                            }
                            return true;
                        },

                        // Evaluates a script in a provided context; falls back to the global one
                        // if not specified.
                        globalEval: function (code, options, doc) {
                            DOMEval(code, { nonce: options && options.nonce }, doc);
                        },

                        each: function (obj, callback) {
                            var length,
                                i = 0;

                            if (isArrayLike(obj)) {
                                length = obj.length;
                                for (; i < length; i++) {
                                    if (callback.call(obj[i], i, obj[i]) === false) {
                                        break;
                                    }
                                }
                            } else {
                                for (i in obj) {
                                    if (callback.call(obj[i], i, obj[i]) === false) {
                                        break;
                                    }
                                }
                            }

                            return obj;
                        },

                        // Retrieve the text value of an array of DOM nodes
                        text: function (elem) {
                            var node,
                                ret = '',
                                i = 0,
                                nodeType = elem.nodeType;

                            if (!nodeType) {
                                // If no nodeType, this is expected to be an array
                                while ((node = elem[i++])) {
                                    // Do not traverse comment nodes
                                    ret += jQuery.text(node);
                                }
                            }
                            if (nodeType === 1 || nodeType === 11) {
                                return elem.textContent;
                            }
                            if (nodeType === 9) {
                                return elem.documentElement.textContent;
                            }
                            if (nodeType === 3 || nodeType === 4) {
                                return elem.nodeValue;
                            }

                            // Do not include comment or processing instruction nodes

                            return ret;
                        },

                        // results is for internal usage only
                        makeArray: function (arr, results) {
                            var ret = results || [];

                            if (arr != null) {
                                if (isArrayLike(Object(arr))) {
                                    jQuery.merge(ret, typeof arr === 'string' ? [arr] : arr);
                                } else {
                                    push.call(ret, arr);
                                }
                            }

                            return ret;
                        },

                        inArray: function (elem, arr, i) {
                            return arr == null ? -1 : indexOf.call(arr, elem, i);
                        },

                        isXMLDoc: function (elem) {
                            var namespace = elem && elem.namespaceURI,
                                docElem = elem && (elem.ownerDocument || elem).documentElement;

                            // Assume HTML when documentElement doesn't yet exist, such as inside
                            // document fragments.
                            return !rhtmlSuffix.test(
                                namespace || (docElem && docElem.nodeName) || 'HTML',
                            );
                        },

                        // Support: Android <=4.0 only, PhantomJS 1 only
                        // push.apply(_, arraylike) throws on ancient WebKit
                        merge: function (first, second) {
                            var len = +second.length,
                                j = 0,
                                i = first.length;

                            for (; j < len; j++) {
                                first[i++] = second[j];
                            }

                            first.length = i;

                            return first;
                        },

                        grep: function (elems, callback, invert) {
                            var callbackInverse,
                                matches = [],
                                i = 0,
                                length = elems.length,
                                callbackExpect = !invert;

                            // Go through the array, only saving the items
                            // that pass the validator function
                            for (; i < length; i++) {
                                callbackInverse = !callback(elems[i], i);
                                if (callbackInverse !== callbackExpect) {
                                    matches.push(elems[i]);
                                }
                            }

                            return matches;
                        },

                        // arg is for internal usage only
                        map: function (elems, callback, arg) {
                            var length,
                                value,
                                i = 0,
                                ret = [];

                            // Go through the array, translating each of the items to their new values
                            if (isArrayLike(elems)) {
                                length = elems.length;
                                for (; i < length; i++) {
                                    value = callback(elems[i], i, arg);

                                    if (value != null) {
                                        ret.push(value);
                                    }
                                }

                                // Go through every key on the object,
                            } else {
                                for (i in elems) {
                                    value = callback(elems[i], i, arg);

                                    if (value != null) {
                                        ret.push(value);
                                    }
                                }
                            }

                            // Flatten any nested arrays
                            return flat(ret);
                        },

                        // A global GUID counter for objects
                        guid: 1,

                        // jQuery.support is not used in Core but other projects attach their
                        // properties to it so it needs to exist.
                        support: support,
                    });

                    if (typeof Symbol === 'function') {
                        jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
                    }

                    // Populate the class2type map
                    jQuery.each(
                        'Boolean Number String Function Array Date RegExp Object Error Symbol'.split(
                            ' ',
                        ),
                        function (_i, name) {
                            class2type['[object ' + name + ']'] = name.toLowerCase();
                        },
                    );

                    function isArrayLike(obj) {
                        // Support: real iOS 8.2 only (not reproducible in simulator)
                        // `in` check used to prevent JIT error (gh-2145)
                        // hasOwn isn't used here due to false negatives
                        // regarding Nodelist length in IE
                        var length = !!obj && 'length' in obj && obj.length,
                            type = toType(obj);

                        if (isFunction(obj) || isWindow(obj)) {
                            return false;
                        }

                        return (
                            type === 'array' ||
                            length === 0 ||
                            (typeof length === 'number' && length > 0 && length - 1 in obj)
                        );
                    }

                    function nodeName(elem, name) {
                        return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
                    }
                    var pop = arr.pop;

                    var sort = arr.sort;

                    var splice = arr.splice;

                    var whitespace = '[\\x20\\t\\r\\n\\f]';

                    var rtrimCSS = new RegExp(
                        '^' + whitespace + '+|((?:^|[^\\\\])(?:\\\\.)*)' + whitespace + '+$',
                        'g',
                    );

                    // Note: an element does not contain itself
                    jQuery.contains = function (a, b) {
                        var bup = b && b.parentNode;

                        return (
                            a === bup ||
                            !!(
                                bup &&
                                bup.nodeType === 1 &&
                                // Support: IE 9 - 11+
                                // IE doesn't have `contains` on SVG.
                                (a.contains
                                    ? a.contains(bup)
                                    : a.compareDocumentPosition &&
                                      a.compareDocumentPosition(bup) & 16)
                            )
                        );
                    };

                    // CSS string/identifier serialization
                    // https://drafts.csswg.org/cssom/#common-serializing-idioms
                    var rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;

                    function fcssescape(ch, asCodePoint) {
                        if (asCodePoint) {
                            // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
                            if (ch === '\0') {
                                return '\uFFFD';
                            }

                            // Control characters and (dependent upon position) numbers get escaped as code points
                            return (
                                ch.slice(0, -1) +
                                '\\' +
                                ch.charCodeAt(ch.length - 1).toString(16) +
                                ' '
                            );
                        }

                        // Other potentially-special ASCII characters get backslash-escaped
                        return '\\' + ch;
                    }

                    jQuery.escapeSelector = function (sel) {
                        return (sel + '').replace(rcssescape, fcssescape);
                    };

                    var preferredDoc = document,
                        pushNative = push;

                    (function () {
                        var i,
                            Expr,
                            outermostContext,
                            sortInput,
                            hasDuplicate,
                            push = pushNative,
                            // Local document vars
                            document,
                            documentElement,
                            documentIsHTML,
                            rbuggyQSA,
                            matches,
                            // Instance-specific data
                            expando = jQuery.expando,
                            dirruns = 0,
                            done = 0,
                            classCache = createCache(),
                            tokenCache = createCache(),
                            compilerCache = createCache(),
                            nonnativeSelectorCache = createCache(),
                            sortOrder = function (a, b) {
                                if (a === b) {
                                    hasDuplicate = true;
                                }
                                return 0;
                            },
                            booleans =
                                'checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|' +
                                'loop|multiple|open|readonly|required|scoped',
                            // Regular expressions

                            // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
                            identifier =
                                '(?:\\\\[\\da-fA-F]{1,6}' +
                                whitespace +
                                '?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+',
                            // Attribute selectors: https://www.w3.org/TR/selectors/#attribute-selectors
                            attributes =
                                '\\[' +
                                whitespace +
                                '*(' +
                                identifier +
                                ')(?:' +
                                whitespace +
                                // Operator (capture 2)
                                '*([*^$|!~]?=)' +
                                whitespace +
                                // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
                                '*(?:\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)"|(' +
                                identifier +
                                '))|)' +
                                whitespace +
                                '*\\]',
                            pseudos =
                                ':(' +
                                identifier +
                                ')(?:\\((' +
                                // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
                                // 1. quoted (capture 3; capture 4 or capture 5)
                                '(\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)")|' +
                                // 2. simple (capture 6)
                                '((?:\\\\.|[^\\\\()[\\]]|' +
                                attributes +
                                ')*)|' +
                                // 3. anything else (capture 2)
                                '.*' +
                                ')\\)|)',
                            // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
                            rwhitespace = new RegExp(whitespace + '+', 'g'),
                            rcomma = new RegExp('^' + whitespace + '*,' + whitespace + '*'),
                            rleadingCombinator = new RegExp(
                                '^' + whitespace + '*([>+~]|' + whitespace + ')' + whitespace + '*',
                            ),
                            rdescend = new RegExp(whitespace + '|>'),
                            rpseudo = new RegExp(pseudos),
                            ridentifier = new RegExp('^' + identifier + '$'),
                            matchExpr = {
                                ID: new RegExp('^#(' + identifier + ')'),
                                CLASS: new RegExp('^\\.(' + identifier + ')'),
                                TAG: new RegExp('^(' + identifier + '|[*])'),
                                ATTR: new RegExp('^' + attributes),
                                PSEUDO: new RegExp('^' + pseudos),
                                CHILD: new RegExp(
                                    '^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(' +
                                        whitespace +
                                        '*(even|odd|(([+-]|)(\\d*)n|)' +
                                        whitespace +
                                        '*(?:([+-]|)' +
                                        whitespace +
                                        '*(\\d+)|))' +
                                        whitespace +
                                        '*\\)|)',
                                    'i',
                                ),
                                bool: new RegExp('^(?:' + booleans + ')$', 'i'),

                                // For use in libraries implementing .is()
                                // We use this for POS matching in `select`
                                needsContext: new RegExp(
                                    '^' +
                                        whitespace +
                                        '*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(' +
                                        whitespace +
                                        '*((?:-\\d)?\\d*)' +
                                        whitespace +
                                        '*\\)|)(?=[^-]|$)',
                                    'i',
                                ),
                            },
                            rinputs = /^(?:input|select|textarea|button)$/i,
                            rheader = /^h\d$/i,
                            // Easily-parseable/retrievable ID or TAG or CLASS selectors
                            rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
                            rsibling = /[+~]/,
                            // CSS escapes
                            // https://www.w3.org/TR/CSS21/syndata.html#escaped-characters
                            runescape = new RegExp(
                                '\\\\[\\da-fA-F]{1,6}' + whitespace + '?|\\\\([^\\r\\n\\f])',
                                'g',
                            ),
                            funescape = function (escape, nonHex) {
                                var high = '0x' + escape.slice(1) - 0x10000;

                                if (nonHex) {
                                    // Strip the backslash prefix from a non-hex escape sequence
                                    return nonHex;
                                }

                                // Replace a hexadecimal escape sequence with the encoded Unicode code point
                                // Support: IE <=11+
                                // For values outside the Basic Multilingual Plane (BMP), manually construct a
                                // surrogate pair
                                return high < 0
                                    ? String.fromCharCode(high + 0x10000)
                                    : String.fromCharCode(
                                          (high >> 10) | 0xd800,
                                          (high & 0x3ff) | 0xdc00,
                                      );
                            },
                            // Used for iframes; see `setDocument`.
                            // Support: IE 9 - 11+, Edge 12 - 18+
                            // Removing the function wrapper causes a "Permission Denied"
                            // error in IE/Edge.
                            unloadHandler = function () {
                                setDocument();
                            },
                            inDisabledFieldset = addCombinator(
                                function (elem) {
                                    return elem.disabled === true && nodeName(elem, 'fieldset');
                                },
                                { dir: 'parentNode', next: 'legend' },
                            );

                        // Support: IE <=9 only
                        // Accessing document.activeElement can throw unexpectedly
                        // https://bugs.jquery.com/ticket/13393
                        function safeActiveElement() {
                            try {
                                return document.activeElement;
                            } catch (err) {}
                        }

                        // Optimize for push.apply( _, NodeList )
                        try {
                            push.apply(
                                (arr = slice.call(preferredDoc.childNodes)),
                                preferredDoc.childNodes,
                            );

                            // Support: Android <=4.0
                            // Detect silently failing push.apply
                            // eslint-disable-next-line no-unused-expressions
                            arr[preferredDoc.childNodes.length].nodeType;
                        } catch (e) {
                            push = {
                                apply: function (target, els) {
                                    pushNative.apply(target, slice.call(els));
                                },
                                call: function (target) {
                                    pushNative.apply(target, slice.call(arguments, 1));
                                },
                            };
                        }

                        function find(selector, context, results, seed) {
                            var m,
                                i,
                                elem,
                                nid,
                                match,
                                groups,
                                newSelector,
                                newContext = context && context.ownerDocument,
                                // nodeType defaults to 9, since context defaults to document
                                nodeType = context ? context.nodeType : 9;

                            results = results || [];

                            // Return early from calls with invalid selector or context
                            if (
                                typeof selector !== 'string' ||
                                !selector ||
                                (nodeType !== 1 && nodeType !== 9 && nodeType !== 11)
                            ) {
                                return results;
                            }

                            // Try to shortcut find operations (as opposed to filters) in HTML documents
                            if (!seed) {
                                setDocument(context);
                                context = context || document;

                                if (documentIsHTML) {
                                    // If the selector is sufficiently simple, try using a "get*By*" DOM method
                                    // (excepting DocumentFragment context, where the methods don't exist)
                                    if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
                                        // ID selector
                                        if ((m = match[1])) {
                                            // Document context
                                            if (nodeType === 9) {
                                                if ((elem = context.getElementById(m))) {
                                                    // Support: IE 9 only
                                                    // getElementById can match elements by name instead of ID
                                                    if (elem.id === m) {
                                                        push.call(results, elem);
                                                        return results;
                                                    }
                                                } else {
                                                    return results;
                                                }

                                                // Element context
                                            } else {
                                                // Support: IE 9 only
                                                // getElementById can match elements by name instead of ID
                                                if (
                                                    newContext &&
                                                    (elem = newContext.getElementById(m)) &&
                                                    find.contains(context, elem) &&
                                                    elem.id === m
                                                ) {
                                                    push.call(results, elem);
                                                    return results;
                                                }
                                            }

                                            // Type selector
                                        } else if (match[2]) {
                                            push.apply(
                                                results,
                                                context.getElementsByTagName(selector),
                                            );
                                            return results;

                                            // Class selector
                                        } else if (
                                            (m = match[3]) &&
                                            context.getElementsByClassName
                                        ) {
                                            push.apply(results, context.getElementsByClassName(m));
                                            return results;
                                        }
                                    }

                                    // Take advantage of querySelectorAll
                                    if (
                                        !nonnativeSelectorCache[selector + ' '] &&
                                        (!rbuggyQSA || !rbuggyQSA.test(selector))
                                    ) {
                                        newSelector = selector;
                                        newContext = context;

                                        // qSA considers elements outside a scoping root when evaluating child or
                                        // descendant combinators, which is not what we want.
                                        // In such cases, we work around the behavior by prefixing every selector in the
                                        // list with an ID selector referencing the scope context.
                                        // The technique has to be used as well when a leading combinator is used
                                        // as such selectors are not recognized by querySelectorAll.
                                        // Thanks to Andrew Dupont for this technique.
                                        if (
                                            nodeType === 1 &&
                                            (rdescend.test(selector) ||
                                                rleadingCombinator.test(selector))
                                        ) {
                                            // Expand context for sibling selectors
                                            newContext =
                                                (rsibling.test(selector) &&
                                                    testContext(context.parentNode)) ||
                                                context;

                                            // We can use :scope instead of the ID hack if the browser
                                            // supports it & if we're not changing the context.
                                            // Support: IE 11+, Edge 17 - 18+
                                            // IE/Edge sometimes throw a "Permission denied" error when
                                            // strict-comparing two documents; shallow comparisons work.
                                            // eslint-disable-next-line eqeqeq
                                            if (newContext != context || !support.scope) {
                                                // Capture the context ID, setting it first if necessary
                                                if ((nid = context.getAttribute('id'))) {
                                                    nid = jQuery.escapeSelector(nid);
                                                } else {
                                                    context.setAttribute('id', (nid = expando));
                                                }
                                            }

                                            // Prefix every selector in the list
                                            groups = tokenize(selector);
                                            i = groups.length;
                                            while (i--) {
                                                groups[i] =
                                                    (nid ? '#' + nid : ':scope') +
                                                    ' ' +
                                                    toSelector(groups[i]);
                                            }
                                            newSelector = groups.join(',');
                                        }

                                        try {
                                            push.apply(
                                                results,
                                                newContext.querySelectorAll(newSelector),
                                            );
                                            return results;
                                        } catch (qsaError) {
                                            nonnativeSelectorCache(selector, true);
                                        } finally {
                                            if (nid === expando) {
                                                context.removeAttribute('id');
                                            }
                                        }
                                    }
                                }
                            }

                            // All others
                            return select(selector.replace(rtrimCSS, '$1'), context, results, seed);
                        }

                        /**
                         * Create key-value caches of limited size
                         * @returns {function(string, object)} Returns the Object data after storing it on itself with
                         *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
                         *	deleting the oldest entry
                         */
                        function createCache() {
                            var keys = [];

                            function cache(key, value) {
                                // Use (key + " ") to avoid collision with native prototype properties
                                // (see https://github.com/jquery/sizzle/issues/157)
                                if (keys.push(key + ' ') > Expr.cacheLength) {
                                    // Only keep the most recent entries
                                    delete cache[keys.shift()];
                                }
                                return (cache[key + ' '] = value);
                            }
                            return cache;
                        }

                        /**
                         * Mark a function for special use by jQuery selector module
                         * @param {Function} fn The function to mark
                         */
                        function markFunction(fn) {
                            fn[expando] = true;
                            return fn;
                        }

                        /**
                         * Support testing using an element
                         * @param {Function} fn Passed the created element and returns a boolean result
                         */
                        function assert(fn) {
                            var el = document.createElement('fieldset');

                            try {
                                return !!fn(el);
                            } catch (e) {
                                return false;
                            } finally {
                                // Remove from its parent by default
                                if (el.parentNode) {
                                    el.parentNode.removeChild(el);
                                }

                                // release memory in IE
                                el = null;
                            }
                        }

                        /**
                         * Returns a function to use in pseudos for input types
                         * @param {String} type
                         */
                        function createInputPseudo(type) {
                            return function (elem) {
                                return nodeName(elem, 'input') && elem.type === type;
                            };
                        }

                        /**
                         * Returns a function to use in pseudos for buttons
                         * @param {String} type
                         */
                        function createButtonPseudo(type) {
                            return function (elem) {
                                return (
                                    (nodeName(elem, 'input') || nodeName(elem, 'button')) &&
                                    elem.type === type
                                );
                            };
                        }

                        /**
                         * Returns a function to use in pseudos for :enabled/:disabled
                         * @param {Boolean} disabled true for :disabled; false for :enabled
                         */
                        function createDisabledPseudo(disabled) {
                            // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
                            return function (elem) {
                                // Only certain elements can match :enabled or :disabled
                                // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
                                // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
                                if ('form' in elem) {
                                    // Check for inherited disabledness on relevant non-disabled elements:
                                    // * listed form-associated elements in a disabled fieldset
                                    //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
                                    //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
                                    // * option elements in a disabled optgroup
                                    //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
                                    // All such elements have a "form" property.
                                    if (elem.parentNode && elem.disabled === false) {
                                        // Option elements defer to a parent optgroup if present
                                        if ('label' in elem) {
                                            if ('label' in elem.parentNode) {
                                                return elem.parentNode.disabled === disabled;
                                            } else {
                                                return elem.disabled === disabled;
                                            }
                                        }

                                        // Support: IE 6 - 11+
                                        // Use the isDisabled shortcut property to check for disabled fieldset ancestors
                                        return (
                                            elem.isDisabled === disabled ||
                                            // Where there is no isDisabled, check manually
                                            (elem.isDisabled !== !disabled &&
                                                inDisabledFieldset(elem) === disabled)
                                        );
                                    }

                                    return elem.disabled === disabled;

                                    // Try to winnow out elements that can't be disabled before trusting the disabled property.
                                    // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
                                    // even exist on them, let alone have a boolean value.
                                } else if ('label' in elem) {
                                    return elem.disabled === disabled;
                                }

                                // Remaining elements are neither :enabled nor :disabled
                                return false;
                            };
                        }

                        /**
                         * Returns a function to use in pseudos for positionals
                         * @param {Function} fn
                         */
                        function createPositionalPseudo(fn) {
                            return markFunction(function (argument) {
                                argument = +argument;
                                return markFunction(function (seed, matches) {
                                    var j,
                                        matchIndexes = fn([], seed.length, argument),
                                        i = matchIndexes.length;

                                    // Match elements found at the specified indexes
                                    while (i--) {
                                        if (seed[(j = matchIndexes[i])]) {
                                            seed[j] = !(matches[j] = seed[j]);
                                        }
                                    }
                                });
                            });
                        }

                        /**
                         * Checks a node for validity as a jQuery selector context
                         * @param {Element|Object=} context
                         * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
                         */
                        function testContext(context) {
                            return (
                                context &&
                                typeof context.getElementsByTagName !== 'undefined' &&
                                context
                            );
                        }

                        /**
                         * Sets document-related variables once based on the current document
                         * @param {Element|Object} [node] An element or document object to use to set the document
                         * @returns {Object} Returns the current document
                         */
                        function setDocument(node) {
                            var subWindow,
                                doc = node ? node.ownerDocument || node : preferredDoc;

                            // Return early if doc is invalid or already selected
                            // Support: IE 11+, Edge 17 - 18+
                            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                            // two documents; shallow comparisons work.
                            // eslint-disable-next-line eqeqeq
                            if (doc == document || doc.nodeType !== 9 || !doc.documentElement) {
                                return document;
                            }

                            // Update global variables
                            document = doc;
                            documentElement = document.documentElement;
                            documentIsHTML = !jQuery.isXMLDoc(document);

                            // Support: iOS 7 only, IE 9 - 11+
                            // Older browsers didn't support unprefixed `matches`.
                            matches =
                                documentElement.matches ||
                                documentElement.webkitMatchesSelector ||
                                documentElement.msMatchesSelector;

                            // Support: IE 9 - 11+, Edge 12 - 18+
                            // Accessing iframe documents after unload throws "permission denied" errors
                            // (see trac-13936).
                            // Limit the fix to IE & Edge Legacy; despite Edge 15+ implementing `matches`,
                            // all IE 9+ and Edge Legacy versions implement `msMatchesSelector` as well.
                            if (
                                documentElement.msMatchesSelector &&
                                // Support: IE 11+, Edge 17 - 18+
                                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                                // two documents; shallow comparisons work.
                                // eslint-disable-next-line eqeqeq
                                preferredDoc != document &&
                                (subWindow = document.defaultView) &&
                                subWindow.top !== subWindow
                            ) {
                                // Support: IE 9 - 11+, Edge 12 - 18+
                                subWindow.addEventListener('unload', unloadHandler);
                            }

                            // Support: IE <10
                            // Check if getElementById returns elements by name
                            // The broken getElementById methods don't pick up programmatically-set names,
                            // so use a roundabout getElementsByName test
                            support.getById = assert(function (el) {
                                documentElement.appendChild(el).id = jQuery.expando;
                                return (
                                    !document.getElementsByName ||
                                    !document.getElementsByName(jQuery.expando).length
                                );
                            });

                            // Support: IE 9 only
                            // Check to see if it's possible to do matchesSelector
                            // on a disconnected node.
                            support.disconnectedMatch = assert(function (el) {
                                return matches.call(el, '*');
                            });

                            // Support: IE 9 - 11+, Edge 12 - 18+
                            // IE/Edge don't support the :scope pseudo-class.
                            support.scope = assert(function () {
                                return document.querySelectorAll(':scope');
                            });

                            // Support: Chrome 105 - 111 only, Safari 15.4 - 16.3 only
                            // Make sure the `:has()` argument is parsed unforgivingly.
                            // We include `*` in the test to detect buggy implementations that are
                            // _selectively_ forgiving (specifically when the list includes at least
                            // one valid selector).
                            // Note that we treat complete lack of support for `:has()` as if it were
                            // spec-compliant support, which is fine because use of `:has()` in such
                            // environments will fail in the qSA path and fall back to jQuery traversal
                            // anyway.
                            support.cssHas = assert(function () {
                                try {
                                    document.querySelector(':has(*,:jqfake)');
                                    return false;
                                } catch (e) {
                                    return true;
                                }
                            });

                            // ID filter and find
                            if (support.getById) {
                                Expr.filter.ID = function (id) {
                                    var attrId = id.replace(runescape, funescape);
                                    return function (elem) {
                                        return elem.getAttribute('id') === attrId;
                                    };
                                };
                                Expr.find.ID = function (id, context) {
                                    if (
                                        typeof context.getElementById !== 'undefined' &&
                                        documentIsHTML
                                    ) {
                                        var elem = context.getElementById(id);
                                        return elem ? [elem] : [];
                                    }
                                };
                            } else {
                                Expr.filter.ID = function (id) {
                                    var attrId = id.replace(runescape, funescape);
                                    return function (elem) {
                                        var node =
                                            typeof elem.getAttributeNode !== 'undefined' &&
                                            elem.getAttributeNode('id');
                                        return node && node.value === attrId;
                                    };
                                };

                                // Support: IE 6 - 7 only
                                // getElementById is not reliable as a find shortcut
                                Expr.find.ID = function (id, context) {
                                    if (
                                        typeof context.getElementById !== 'undefined' &&
                                        documentIsHTML
                                    ) {
                                        var node,
                                            i,
                                            elems,
                                            elem = context.getElementById(id);

                                        if (elem) {
                                            // Verify the id attribute
                                            node = elem.getAttributeNode('id');
                                            if (node && node.value === id) {
                                                return [elem];
                                            }

                                            // Fall back on getElementsByName
                                            elems = context.getElementsByName(id);
                                            i = 0;
                                            while ((elem = elems[i++])) {
                                                node = elem.getAttributeNode('id');
                                                if (node && node.value === id) {
                                                    return [elem];
                                                }
                                            }
                                        }

                                        return [];
                                    }
                                };
                            }

                            // Tag
                            Expr.find.TAG = function (tag, context) {
                                if (typeof context.getElementsByTagName !== 'undefined') {
                                    return context.getElementsByTagName(tag);

                                    // DocumentFragment nodes don't have gEBTN
                                } else {
                                    return context.querySelectorAll(tag);
                                }
                            };

                            // Class
                            Expr.find.CLASS = function (className, context) {
                                if (
                                    typeof context.getElementsByClassName !== 'undefined' &&
                                    documentIsHTML
                                ) {
                                    return context.getElementsByClassName(className);
                                }
                            };

                            /* QSA/matchesSelector
	---------------------------------------------------------------------- */

                            // QSA and matchesSelector support

                            rbuggyQSA = [];

                            // Build QSA regex
                            // Regex strategy adopted from Diego Perini
                            assert(function (el) {
                                var input;

                                documentElement.appendChild(el).innerHTML =
                                    "<a id='" +
                                    expando +
                                    "' href='' disabled='disabled'></a>" +
                                    "<select id='" +
                                    expando +
                                    "-\r\\' disabled='disabled'>" +
                                    "<option selected=''></option></select>";

                                // Support: iOS <=7 - 8 only
                                // Boolean attributes and "value" are not treated correctly in some XML documents
                                if (!el.querySelectorAll('[selected]').length) {
                                    rbuggyQSA.push(
                                        '\\[' + whitespace + '*(?:value|' + booleans + ')',
                                    );
                                }

                                // Support: iOS <=7 - 8 only
                                if (!el.querySelectorAll('[id~=' + expando + '-]').length) {
                                    rbuggyQSA.push('~=');
                                }

                                // Support: iOS 8 only
                                // https://bugs.webkit.org/show_bug.cgi?id=136851
                                // In-page `selector#id sibling-combinator selector` fails
                                if (!el.querySelectorAll('a#' + expando + '+*').length) {
                                    rbuggyQSA.push('.#.+[+~]');
                                }

                                // Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+
                                // In some of the document kinds, these selectors wouldn't work natively.
                                // This is probably OK but for backwards compatibility we want to maintain
                                // handling them through jQuery traversal in jQuery 3.x.
                                if (!el.querySelectorAll(':checked').length) {
                                    rbuggyQSA.push(':checked');
                                }

                                // Support: Windows 8 Native Apps
                                // The type and name attributes are restricted during .innerHTML assignment
                                input = document.createElement('input');
                                input.setAttribute('type', 'hidden');
                                el.appendChild(input).setAttribute('name', 'D');

                                // Support: IE 9 - 11+
                                // IE's :disabled selector does not pick up the children of disabled fieldsets
                                // Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+
                                // In some of the document kinds, these selectors wouldn't work natively.
                                // This is probably OK but for backwards compatibility we want to maintain
                                // handling them through jQuery traversal in jQuery 3.x.
                                documentElement.appendChild(el).disabled = true;
                                if (el.querySelectorAll(':disabled').length !== 2) {
                                    rbuggyQSA.push(':enabled', ':disabled');
                                }

                                // Support: IE 11+, Edge 15 - 18+
                                // IE 11/Edge don't find elements on a `[name='']` query in some cases.
                                // Adding a temporary attribute to the document before the selection works
                                // around the issue.
                                // Interestingly, IE 10 & older don't seem to have the issue.
                                input = document.createElement('input');
                                input.setAttribute('name', '');
                                el.appendChild(input);
                                if (!el.querySelectorAll("[name='']").length) {
                                    rbuggyQSA.push(
                                        '\\[' +
                                            whitespace +
                                            '*name' +
                                            whitespace +
                                            '*=' +
                                            whitespace +
                                            '*(?:\'\'|"")',
                                    );
                                }
                            });

                            if (!support.cssHas) {
                                // Support: Chrome 105 - 110+, Safari 15.4 - 16.3+
                                // Our regular `try-catch` mechanism fails to detect natively-unsupported
                                // pseudo-classes inside `:has()` (such as `:has(:contains("Foo"))`)
                                // in browsers that parse the `:has()` argument as a forgiving selector list.
                                // https://drafts.csswg.org/selectors/#relational now requires the argument
                                // to be parsed unforgivingly, but browsers have not yet fully adjusted.
                                rbuggyQSA.push(':has');
                            }

                            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join('|'));

                            /* Sorting
	---------------------------------------------------------------------- */

                            // Document order sorting
                            sortOrder = function (a, b) {
                                // Flag for duplicate removal
                                if (a === b) {
                                    hasDuplicate = true;
                                    return 0;
                                }

                                // Sort on method existence if only one input has compareDocumentPosition
                                var compare =
                                    !a.compareDocumentPosition - !b.compareDocumentPosition;
                                if (compare) {
                                    return compare;
                                }

                                // Calculate position if both inputs belong to the same document
                                // Support: IE 11+, Edge 17 - 18+
                                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                                // two documents; shallow comparisons work.
                                // eslint-disable-next-line eqeqeq
                                compare =
                                    (a.ownerDocument || a) == (b.ownerDocument || b)
                                        ? a.compareDocumentPosition(b)
                                        : // Otherwise we know they are disconnected
                                          1;

                                // Disconnected nodes
                                if (
                                    compare & 1 ||
                                    (!support.sortDetached &&
                                        b.compareDocumentPosition(a) === compare)
                                ) {
                                    // Choose the first element that is related to our preferred document
                                    // Support: IE 11+, Edge 17 - 18+
                                    // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                                    // two documents; shallow comparisons work.
                                    // eslint-disable-next-line eqeqeq
                                    if (
                                        a === document ||
                                        (a.ownerDocument == preferredDoc &&
                                            find.contains(preferredDoc, a))
                                    ) {
                                        return -1;
                                    }

                                    // Support: IE 11+, Edge 17 - 18+
                                    // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                                    // two documents; shallow comparisons work.
                                    // eslint-disable-next-line eqeqeq
                                    if (
                                        b === document ||
                                        (b.ownerDocument == preferredDoc &&
                                            find.contains(preferredDoc, b))
                                    ) {
                                        return 1;
                                    }

                                    // Maintain original order
                                    return sortInput
                                        ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b)
                                        : 0;
                                }

                                return compare & 4 ? -1 : 1;
                            };

                            return document;
                        }

                        find.matches = function (expr, elements) {
                            return find(expr, null, null, elements);
                        };

                        find.matchesSelector = function (elem, expr) {
                            setDocument(elem);

                            if (
                                documentIsHTML &&
                                !nonnativeSelectorCache[expr + ' '] &&
                                (!rbuggyQSA || !rbuggyQSA.test(expr))
                            ) {
                                try {
                                    var ret = matches.call(elem, expr);

                                    // IE 9's matchesSelector returns false on disconnected nodes
                                    if (
                                        ret ||
                                        support.disconnectedMatch ||
                                        // As well, disconnected nodes are said to be in a document
                                        // fragment in IE 9
                                        (elem.document && elem.document.nodeType !== 11)
                                    ) {
                                        return ret;
                                    }
                                } catch (e) {
                                    nonnativeSelectorCache(expr, true);
                                }
                            }

                            return find(expr, document, null, [elem]).length > 0;
                        };

                        find.contains = function (context, elem) {
                            // Set document vars if needed
                            // Support: IE 11+, Edge 17 - 18+
                            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                            // two documents; shallow comparisons work.
                            // eslint-disable-next-line eqeqeq
                            if ((context.ownerDocument || context) != document) {
                                setDocument(context);
                            }
                            return jQuery.contains(context, elem);
                        };

                        find.attr = function (elem, name) {
                            // Set document vars if needed
                            // Support: IE 11+, Edge 17 - 18+
                            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                            // two documents; shallow comparisons work.
                            // eslint-disable-next-line eqeqeq
                            if ((elem.ownerDocument || elem) != document) {
                                setDocument(elem);
                            }

                            var fn = Expr.attrHandle[name.toLowerCase()],
                                // Don't get fooled by Object.prototype properties (see trac-13807)
                                val =
                                    fn && hasOwn.call(Expr.attrHandle, name.toLowerCase())
                                        ? fn(elem, name, !documentIsHTML)
                                        : undefined;

                            if (val !== undefined) {
                                return val;
                            }

                            return elem.getAttribute(name);
                        };

                        find.error = function (msg) {
                            throw new Error('Syntax error, unrecognized expression: ' + msg);
                        };

                        /**
                         * Document sorting and removing duplicates
                         * @param {ArrayLike} results
                         */
                        jQuery.uniqueSort = function (results) {
                            var elem,
                                duplicates = [],
                                j = 0,
                                i = 0;

                            // Unless we *know* we can detect duplicates, assume their presence
                            //
                            // Support: Android <=4.0+
                            // Testing for detecting duplicates is unpredictable so instead assume we can't
                            // depend on duplicate detection in all browsers without a stable sort.
                            hasDuplicate = !support.sortStable;
                            sortInput = !support.sortStable && slice.call(results, 0);
                            sort.call(results, sortOrder);

                            if (hasDuplicate) {
                                while ((elem = results[i++])) {
                                    if (elem === results[i]) {
                                        j = duplicates.push(i);
                                    }
                                }
                                while (j--) {
                                    splice.call(results, duplicates[j], 1);
                                }
                            }

                            // Clear input after sorting to release objects
                            // See https://github.com/jquery/sizzle/pull/225
                            sortInput = null;

                            return results;
                        };

                        jQuery.fn.uniqueSort = function () {
                            return this.pushStack(jQuery.uniqueSort(slice.apply(this)));
                        };

                        Expr = jQuery.expr = {
                            // Can be adjusted by the user
                            cacheLength: 50,

                            createPseudo: markFunction,

                            match: matchExpr,

                            attrHandle: {},

                            find: {},

                            relative: {
                                '>': { dir: 'parentNode', first: true },
                                ' ': { dir: 'parentNode' },
                                '+': { dir: 'previousSibling', first: true },
                                '~': { dir: 'previousSibling' },
                            },

                            preFilter: {
                                ATTR: function (match) {
                                    match[1] = match[1].replace(runescape, funescape);

                                    // Move the given value to match[3] whether quoted or unquoted
                                    match[3] = (match[3] || match[4] || match[5] || '').replace(
                                        runescape,
                                        funescape,
                                    );

                                    if (match[2] === '~=') {
                                        match[3] = ' ' + match[3] + ' ';
                                    }

                                    return match.slice(0, 4);
                                },

                                CHILD: function (match) {
                                    /* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
                                    match[1] = match[1].toLowerCase();

                                    if (match[1].slice(0, 3) === 'nth') {
                                        // nth-* requires argument
                                        if (!match[3]) {
                                            find.error(match[0]);
                                        }

                                        // numeric x and y parameters for Expr.filter.CHILD
                                        // remember that false/true cast respectively to 0/1
                                        match[4] = +(match[4]
                                            ? match[5] + (match[6] || 1)
                                            : 2 * (match[3] === 'even' || match[3] === 'odd'));
                                        match[5] = +(match[7] + match[8] || match[3] === 'odd');

                                        // other types prohibit arguments
                                    } else if (match[3]) {
                                        find.error(match[0]);
                                    }

                                    return match;
                                },

                                PSEUDO: function (match) {
                                    var excess,
                                        unquoted = !match[6] && match[2];

                                    if (matchExpr.CHILD.test(match[0])) {
                                        return null;
                                    }

                                    // Accept quoted arguments as-is
                                    if (match[3]) {
                                        match[2] = match[4] || match[5] || '';

                                        // Strip excess characters from unquoted arguments
                                    } else if (
                                        unquoted &&
                                        rpseudo.test(unquoted) &&
                                        // Get excess from tokenize (recursively)
                                        (excess = tokenize(unquoted, true)) &&
                                        // advance to the next closing parenthesis
                                        (excess =
                                            unquoted.indexOf(')', unquoted.length - excess) -
                                            unquoted.length)
                                    ) {
                                        // excess is a negative index
                                        match[0] = match[0].slice(0, excess);
                                        match[2] = unquoted.slice(0, excess);
                                    }

                                    // Return only captures needed by the pseudo filter method (type and argument)
                                    return match.slice(0, 3);
                                },
                            },

                            filter: {
                                TAG: function (nodeNameSelector) {
                                    var expectedNodeName = nodeNameSelector
                                        .replace(runescape, funescape)
                                        .toLowerCase();
                                    return nodeNameSelector === '*'
                                        ? function () {
                                              return true;
                                          }
                                        : function (elem) {
                                              return nodeName(elem, expectedNodeName);
                                          };
                                },

                                CLASS: function (className) {
                                    var pattern = classCache[className + ' '];

                                    return (
                                        pattern ||
                                        ((pattern = new RegExp(
                                            '(^|' +
                                                whitespace +
                                                ')' +
                                                className +
                                                '(' +
                                                whitespace +
                                                '|$)',
                                        )) &&
                                            classCache(className, function (elem) {
                                                return pattern.test(
                                                    (typeof elem.className === 'string' &&
                                                        elem.className) ||
                                                        (typeof elem.getAttribute !== 'undefined' &&
                                                            elem.getAttribute('class')) ||
                                                        '',
                                                );
                                            }))
                                    );
                                },

                                ATTR: function (name, operator, check) {
                                    return function (elem) {
                                        var result = find.attr(elem, name);

                                        if (result == null) {
                                            return operator === '!=';
                                        }
                                        if (!operator) {
                                            return true;
                                        }

                                        result += '';

                                        if (operator === '=') {
                                            return result === check;
                                        }
                                        if (operator === '!=') {
                                            return result !== check;
                                        }
                                        if (operator === '^=') {
                                            return check && result.indexOf(check) === 0;
                                        }
                                        if (operator === '*=') {
                                            return check && result.indexOf(check) > -1;
                                        }
                                        if (operator === '$=') {
                                            return check && result.slice(-check.length) === check;
                                        }
                                        if (operator === '~=') {
                                            return (
                                                (
                                                    ' ' +
                                                    result.replace(rwhitespace, ' ') +
                                                    ' '
                                                ).indexOf(check) > -1
                                            );
                                        }
                                        if (operator === '|=') {
                                            return (
                                                result === check ||
                                                result.slice(0, check.length + 1) === check + '-'
                                            );
                                        }

                                        return false;
                                    };
                                },

                                CHILD: function (type, what, _argument, first, last) {
                                    var simple = type.slice(0, 3) !== 'nth',
                                        forward = type.slice(-4) !== 'last',
                                        ofType = what === 'of-type';

                                    return first === 1 && last === 0
                                        ? // Shortcut for :nth-*(n)
                                          function (elem) {
                                              return !!elem.parentNode;
                                          }
                                        : function (elem, _context, xml) {
                                              var cache,
                                                  outerCache,
                                                  node,
                                                  nodeIndex,
                                                  start,
                                                  dir =
                                                      simple !== forward
                                                          ? 'nextSibling'
                                                          : 'previousSibling',
                                                  parent = elem.parentNode,
                                                  name = ofType && elem.nodeName.toLowerCase(),
                                                  useCache = !xml && !ofType,
                                                  diff = false;

                                              if (parent) {
                                                  // :(first|last|only)-(child|of-type)
                                                  if (simple) {
                                                      while (dir) {
                                                          node = elem;
                                                          while ((node = node[dir])) {
                                                              if (
                                                                  ofType
                                                                      ? nodeName(node, name)
                                                                      : node.nodeType === 1
                                                              ) {
                                                                  return false;
                                                              }
                                                          }

                                                          // Reverse direction for :only-* (if we haven't yet done so)
                                                          start = dir =
                                                              type === 'only' &&
                                                              !start &&
                                                              'nextSibling';
                                                      }
                                                      return true;
                                                  }

                                                  start = [
                                                      forward
                                                          ? parent.firstChild
                                                          : parent.lastChild,
                                                  ];

                                                  // non-xml :nth-child(...) stores cache data on `parent`
                                                  if (forward && useCache) {
                                                      // Seek `elem` from a previously-cached index
                                                      outerCache =
                                                          parent[expando] || (parent[expando] = {});
                                                      cache = outerCache[type] || [];
                                                      nodeIndex = cache[0] === dirruns && cache[1];
                                                      diff = nodeIndex && cache[2];
                                                      node =
                                                          nodeIndex && parent.childNodes[nodeIndex];

                                                      while (
                                                          (node =
                                                              (++nodeIndex && node && node[dir]) ||
                                                              // Fallback to seeking `elem` from the start
                                                              (diff = nodeIndex = 0) ||
                                                              start.pop())
                                                      ) {
                                                          // When found, cache indexes on `parent` and break
                                                          if (
                                                              node.nodeType === 1 &&
                                                              ++diff &&
                                                              node === elem
                                                          ) {
                                                              outerCache[type] = [
                                                                  dirruns,
                                                                  nodeIndex,
                                                                  diff,
                                                              ];
                                                              break;
                                                          }
                                                      }
                                                  } else {
                                                      // Use previously-cached element index if available
                                                      if (useCache) {
                                                          outerCache =
                                                              elem[expando] || (elem[expando] = {});
                                                          cache = outerCache[type] || [];
                                                          nodeIndex =
                                                              cache[0] === dirruns && cache[1];
                                                          diff = nodeIndex;
                                                      }

                                                      // xml :nth-child(...)
                                                      // or :nth-last-child(...) or :nth(-last)?-of-type(...)
                                                      if (diff === false) {
                                                          // Use the same loop as above to seek `elem` from the start
                                                          while (
                                                              (node =
                                                                  (++nodeIndex &&
                                                                      node &&
                                                                      node[dir]) ||
                                                                  (diff = nodeIndex = 0) ||
                                                                  start.pop())
                                                          ) {
                                                              if (
                                                                  (ofType
                                                                      ? nodeName(node, name)
                                                                      : node.nodeType === 1) &&
                                                                  ++diff
                                                              ) {
                                                                  // Cache the index of each encountered element
                                                                  if (useCache) {
                                                                      outerCache =
                                                                          node[expando] ||
                                                                          (node[expando] = {});
                                                                      outerCache[type] = [
                                                                          dirruns,
                                                                          diff,
                                                                      ];
                                                                  }

                                                                  if (node === elem) {
                                                                      break;
                                                                  }
                                                              }
                                                          }
                                                      }
                                                  }

                                                  // Incorporate the offset, then check against cycle size
                                                  diff -= last;
                                                  return (
                                                      diff === first ||
                                                      (diff % first === 0 && diff / first >= 0)
                                                  );
                                              }
                                          };
                                },

                                PSEUDO: function (pseudo, argument) {
                                    // pseudo-class names are case-insensitive
                                    // https://www.w3.org/TR/selectors/#pseudo-classes
                                    // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
                                    // Remember that setFilters inherits from pseudos
                                    var args,
                                        fn =
                                            Expr.pseudos[pseudo] ||
                                            Expr.setFilters[pseudo.toLowerCase()] ||
                                            find.error('unsupported pseudo: ' + pseudo);

                                    // The user may use createPseudo to indicate that
                                    // arguments are needed to create the filter function
                                    // just as jQuery does
                                    if (fn[expando]) {
                                        return fn(argument);
                                    }

                                    // But maintain support for old signatures
                                    if (fn.length > 1) {
                                        args = [pseudo, pseudo, '', argument];
                                        return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase())
                                            ? markFunction(function (seed, matches) {
                                                  var idx,
                                                      matched = fn(seed, argument),
                                                      i = matched.length;
                                                  while (i--) {
                                                      idx = indexOf.call(seed, matched[i]);
                                                      seed[idx] = !(matches[idx] = matched[i]);
                                                  }
                                              })
                                            : function (elem) {
                                                  return fn(elem, 0, args);
                                              };
                                    }

                                    return fn;
                                },
                            },

                            pseudos: {
                                // Potentially complex pseudos
                                not: markFunction(function (selector) {
                                    // Trim the selector passed to compile
                                    // to avoid treating leading and trailing
                                    // spaces as combinators
                                    var input = [],
                                        results = [],
                                        matcher = compile(selector.replace(rtrimCSS, '$1'));

                                    return matcher[expando]
                                        ? markFunction(function (seed, matches, _context, xml) {
                                              var elem,
                                                  unmatched = matcher(seed, null, xml, []),
                                                  i = seed.length;

                                              // Match elements unmatched by `matcher`
                                              while (i--) {
                                                  if ((elem = unmatched[i])) {
                                                      seed[i] = !(matches[i] = elem);
                                                  }
                                              }
                                          })
                                        : function (elem, _context, xml) {
                                              input[0] = elem;
                                              matcher(input, null, xml, results);

                                              // Don't keep the element
                                              // (see https://github.com/jquery/sizzle/issues/299)
                                              input[0] = null;
                                              return !results.pop();
                                          };
                                }),

                                has: markFunction(function (selector) {
                                    return function (elem) {
                                        return find(selector, elem).length > 0;
                                    };
                                }),

                                contains: markFunction(function (text) {
                                    text = text.replace(runescape, funescape);
                                    return function (elem) {
                                        return (
                                            (elem.textContent || jQuery.text(elem)).indexOf(text) >
                                            -1
                                        );
                                    };
                                }),

                                // "Whether an element is represented by a :lang() selector
                                // is based solely on the element's language value
                                // being equal to the identifier C,
                                // or beginning with the identifier C immediately followed by "-".
                                // The matching of C against the element's language value is performed case-insensitively.
                                // The identifier C does not have to be a valid language name."
                                // https://www.w3.org/TR/selectors/#lang-pseudo
                                lang: markFunction(function (lang) {
                                    // lang value must be a valid identifier
                                    if (!ridentifier.test(lang || '')) {
                                        find.error('unsupported lang: ' + lang);
                                    }
                                    lang = lang.replace(runescape, funescape).toLowerCase();
                                    return function (elem) {
                                        var elemLang;
                                        do {
                                            if (
                                                (elemLang = documentIsHTML
                                                    ? elem.lang
                                                    : elem.getAttribute('xml:lang') ||
                                                      elem.getAttribute('lang'))
                                            ) {
                                                elemLang = elemLang.toLowerCase();
                                                return (
                                                    elemLang === lang ||
                                                    elemLang.indexOf(lang + '-') === 0
                                                );
                                            }
                                        } while ((elem = elem.parentNode) && elem.nodeType === 1);
                                        return false;
                                    };
                                }),

                                // Miscellaneous
                                target: function (elem) {
                                    var hash = window.location && window.location.hash;
                                    return hash && hash.slice(1) === elem.id;
                                },

                                root: function (elem) {
                                    return elem === documentElement;
                                },

                                focus: function (elem) {
                                    return (
                                        elem === safeActiveElement() &&
                                        document.hasFocus() &&
                                        !!(elem.type || elem.href || ~elem.tabIndex)
                                    );
                                },

                                // Boolean properties
                                enabled: createDisabledPseudo(false),
                                disabled: createDisabledPseudo(true),

                                checked: function (elem) {
                                    // In CSS3, :checked should return both checked and selected elements
                                    // https://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                                    return (
                                        (nodeName(elem, 'input') && !!elem.checked) ||
                                        (nodeName(elem, 'option') && !!elem.selected)
                                    );
                                },

                                selected: function (elem) {
                                    // Support: IE <=11+
                                    // Accessing the selectedIndex property
                                    // forces the browser to treat the default option as
                                    // selected when in an optgroup.
                                    if (elem.parentNode) {
                                        // eslint-disable-next-line no-unused-expressions
                                        elem.parentNode.selectedIndex;
                                    }

                                    return elem.selected === true;
                                },

                                // Contents
                                empty: function (elem) {
                                    // https://www.w3.org/TR/selectors/#empty-pseudo
                                    // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
                                    //   but not by others (comment: 8; processing instruction: 7; etc.)
                                    // nodeType < 6 works because attributes (2) do not appear as children
                                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                                        if (elem.nodeType < 6) {
                                            return false;
                                        }
                                    }
                                    return true;
                                },

                                parent: function (elem) {
                                    return !Expr.pseudos.empty(elem);
                                },

                                // Element/input types
                                header: function (elem) {
                                    return rheader.test(elem.nodeName);
                                },

                                input: function (elem) {
                                    return rinputs.test(elem.nodeName);
                                },

                                button: function (elem) {
                                    return (
                                        (nodeName(elem, 'input') && elem.type === 'button') ||
                                        nodeName(elem, 'button')
                                    );
                                },

                                text: function (elem) {
                                    var attr;
                                    return (
                                        nodeName(elem, 'input') &&
                                        elem.type === 'text' &&
                                        // Support: IE <10 only
                                        // New HTML5 attribute values (e.g., "search") appear
                                        // with elem.type === "text"
                                        ((attr = elem.getAttribute('type')) == null ||
                                            attr.toLowerCase() === 'text')
                                    );
                                },

                                // Position-in-collection
                                first: createPositionalPseudo(function () {
                                    return [0];
                                }),

                                last: createPositionalPseudo(function (_matchIndexes, length) {
                                    return [length - 1];
                                }),

                                eq: createPositionalPseudo(function (
                                    _matchIndexes,
                                    length,
                                    argument,
                                ) {
                                    return [argument < 0 ? argument + length : argument];
                                }),

                                even: createPositionalPseudo(function (matchIndexes, length) {
                                    var i = 0;
                                    for (; i < length; i += 2) {
                                        matchIndexes.push(i);
                                    }
                                    return matchIndexes;
                                }),

                                odd: createPositionalPseudo(function (matchIndexes, length) {
                                    var i = 1;
                                    for (; i < length; i += 2) {
                                        matchIndexes.push(i);
                                    }
                                    return matchIndexes;
                                }),

                                lt: createPositionalPseudo(function (
                                    matchIndexes,
                                    length,
                                    argument,
                                ) {
                                    var i;

                                    if (argument < 0) {
                                        i = argument + length;
                                    } else if (argument > length) {
                                        i = length;
                                    } else {
                                        i = argument;
                                    }

                                    for (; --i >= 0; ) {
                                        matchIndexes.push(i);
                                    }
                                    return matchIndexes;
                                }),

                                gt: createPositionalPseudo(function (
                                    matchIndexes,
                                    length,
                                    argument,
                                ) {
                                    var i = argument < 0 ? argument + length : argument;
                                    for (; ++i < length; ) {
                                        matchIndexes.push(i);
                                    }
                                    return matchIndexes;
                                }),
                            },
                        };

                        Expr.pseudos.nth = Expr.pseudos.eq;

                        // Add button/input type pseudos
                        for (i in {
                            radio: true,
                            checkbox: true,
                            file: true,
                            password: true,
                            image: true,
                        }) {
                            Expr.pseudos[i] = createInputPseudo(i);
                        }
                        for (i in { submit: true, reset: true }) {
                            Expr.pseudos[i] = createButtonPseudo(i);
                        }

                        // Easy API for creating new setFilters
                        function setFilters() {}
                        setFilters.prototype = Expr.filters = Expr.pseudos;
                        Expr.setFilters = new setFilters();

                        function tokenize(selector, parseOnly) {
                            var matched,
                                match,
                                tokens,
                                type,
                                soFar,
                                groups,
                                preFilters,
                                cached = tokenCache[selector + ' '];

                            if (cached) {
                                return parseOnly ? 0 : cached.slice(0);
                            }

                            soFar = selector;
                            groups = [];
                            preFilters = Expr.preFilter;

                            while (soFar) {
                                // Comma and first run
                                if (!matched || (match = rcomma.exec(soFar))) {
                                    if (match) {
                                        // Don't consume trailing commas as valid
                                        soFar = soFar.slice(match[0].length) || soFar;
                                    }
                                    groups.push((tokens = []));
                                }

                                matched = false;

                                // Combinators
                                if ((match = rleadingCombinator.exec(soFar))) {
                                    matched = match.shift();
                                    tokens.push({
                                        value: matched,

                                        // Cast descendant combinators to space
                                        type: match[0].replace(rtrimCSS, ' '),
                                    });
                                    soFar = soFar.slice(matched.length);
                                }

                                // Filters
                                for (type in Expr.filter) {
                                    if (
                                        (match = matchExpr[type].exec(soFar)) &&
                                        (!preFilters[type] || (match = preFilters[type](match)))
                                    ) {
                                        matched = match.shift();
                                        tokens.push({
                                            value: matched,
                                            type: type,
                                            matches: match,
                                        });
                                        soFar = soFar.slice(matched.length);
                                    }
                                }

                                if (!matched) {
                                    break;
                                }
                            }

                            // Return the length of the invalid excess
                            // if we're just parsing
                            // Otherwise, throw an error or return tokens
                            if (parseOnly) {
                                return soFar.length;
                            }

                            return soFar
                                ? find.error(selector)
                                : // Cache the tokens
                                  tokenCache(selector, groups).slice(0);
                        }

                        function toSelector(tokens) {
                            var i = 0,
                                len = tokens.length,
                                selector = '';
                            for (; i < len; i++) {
                                selector += tokens[i].value;
                            }
                            return selector;
                        }

                        function addCombinator(matcher, combinator, base) {
                            var dir = combinator.dir,
                                skip = combinator.next,
                                key = skip || dir,
                                checkNonElements = base && key === 'parentNode',
                                doneName = done++;

                            return combinator.first
                                ? // Check against closest ancestor/preceding element
                                  function (elem, context, xml) {
                                      while ((elem = elem[dir])) {
                                          if (elem.nodeType === 1 || checkNonElements) {
                                              return matcher(elem, context, xml);
                                          }
                                      }
                                      return false;
                                  }
                                : // Check against all ancestor/preceding elements
                                  function (elem, context, xml) {
                                      var oldCache,
                                          outerCache,
                                          newCache = [dirruns, doneName];

                                      // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
                                      if (xml) {
                                          while ((elem = elem[dir])) {
                                              if (elem.nodeType === 1 || checkNonElements) {
                                                  if (matcher(elem, context, xml)) {
                                                      return true;
                                                  }
                                              }
                                          }
                                      } else {
                                          while ((elem = elem[dir])) {
                                              if (elem.nodeType === 1 || checkNonElements) {
                                                  outerCache =
                                                      elem[expando] || (elem[expando] = {});

                                                  if (skip && nodeName(elem, skip)) {
                                                      elem = elem[dir] || elem;
                                                  } else if (
                                                      (oldCache = outerCache[key]) &&
                                                      oldCache[0] === dirruns &&
                                                      oldCache[1] === doneName
                                                  ) {
                                                      // Assign to newCache so results back-propagate to previous elements
                                                      return (newCache[2] = oldCache[2]);
                                                  } else {
                                                      // Reuse newcache so results back-propagate to previous elements
                                                      outerCache[key] = newCache;

                                                      // A match means we're done; a fail means we have to keep checking
                                                      if (
                                                          (newCache[2] = matcher(
                                                              elem,
                                                              context,
                                                              xml,
                                                          ))
                                                      ) {
                                                          return true;
                                                      }
                                                  }
                                              }
                                          }
                                      }
                                      return false;
                                  };
                        }

                        function elementMatcher(matchers) {
                            return matchers.length > 1
                                ? function (elem, context, xml) {
                                      var i = matchers.length;
                                      while (i--) {
                                          if (!matchers[i](elem, context, xml)) {
                                              return false;
                                          }
                                      }
                                      return true;
                                  }
                                : matchers[0];
                        }

                        function multipleContexts(selector, contexts, results) {
                            var i = 0,
                                len = contexts.length;
                            for (; i < len; i++) {
                                find(selector, contexts[i], results);
                            }
                            return results;
                        }

                        function condense(unmatched, map, filter, context, xml) {
                            var elem,
                                newUnmatched = [],
                                i = 0,
                                len = unmatched.length,
                                mapped = map != null;

                            for (; i < len; i++) {
                                if ((elem = unmatched[i])) {
                                    if (!filter || filter(elem, context, xml)) {
                                        newUnmatched.push(elem);
                                        if (mapped) {
                                            map.push(i);
                                        }
                                    }
                                }
                            }

                            return newUnmatched;
                        }

                        function setMatcher(
                            preFilter,
                            selector,
                            matcher,
                            postFilter,
                            postFinder,
                            postSelector,
                        ) {
                            if (postFilter && !postFilter[expando]) {
                                postFilter = setMatcher(postFilter);
                            }
                            if (postFinder && !postFinder[expando]) {
                                postFinder = setMatcher(postFinder, postSelector);
                            }
                            return markFunction(function (seed, results, context, xml) {
                                var temp,
                                    i,
                                    elem,
                                    matcherOut,
                                    preMap = [],
                                    postMap = [],
                                    preexisting = results.length,
                                    // Get initial elements from seed or context
                                    elems =
                                        seed ||
                                        multipleContexts(
                                            selector || '*',
                                            context.nodeType ? [context] : context,
                                            [],
                                        ),
                                    // Prefilter to get matcher input, preserving a map for seed-results synchronization
                                    matcherIn =
                                        preFilter && (seed || !selector)
                                            ? condense(elems, preMap, preFilter, context, xml)
                                            : elems;

                                if (matcher) {
                                    // If we have a postFinder, or filtered seed, or non-seed postFilter
                                    // or preexisting results,
                                    matcherOut =
                                        postFinder || (seed ? preFilter : preexisting || postFilter)
                                            ? // ...intermediate processing is necessary
                                              []
                                            : // ...otherwise use results directly
                                              results;

                                    // Find primary matches
                                    matcher(matcherIn, matcherOut, context, xml);
                                } else {
                                    matcherOut = matcherIn;
                                }

                                // Apply postFilter
                                if (postFilter) {
                                    temp = condense(matcherOut, postMap);
                                    postFilter(temp, [], context, xml);

                                    // Un-match failing elements by moving them back to matcherIn
                                    i = temp.length;
                                    while (i--) {
                                        if ((elem = temp[i])) {
                                            matcherOut[postMap[i]] = !(matcherIn[postMap[i]] =
                                                elem);
                                        }
                                    }
                                }

                                if (seed) {
                                    if (postFinder || preFilter) {
                                        if (postFinder) {
                                            // Get the final matcherOut by condensing this intermediate into postFinder contexts
                                            temp = [];
                                            i = matcherOut.length;
                                            while (i--) {
                                                if ((elem = matcherOut[i])) {
                                                    // Restore matcherIn since elem is not yet a final match
                                                    temp.push((matcherIn[i] = elem));
                                                }
                                            }
                                            postFinder(null, (matcherOut = []), temp, xml);
                                        }

                                        // Move matched elements from seed to results to keep them synchronized
                                        i = matcherOut.length;
                                        while (i--) {
                                            if (
                                                (elem = matcherOut[i]) &&
                                                (temp = postFinder
                                                    ? indexOf.call(seed, elem)
                                                    : preMap[i]) > -1
                                            ) {
                                                seed[temp] = !(results[temp] = elem);
                                            }
                                        }
                                    }

                                    // Add elements to results, through postFinder if defined
                                } else {
                                    matcherOut = condense(
                                        matcherOut === results
                                            ? matcherOut.splice(preexisting, matcherOut.length)
                                            : matcherOut,
                                    );
                                    if (postFinder) {
                                        postFinder(null, results, matcherOut, xml);
                                    } else {
                                        push.apply(results, matcherOut);
                                    }
                                }
                            });
                        }

                        function matcherFromTokens(tokens) {
                            var checkContext,
                                matcher,
                                j,
                                len = tokens.length,
                                leadingRelative = Expr.relative[tokens[0].type],
                                implicitRelative = leadingRelative || Expr.relative[' '],
                                i = leadingRelative ? 1 : 0,
                                // The foundational matcher ensures that elements are reachable from top-level context(s)
                                matchContext = addCombinator(
                                    function (elem) {
                                        return elem === checkContext;
                                    },
                                    implicitRelative,
                                    true,
                                ),
                                matchAnyContext = addCombinator(
                                    function (elem) {
                                        return indexOf.call(checkContext, elem) > -1;
                                    },
                                    implicitRelative,
                                    true,
                                ),
                                matchers = [
                                    function (elem, context, xml) {
                                        // Support: IE 11+, Edge 17 - 18+
                                        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                                        // two documents; shallow comparisons work.
                                        // eslint-disable-next-line eqeqeq
                                        var ret =
                                            (!leadingRelative &&
                                                (xml || context != outermostContext)) ||
                                            ((checkContext = context).nodeType
                                                ? matchContext(elem, context, xml)
                                                : matchAnyContext(elem, context, xml));

                                        // Avoid hanging onto element
                                        // (see https://github.com/jquery/sizzle/issues/299)
                                        checkContext = null;
                                        return ret;
                                    },
                                ];

                            for (; i < len; i++) {
                                if ((matcher = Expr.relative[tokens[i].type])) {
                                    matchers = [addCombinator(elementMatcher(matchers), matcher)];
                                } else {
                                    matcher = Expr.filter[tokens[i].type].apply(
                                        null,
                                        tokens[i].matches,
                                    );

                                    // Return special upon seeing a positional matcher
                                    if (matcher[expando]) {
                                        // Find the next relative operator (if any) for proper handling
                                        j = ++i;
                                        for (; j < len; j++) {
                                            if (Expr.relative[tokens[j].type]) {
                                                break;
                                            }
                                        }
                                        return setMatcher(
                                            i > 1 && elementMatcher(matchers),
                                            i > 1 &&
                                                toSelector(
                                                    // If the preceding token was a descendant combinator, insert an implicit any-element `*`
                                                    tokens
                                                        .slice(0, i - 1)
                                                        .concat({
                                                            value:
                                                                tokens[i - 2].type === ' '
                                                                    ? '*'
                                                                    : '',
                                                        }),
                                                ).replace(rtrimCSS, '$1'),
                                            matcher,
                                            i < j && matcherFromTokens(tokens.slice(i, j)),
                                            j < len &&
                                                matcherFromTokens((tokens = tokens.slice(j))),
                                            j < len && toSelector(tokens),
                                        );
                                    }
                                    matchers.push(matcher);
                                }
                            }

                            return elementMatcher(matchers);
                        }

                        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
                            var bySet = setMatchers.length > 0,
                                byElement = elementMatchers.length > 0,
                                superMatcher = function (seed, context, xml, results, outermost) {
                                    var elem,
                                        j,
                                        matcher,
                                        matchedCount = 0,
                                        i = '0',
                                        unmatched = seed && [],
                                        setMatched = [],
                                        contextBackup = outermostContext,
                                        // We must always have either seed elements or outermost context
                                        elems =
                                            seed || (byElement && Expr.find.TAG('*', outermost)),
                                        // Use integer dirruns iff this is the outermost matcher
                                        dirrunsUnique = (dirruns +=
                                            contextBackup == null ? 1 : Math.random() || 0.1),
                                        len = elems.length;

                                    if (outermost) {
                                        // Support: IE 11+, Edge 17 - 18+
                                        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                                        // two documents; shallow comparisons work.
                                        // eslint-disable-next-line eqeqeq
                                        outermostContext =
                                            context == document || context || outermost;
                                    }

                                    // Add elements passing elementMatchers directly to results
                                    // Support: iOS <=7 - 9 only
                                    // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching
                                    // elements by id. (see trac-14142)
                                    for (; i !== len && (elem = elems[i]) != null; i++) {
                                        if (byElement && elem) {
                                            j = 0;

                                            // Support: IE 11+, Edge 17 - 18+
                                            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                                            // two documents; shallow comparisons work.
                                            // eslint-disable-next-line eqeqeq
                                            if (!context && elem.ownerDocument != document) {
                                                setDocument(elem);
                                                xml = !documentIsHTML;
                                            }
                                            while ((matcher = elementMatchers[j++])) {
                                                if (matcher(elem, context || document, xml)) {
                                                    push.call(results, elem);
                                                    break;
                                                }
                                            }
                                            if (outermost) {
                                                dirruns = dirrunsUnique;
                                            }
                                        }

                                        // Track unmatched elements for set filters
                                        if (bySet) {
                                            // They will have gone through all possible matchers
                                            if ((elem = !matcher && elem)) {
                                                matchedCount--;
                                            }

                                            // Lengthen the array for every element, matched or not
                                            if (seed) {
                                                unmatched.push(elem);
                                            }
                                        }
                                    }

                                    // `i` is now the count of elements visited above, and adding it to `matchedCount`
                                    // makes the latter nonnegative.
                                    matchedCount += i;

                                    // Apply set filters to unmatched elements
                                    // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
                                    // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
                                    // no element matchers and no seed.
                                    // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
                                    // case, which will result in a "00" `matchedCount` that differs from `i` but is also
                                    // numerically zero.
                                    if (bySet && i !== matchedCount) {
                                        j = 0;
                                        while ((matcher = setMatchers[j++])) {
                                            matcher(unmatched, setMatched, context, xml);
                                        }

                                        if (seed) {
                                            // Reintegrate element matches to eliminate the need for sorting
                                            if (matchedCount > 0) {
                                                while (i--) {
                                                    if (!(unmatched[i] || setMatched[i])) {
                                                        setMatched[i] = pop.call(results);
                                                    }
                                                }
                                            }

                                            // Discard index placeholder values to get only actual matches
                                            setMatched = condense(setMatched);
                                        }

                                        // Add matches to results
                                        push.apply(results, setMatched);

                                        // Seedless set matches succeeding multiple successful matchers stipulate sorting
                                        if (
                                            outermost &&
                                            !seed &&
                                            setMatched.length > 0 &&
                                            matchedCount + setMatchers.length > 1
                                        ) {
                                            jQuery.uniqueSort(results);
                                        }
                                    }

                                    // Override manipulation of globals by nested matchers
                                    if (outermost) {
                                        dirruns = dirrunsUnique;
                                        outermostContext = contextBackup;
                                    }

                                    return unmatched;
                                };

                            return bySet ? markFunction(superMatcher) : superMatcher;
                        }

                        function compile(selector, match /* Internal Use Only */) {
                            var i,
                                setMatchers = [],
                                elementMatchers = [],
                                cached = compilerCache[selector + ' '];

                            if (!cached) {
                                // Generate a function of recursive functions that can be used to check each element
                                if (!match) {
                                    match = tokenize(selector);
                                }
                                i = match.length;
                                while (i--) {
                                    cached = matcherFromTokens(match[i]);
                                    if (cached[expando]) {
                                        setMatchers.push(cached);
                                    } else {
                                        elementMatchers.push(cached);
                                    }
                                }

                                // Cache the compiled function
                                cached = compilerCache(
                                    selector,
                                    matcherFromGroupMatchers(elementMatchers, setMatchers),
                                );

                                // Save selector and tokenization
                                cached.selector = selector;
                            }
                            return cached;
                        }

                        /**
                         * A low-level selection function that works with jQuery's compiled
                         *  selector functions
                         * @param {String|Function} selector A selector or a pre-compiled
                         *  selector function built with jQuery selector compile
                         * @param {Element} context
                         * @param {Array} [results]
                         * @param {Array} [seed] A set of elements to match against
                         */
                        function select(selector, context, results, seed) {
                            var i,
                                tokens,
                                token,
                                type,
                                find,
                                compiled = typeof selector === 'function' && selector,
                                match =
                                    !seed && tokenize((selector = compiled.selector || selector));

                            results = results || [];

                            // Try to minimize operations if there is only one selector in the list and no seed
                            // (the latter of which guarantees us context)
                            if (match.length === 1) {
                                // Reduce context if the leading compound selector is an ID
                                tokens = match[0] = match[0].slice(0);
                                if (
                                    tokens.length > 2 &&
                                    (token = tokens[0]).type === 'ID' &&
                                    context.nodeType === 9 &&
                                    documentIsHTML &&
                                    Expr.relative[tokens[1].type]
                                ) {
                                    context = (Expr.find.ID(
                                        token.matches[0].replace(runescape, funescape),
                                        context,
                                    ) || [])[0];
                                    if (!context) {
                                        return results;

                                        // Precompiled matchers will still verify ancestry, so step up a level
                                    } else if (compiled) {
                                        context = context.parentNode;
                                    }

                                    selector = selector.slice(tokens.shift().value.length);
                                }

                                // Fetch a seed set for right-to-left matching
                                i = matchExpr.needsContext.test(selector) ? 0 : tokens.length;
                                while (i--) {
                                    token = tokens[i];

                                    // Abort if we hit a combinator
                                    if (Expr.relative[(type = token.type)]) {
                                        break;
                                    }
                                    if ((find = Expr.find[type])) {
                                        // Search, expanding context for leading sibling combinators
                                        if (
                                            (seed = find(
                                                token.matches[0].replace(runescape, funescape),
                                                (rsibling.test(tokens[0].type) &&
                                                    testContext(context.parentNode)) ||
                                                    context,
                                            ))
                                        ) {
                                            // If seed is empty or no tokens remain, we can return early
                                            tokens.splice(i, 1);
                                            selector = seed.length && toSelector(tokens);
                                            if (!selector) {
                                                push.apply(results, seed);
                                                return results;
                                            }

                                            break;
                                        }
                                    }
                                }
                            }

                            // Compile and execute a filtering function if one is not provided
                            // Provide `match` to avoid retokenization if we modified the selector above
                            (
                                compiled || compile(selector, match)
                            )(seed, context, !documentIsHTML, results, !context || (rsibling.test(selector) && testContext(context.parentNode)) || context);
                            return results;
                        }

                        // One-time assignments

                        // Support: Android <=4.0 - 4.1+
                        // Sort stability
                        support.sortStable = expando.split('').sort(sortOrder).join('') === expando;

                        // Initialize against the default document
                        setDocument();

                        // Support: Android <=4.0 - 4.1+
                        // Detached nodes confoundingly follow *each other*
                        support.sortDetached = assert(function (el) {
                            // Should return 1, but returns 4 (following)
                            return (
                                el.compareDocumentPosition(document.createElement('fieldset')) & 1
                            );
                        });

                        jQuery.find = find;

                        // Deprecated
                        jQuery.expr[':'] = jQuery.expr.pseudos;
                        jQuery.unique = jQuery.uniqueSort;

                        // These have always been private, but they used to be documented as part of
                        // Sizzle so let's maintain them for now for backwards compatibility purposes.
                        find.compile = compile;
                        find.select = select;
                        find.setDocument = setDocument;
                        find.tokenize = tokenize;

                        find.escape = jQuery.escapeSelector;
                        find.getText = jQuery.text;
                        find.isXML = jQuery.isXMLDoc;
                        find.selectors = jQuery.expr;
                        find.support = jQuery.support;
                        find.uniqueSort = jQuery.uniqueSort;

                        /* eslint-enable */
                    })();

                    var dir = function (elem, dir, until) {
                        var matched = [],
                            truncate = until !== undefined;

                        while ((elem = elem[dir]) && elem.nodeType !== 9) {
                            if (elem.nodeType === 1) {
                                if (truncate && jQuery(elem).is(until)) {
                                    break;
                                }
                                matched.push(elem);
                            }
                        }
                        return matched;
                    };

                    var siblings = function (n, elem) {
                        var matched = [];

                        for (; n; n = n.nextSibling) {
                            if (n.nodeType === 1 && n !== elem) {
                                matched.push(n);
                            }
                        }

                        return matched;
                    };

                    var rneedsContext = jQuery.expr.match.needsContext;

                    var rsingleTag =
                        /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;

                    // Implement the identical functionality for filter and not
                    function winnow(elements, qualifier, not) {
                        if (isFunction(qualifier)) {
                            return jQuery.grep(elements, function (elem, i) {
                                return !!qualifier.call(elem, i, elem) !== not;
                            });
                        }

                        // Single element
                        if (qualifier.nodeType) {
                            return jQuery.grep(elements, function (elem) {
                                return (elem === qualifier) !== not;
                            });
                        }

                        // Arraylike of elements (jQuery, arguments, Array)
                        if (typeof qualifier !== 'string') {
                            return jQuery.grep(elements, function (elem) {
                                return indexOf.call(qualifier, elem) > -1 !== not;
                            });
                        }

                        // Filtered directly for both simple and complex selectors
                        return jQuery.filter(qualifier, elements, not);
                    }

                    jQuery.filter = function (expr, elems, not) {
                        var elem = elems[0];

                        if (not) {
                            expr = ':not(' + expr + ')';
                        }

                        if (elems.length === 1 && elem.nodeType === 1) {
                            return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
                        }

                        return jQuery.find.matches(
                            expr,
                            jQuery.grep(elems, function (elem) {
                                return elem.nodeType === 1;
                            }),
                        );
                    };

                    jQuery.fn.extend({
                        find: function (selector) {
                            var i,
                                ret,
                                len = this.length,
                                self = this;

                            if (typeof selector !== 'string') {
                                return this.pushStack(
                                    jQuery(selector).filter(function () {
                                        for (i = 0; i < len; i++) {
                                            if (jQuery.contains(self[i], this)) {
                                                return true;
                                            }
                                        }
                                    }),
                                );
                            }

                            ret = this.pushStack([]);

                            for (i = 0; i < len; i++) {
                                jQuery.find(selector, self[i], ret);
                            }

                            return len > 1 ? jQuery.uniqueSort(ret) : ret;
                        },
                        filter: function (selector) {
                            return this.pushStack(winnow(this, selector || [], false));
                        },
                        not: function (selector) {
                            return this.pushStack(winnow(this, selector || [], true));
                        },
                        is: function (selector) {
                            return !!winnow(
                                this,

                                // If this is a positional/relative selector, check membership in the returned set
                                // so $("p:first").is("p:last") won't return true for a doc with two "p".
                                typeof selector === 'string' && rneedsContext.test(selector)
                                    ? jQuery(selector)
                                    : selector || [],
                                false,
                            ).length;
                        },
                    });

                    // Initialize a jQuery object

                    // A central reference to the root jQuery(document)
                    var rootjQuery,
                        // A simple way to check for HTML strings
                        // Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)
                        // Strict HTML recognition (trac-11290: must start with <)
                        // Shortcut simple #id case for speed
                        rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
                        init = (jQuery.fn.init = function (selector, context, root) {
                            var match, elem;

                            // HANDLE: $(""), $(null), $(undefined), $(false)
                            if (!selector) {
                                return this;
                            }

                            // Method init() accepts an alternate rootjQuery
                            // so migrate can support jQuery.sub (gh-2101)
                            root = root || rootjQuery;

                            // Handle HTML strings
                            if (typeof selector === 'string') {
                                if (
                                    selector[0] === '<' &&
                                    selector[selector.length - 1] === '>' &&
                                    selector.length >= 3
                                ) {
                                    // Assume that strings that start and end with <> are HTML and skip the regex check
                                    match = [null, selector, null];
                                } else {
                                    match = rquickExpr.exec(selector);
                                }

                                // Match html or make sure no context is specified for #id
                                if (match && (match[1] || !context)) {
                                    // HANDLE: $(html) -> $(array)
                                    if (match[1]) {
                                        context = context instanceof jQuery ? context[0] : context;

                                        // Option to run scripts is true for back-compat
                                        // Intentionally let the error be thrown if parseHTML is not present
                                        jQuery.merge(
                                            this,
                                            jQuery.parseHTML(
                                                match[1],
                                                context && context.nodeType
                                                    ? context.ownerDocument || context
                                                    : document,
                                                true,
                                            ),
                                        );

                                        // HANDLE: $(html, props)
                                        if (
                                            rsingleTag.test(match[1]) &&
                                            jQuery.isPlainObject(context)
                                        ) {
                                            for (match in context) {
                                                // Properties of context are called as methods if possible
                                                if (isFunction(this[match])) {
                                                    this[match](context[match]);

                                                    // ...and otherwise set as attributes
                                                } else {
                                                    this.attr(match, context[match]);
                                                }
                                            }
                                        }

                                        return this;

                                        // HANDLE: $(#id)
                                    } else {
                                        elem = document.getElementById(match[2]);

                                        if (elem) {
                                            // Inject the element directly into the jQuery object
                                            this[0] = elem;
                                            this.length = 1;
                                        }
                                        return this;
                                    }

                                    // HANDLE: $(expr, $(...))
                                } else if (!context || context.jquery) {
                                    return (context || root).find(selector);

                                    // HANDLE: $(expr, context)
                                    // (which is just equivalent to: $(context).find(expr)
                                } else {
                                    return this.constructor(context).find(selector);
                                }

                                // HANDLE: $(DOMElement)
                            } else if (selector.nodeType) {
                                this[0] = selector;
                                this.length = 1;
                                return this;

                                // HANDLE: $(function)
                                // Shortcut for document ready
                            } else if (isFunction(selector)) {
                                return root.ready !== undefined
                                    ? root.ready(selector)
                                    : // Execute immediately if ready is not present
                                      selector(jQuery);
                            }

                            return jQuery.makeArray(selector, this);
                        });

                    // Give the init function the jQuery prototype for later instantiation
                    init.prototype = jQuery.fn;

                    // Initialize central reference
                    rootjQuery = jQuery(document);

                    var rparentsprev = /^(?:parents|prev(?:Until|All))/,
                        // Methods guaranteed to produce a unique set when starting from a unique set
                        guaranteedUnique = {
                            children: true,
                            contents: true,
                            next: true,
                            prev: true,
                        };

                    jQuery.fn.extend({
                        has: function (target) {
                            var targets = jQuery(target, this),
                                l = targets.length;

                            return this.filter(function () {
                                var i = 0;
                                for (; i < l; i++) {
                                    if (jQuery.contains(this, targets[i])) {
                                        return true;
                                    }
                                }
                            });
                        },

                        closest: function (selectors, context) {
                            var cur,
                                i = 0,
                                l = this.length,
                                matched = [],
                                targets = typeof selectors !== 'string' && jQuery(selectors);

                            // Positional selectors never match, since there's no _selection_ context
                            if (!rneedsContext.test(selectors)) {
                                for (; i < l; i++) {
                                    for (
                                        cur = this[i];
                                        cur && cur !== context;
                                        cur = cur.parentNode
                                    ) {
                                        // Always skip document fragments
                                        if (
                                            cur.nodeType < 11 &&
                                            (targets
                                                ? targets.index(cur) > -1
                                                : // Don't pass non-elements to jQuery#find
                                                  cur.nodeType === 1 &&
                                                  jQuery.find.matchesSelector(cur, selectors))
                                        ) {
                                            matched.push(cur);
                                            break;
                                        }
                                    }
                                }
                            }

                            return this.pushStack(
                                matched.length > 1 ? jQuery.uniqueSort(matched) : matched,
                            );
                        },

                        // Determine the position of an element within the set
                        index: function (elem) {
                            // No argument, return index in parent
                            if (!elem) {
                                return this[0] && this[0].parentNode
                                    ? this.first().prevAll().length
                                    : -1;
                            }

                            // Index in selector
                            if (typeof elem === 'string') {
                                return indexOf.call(jQuery(elem), this[0]);
                            }

                            // Locate the position of the desired element
                            return indexOf.call(
                                this,

                                // If it receives a jQuery object, the first element is used
                                elem.jquery ? elem[0] : elem,
                            );
                        },

                        add: function (selector, context) {
                            return this.pushStack(
                                jQuery.uniqueSort(
                                    jQuery.merge(this.get(), jQuery(selector, context)),
                                ),
                            );
                        },

                        addBack: function (selector) {
                            return this.add(
                                selector == null
                                    ? this.prevObject
                                    : this.prevObject.filter(selector),
                            );
                        },
                    });

                    function sibling(cur, dir) {
                        while ((cur = cur[dir]) && cur.nodeType !== 1) {}
                        return cur;
                    }

                    jQuery.each(
                        {
                            parent: function (elem) {
                                var parent = elem.parentNode;
                                return parent && parent.nodeType !== 11 ? parent : null;
                            },
                            parents: function (elem) {
                                return dir(elem, 'parentNode');
                            },
                            parentsUntil: function (elem, _i, until) {
                                return dir(elem, 'parentNode', until);
                            },
                            next: function (elem) {
                                return sibling(elem, 'nextSibling');
                            },
                            prev: function (elem) {
                                return sibling(elem, 'previousSibling');
                            },
                            nextAll: function (elem) {
                                return dir(elem, 'nextSibling');
                            },
                            prevAll: function (elem) {
                                return dir(elem, 'previousSibling');
                            },
                            nextUntil: function (elem, _i, until) {
                                return dir(elem, 'nextSibling', until);
                            },
                            prevUntil: function (elem, _i, until) {
                                return dir(elem, 'previousSibling', until);
                            },
                            siblings: function (elem) {
                                return siblings((elem.parentNode || {}).firstChild, elem);
                            },
                            children: function (elem) {
                                return siblings(elem.firstChild);
                            },
                            contents: function (elem) {
                                if (
                                    elem.contentDocument != null &&
                                    // Support: IE 11+
                                    // <object> elements with no `data` attribute has an object
                                    // `contentDocument` with a `null` prototype.
                                    getProto(elem.contentDocument)
                                ) {
                                    return elem.contentDocument;
                                }

                                // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
                                // Treat the template element as a regular one in browsers that
                                // don't support it.
                                if (nodeName(elem, 'template')) {
                                    elem = elem.content || elem;
                                }

                                return jQuery.merge([], elem.childNodes);
                            },
                        },
                        function (name, fn) {
                            jQuery.fn[name] = function (until, selector) {
                                var matched = jQuery.map(this, fn, until);

                                if (name.slice(-5) !== 'Until') {
                                    selector = until;
                                }

                                if (selector && typeof selector === 'string') {
                                    matched = jQuery.filter(selector, matched);
                                }

                                if (this.length > 1) {
                                    // Remove duplicates
                                    if (!guaranteedUnique[name]) {
                                        jQuery.uniqueSort(matched);
                                    }

                                    // Reverse order for parents* and prev-derivatives
                                    if (rparentsprev.test(name)) {
                                        matched.reverse();
                                    }
                                }

                                return this.pushStack(matched);
                            };
                        },
                    );
                    var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;

                    // Convert String-formatted options into Object-formatted ones
                    function createOptions(options) {
                        var object = {};
                        jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
                            object[flag] = true;
                        });
                        return object;
                    }

                    /*
                     * Create a callback list using the following parameters:
                     *
                     *	options: an optional list of space-separated options that will change how
                     *			the callback list behaves or a more traditional option object
                     *
                     * By default a callback list will act like an event callback list and can be
                     * "fired" multiple times.
                     *
                     * Possible options:
                     *
                     *	once:			will ensure the callback list can only be fired once (like a Deferred)
                     *
                     *	memory:			will keep track of previous values and will call any callback added
                     *					after the list has been fired right away with the latest "memorized"
                     *					values (like a Deferred)
                     *
                     *	unique:			will ensure a callback can only be added once (no duplicate in the list)
                     *
                     *	stopOnFalse:	interrupt callings when a callback returns false
                     *
                     */
                    jQuery.Callbacks = function (options) {
                        // Convert options from String-formatted to Object-formatted if needed
                        // (we check in cache first)
                        options =
                            typeof options === 'string'
                                ? createOptions(options)
                                : jQuery.extend({}, options);

                        var // Flag to know if list is currently firing
                            firing,
                            // Last fire value for non-forgettable lists
                            memory,
                            // Flag to know if list was already fired
                            fired,
                            // Flag to prevent firing
                            locked,
                            // Actual callback list
                            list = [],
                            // Queue of execution data for repeatable lists
                            queue = [],
                            // Index of currently firing callback (modified by add/remove as needed)
                            firingIndex = -1,
                            // Fire callbacks
                            fire = function () {
                                // Enforce single-firing
                                locked = locked || options.once;

                                // Execute callbacks for all pending executions,
                                // respecting firingIndex overrides and runtime changes
                                fired = firing = true;
                                for (; queue.length; firingIndex = -1) {
                                    memory = queue.shift();
                                    while (++firingIndex < list.length) {
                                        // Run callback and check for early termination
                                        if (
                                            list[firingIndex].apply(memory[0], memory[1]) ===
                                                false &&
                                            options.stopOnFalse
                                        ) {
                                            // Jump to end and forget the data so .add doesn't re-fire
                                            firingIndex = list.length;
                                            memory = false;
                                        }
                                    }
                                }

                                // Forget the data if we're done with it
                                if (!options.memory) {
                                    memory = false;
                                }

                                firing = false;

                                // Clean up if we're done firing for good
                                if (locked) {
                                    // Keep an empty list if we have data for future add calls
                                    if (memory) {
                                        list = [];

                                        // Otherwise, this object is spent
                                    } else {
                                        list = '';
                                    }
                                }
                            },
                            // Actual Callbacks object
                            self = {
                                // Add a callback or a collection of callbacks to the list
                                add: function () {
                                    if (list) {
                                        // If we have memory from a past run, we should fire after adding
                                        if (memory && !firing) {
                                            firingIndex = list.length - 1;
                                            queue.push(memory);
                                        }

                                        (function add(args) {
                                            jQuery.each(args, function (_, arg) {
                                                if (isFunction(arg)) {
                                                    if (!options.unique || !self.has(arg)) {
                                                        list.push(arg);
                                                    }
                                                } else if (
                                                    arg &&
                                                    arg.length &&
                                                    toType(arg) !== 'string'
                                                ) {
                                                    // Inspect recursively
                                                    add(arg);
                                                }
                                            });
                                        })(arguments);

                                        if (memory && !firing) {
                                            fire();
                                        }
                                    }
                                    return this;
                                },

                                // Remove a callback from the list
                                remove: function () {
                                    jQuery.each(arguments, function (_, arg) {
                                        var index;
                                        while ((index = jQuery.inArray(arg, list, index)) > -1) {
                                            list.splice(index, 1);

                                            // Handle firing indexes
                                            if (index <= firingIndex) {
                                                firingIndex--;
                                            }
                                        }
                                    });
                                    return this;
                                },

                                // Check if a given callback is in the list.
                                // If no argument is given, return whether or not list has callbacks attached.
                                has: function (fn) {
                                    return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
                                },

                                // Remove all callbacks from the list
                                empty: function () {
                                    if (list) {
                                        list = [];
                                    }
                                    return this;
                                },

                                // Disable .fire and .add
                                // Abort any current/pending executions
                                // Clear all callbacks and values
                                disable: function () {
                                    locked = queue = [];
                                    list = memory = '';
                                    return this;
                                },
                                disabled: function () {
                                    return !list;
                                },

                                // Disable .fire
                                // Also disable .add unless we have memory (since it would have no effect)
                                // Abort any pending executions
                                lock: function () {
                                    locked = queue = [];
                                    if (!memory && !firing) {
                                        list = memory = '';
                                    }
                                    return this;
                                },
                                locked: function () {
                                    return !!locked;
                                },

                                // Call all callbacks with the given context and arguments
                                fireWith: function (context, args) {
                                    if (!locked) {
                                        args = args || [];
                                        args = [context, args.slice ? args.slice() : args];
                                        queue.push(args);
                                        if (!firing) {
                                            fire();
                                        }
                                    }
                                    return this;
                                },

                                // Call all the callbacks with the given arguments
                                fire: function () {
                                    self.fireWith(this, arguments);
                                    return this;
                                },

                                // To know if the callbacks have already been called at least once
                                fired: function () {
                                    return !!fired;
                                },
                            };

                        return self;
                    };

                    function Identity(v) {
                        return v;
                    }
                    function Thrower(ex) {
                        throw ex;
                    }

                    function adoptValue(value, resolve, reject, noValue) {
                        var method;

                        try {
                            // Check for promise aspect first to privilege synchronous behavior
                            if (value && isFunction((method = value.promise))) {
                                method.call(value).done(resolve).fail(reject);

                                // Other thenables
                            } else if (value && isFunction((method = value.then))) {
                                method.call(value, resolve, reject);

                                // Other non-thenables
                            } else {
                                // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
                                // * false: [ value ].slice( 0 ) => resolve( value )
                                // * true: [ value ].slice( 1 ) => resolve()
                                resolve.apply(undefined, [value].slice(noValue));
                            }

                            // For Promises/A+, convert exceptions into rejections
                            // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
                            // Deferred#then to conditionally suppress rejection.
                        } catch (value) {
                            // Support: Android 4.0 only
                            // Strict mode functions invoked without .call/.apply get global-object context
                            reject.apply(undefined, [value]);
                        }
                    }

                    jQuery.extend({
                        Deferred: function (func) {
                            var tuples = [
                                    // action, add listener, callbacks,
                                    // ... .then handlers, argument index, [final state]
                                    [
                                        'notify',
                                        'progress',
                                        jQuery.Callbacks('memory'),
                                        jQuery.Callbacks('memory'),
                                        2,
                                    ],
                                    [
                                        'resolve',
                                        'done',
                                        jQuery.Callbacks('once memory'),
                                        jQuery.Callbacks('once memory'),
                                        0,
                                        'resolved',
                                    ],
                                    [
                                        'reject',
                                        'fail',
                                        jQuery.Callbacks('once memory'),
                                        jQuery.Callbacks('once memory'),
                                        1,
                                        'rejected',
                                    ],
                                ],
                                state = 'pending',
                                promise = {
                                    state: function () {
                                        return state;
                                    },
                                    always: function () {
                                        deferred.done(arguments).fail(arguments);
                                        return this;
                                    },
                                    catch: function (fn) {
                                        return promise.then(null, fn);
                                    },

                                    // Keep pipe for back-compat
                                    pipe: function (/* fnDone, fnFail, fnProgress */) {
                                        var fns = arguments;

                                        return jQuery
                                            .Deferred(function (newDefer) {
                                                jQuery.each(tuples, function (_i, tuple) {
                                                    // Map tuples (progress, done, fail) to arguments (done, fail, progress)
                                                    var fn =
                                                        isFunction(fns[tuple[4]]) && fns[tuple[4]];

                                                    // deferred.progress(function() { bind to newDefer or newDefer.notify })
                                                    // deferred.done(function() { bind to newDefer or newDefer.resolve })
                                                    // deferred.fail(function() { bind to newDefer or newDefer.reject })
                                                    deferred[tuple[1]](function () {
                                                        var returned =
                                                            fn && fn.apply(this, arguments);
                                                        if (
                                                            returned &&
                                                            isFunction(returned.promise)
                                                        ) {
                                                            returned
                                                                .promise()
                                                                .progress(newDefer.notify)
                                                                .done(newDefer.resolve)
                                                                .fail(newDefer.reject);
                                                        } else {
                                                            newDefer[tuple[0] + 'With'](
                                                                this,
                                                                fn ? [returned] : arguments,
                                                            );
                                                        }
                                                    });
                                                });
                                                fns = null;
                                            })
                                            .promise();
                                    },
                                    then: function (onFulfilled, onRejected, onProgress) {
                                        var maxDepth = 0;
                                        function resolve(depth, deferred, handler, special) {
                                            return function () {
                                                var that = this,
                                                    args = arguments,
                                                    mightThrow = function () {
                                                        var returned, then;

                                                        // Support: Promises/A+ section 2.3.3.3.3
                                                        // https://promisesaplus.com/#point-59
                                                        // Ignore double-resolution attempts
                                                        if (depth < maxDepth) {
                                                            return;
                                                        }

                                                        returned = handler.apply(that, args);

                                                        // Support: Promises/A+ section 2.3.1
                                                        // https://promisesaplus.com/#point-48
                                                        if (returned === deferred.promise()) {
                                                            throw new TypeError(
                                                                'Thenable self-resolution',
                                                            );
                                                        }

                                                        // Support: Promises/A+ sections 2.3.3.1, 3.5
                                                        // https://promisesaplus.com/#point-54
                                                        // https://promisesaplus.com/#point-75
                                                        // Retrieve `then` only once
                                                        then =
                                                            returned &&
                                                            // Support: Promises/A+ section 2.3.4
                                                            // https://promisesaplus.com/#point-64
                                                            // Only check objects and functions for thenability
                                                            (typeof returned === 'object' ||
                                                                typeof returned === 'function') &&
                                                            returned.then;

                                                        // Handle a returned thenable
                                                        if (isFunction(then)) {
                                                            // Special processors (notify) just wait for resolution
                                                            if (special) {
                                                                then.call(
                                                                    returned,
                                                                    resolve(
                                                                        maxDepth,
                                                                        deferred,
                                                                        Identity,
                                                                        special,
                                                                    ),
                                                                    resolve(
                                                                        maxDepth,
                                                                        deferred,
                                                                        Thrower,
                                                                        special,
                                                                    ),
                                                                );

                                                                // Normal processors (resolve) also hook into progress
                                                            } else {
                                                                // ...and disregard older resolution values
                                                                maxDepth++;

                                                                then.call(
                                                                    returned,
                                                                    resolve(
                                                                        maxDepth,
                                                                        deferred,
                                                                        Identity,
                                                                        special,
                                                                    ),
                                                                    resolve(
                                                                        maxDepth,
                                                                        deferred,
                                                                        Thrower,
                                                                        special,
                                                                    ),
                                                                    resolve(
                                                                        maxDepth,
                                                                        deferred,
                                                                        Identity,
                                                                        deferred.notifyWith,
                                                                    ),
                                                                );
                                                            }

                                                            // Handle all other returned values
                                                        } else {
                                                            // Only substitute handlers pass on context
                                                            // and multiple values (non-spec behavior)
                                                            if (handler !== Identity) {
                                                                that = undefined;
                                                                args = [returned];
                                                            }

                                                            // Process the value(s)
                                                            // Default process is resolve
                                                            (special || deferred.resolveWith)(
                                                                that,
                                                                args,
                                                            );
                                                        }
                                                    },
                                                    // Only normal processors (resolve) catch and reject exceptions
                                                    process = special
                                                        ? mightThrow
                                                        : function () {
                                                              try {
                                                                  mightThrow();
                                                              } catch (e) {
                                                                  if (
                                                                      jQuery.Deferred.exceptionHook
                                                                  ) {
                                                                      jQuery.Deferred.exceptionHook(
                                                                          e,
                                                                          process.error,
                                                                      );
                                                                  }

                                                                  // Support: Promises/A+ section 2.3.3.3.4.1
                                                                  // https://promisesaplus.com/#point-61
                                                                  // Ignore post-resolution exceptions
                                                                  if (depth + 1 >= maxDepth) {
                                                                      // Only substitute handlers pass on context
                                                                      // and multiple values (non-spec behavior)
                                                                      if (handler !== Thrower) {
                                                                          that = undefined;
                                                                          args = [e];
                                                                      }

                                                                      deferred.rejectWith(
                                                                          that,
                                                                          args,
                                                                      );
                                                                  }
                                                              }
                                                          };

                                                // Support: Promises/A+ section 2.3.3.3.1
                                                // https://promisesaplus.com/#point-57
                                                // Re-resolve promises immediately to dodge false rejection from
                                                // subsequent errors
                                                if (depth) {
                                                    process();
                                                } else {
                                                    // Call an optional hook to record the error, in case of exception
                                                    // since it's otherwise lost when execution goes async
                                                    if (jQuery.Deferred.getErrorHook) {
                                                        process.error =
                                                            jQuery.Deferred.getErrorHook();

                                                        // The deprecated alias of the above. While the name suggests
                                                        // returning the stack, not an error instance, jQuery just passes
                                                        // it directly to `console.warn` so both will work; an instance
                                                        // just better cooperates with source maps.
                                                    } else if (jQuery.Deferred.getStackHook) {
                                                        process.error =
                                                            jQuery.Deferred.getStackHook();
                                                    }
                                                    window.setTimeout(process);
                                                }
                                            };
                                        }

                                        return jQuery
                                            .Deferred(function (newDefer) {
                                                // progress_handlers.add( ... )
                                                tuples[0][3].add(
                                                    resolve(
                                                        0,
                                                        newDefer,
                                                        isFunction(onProgress)
                                                            ? onProgress
                                                            : Identity,
                                                        newDefer.notifyWith,
                                                    ),
                                                );

                                                // fulfilled_handlers.add( ... )
                                                tuples[1][3].add(
                                                    resolve(
                                                        0,
                                                        newDefer,
                                                        isFunction(onFulfilled)
                                                            ? onFulfilled
                                                            : Identity,
                                                    ),
                                                );

                                                // rejected_handlers.add( ... )
                                                tuples[2][3].add(
                                                    resolve(
                                                        0,
                                                        newDefer,
                                                        isFunction(onRejected)
                                                            ? onRejected
                                                            : Thrower,
                                                    ),
                                                );
                                            })
                                            .promise();
                                    },

                                    // Get a promise for this deferred
                                    // If obj is provided, the promise aspect is added to the object
                                    promise: function (obj) {
                                        return obj != null ? jQuery.extend(obj, promise) : promise;
                                    },
                                },
                                deferred = {};

                            // Add list-specific methods
                            jQuery.each(tuples, function (i, tuple) {
                                var list = tuple[2],
                                    stateString = tuple[5];

                                // promise.progress = list.add
                                // promise.done = list.add
                                // promise.fail = list.add
                                promise[tuple[1]] = list.add;

                                // Handle state
                                if (stateString) {
                                    list.add(
                                        function () {
                                            // state = "resolved" (i.e., fulfilled)
                                            // state = "rejected"
                                            state = stateString;
                                        },

                                        // rejected_callbacks.disable
                                        // fulfilled_callbacks.disable
                                        tuples[3 - i][2].disable,

                                        // rejected_handlers.disable
                                        // fulfilled_handlers.disable
                                        tuples[3 - i][3].disable,

                                        // progress_callbacks.lock
                                        tuples[0][2].lock,

                                        // progress_handlers.lock
                                        tuples[0][3].lock,
                                    );
                                }

                                // progress_handlers.fire
                                // fulfilled_handlers.fire
                                // rejected_handlers.fire
                                list.add(tuple[3].fire);

                                // deferred.notify = function() { deferred.notifyWith(...) }
                                // deferred.resolve = function() { deferred.resolveWith(...) }
                                // deferred.reject = function() { deferred.rejectWith(...) }
                                deferred[tuple[0]] = function () {
                                    deferred[tuple[0] + 'With'](
                                        this === deferred ? undefined : this,
                                        arguments,
                                    );
                                    return this;
                                };

                                // deferred.notifyWith = list.fireWith
                                // deferred.resolveWith = list.fireWith
                                // deferred.rejectWith = list.fireWith
                                deferred[tuple[0] + 'With'] = list.fireWith;
                            });

                            // Make the deferred a promise
                            promise.promise(deferred);

                            // Call given func if any
                            if (func) {
                                func.call(deferred, deferred);
                            }

                            // All done!
                            return deferred;
                        },

                        // Deferred helper
                        when: function (singleValue) {
                            var // count of uncompleted subordinates
                                remaining = arguments.length,
                                // count of unprocessed arguments
                                i = remaining,
                                // subordinate fulfillment data
                                resolveContexts = Array(i),
                                resolveValues = slice.call(arguments),
                                // the primary Deferred
                                primary = jQuery.Deferred(),
                                // subordinate callback factory
                                updateFunc = function (i) {
                                    return function (value) {
                                        resolveContexts[i] = this;
                                        resolveValues[i] =
                                            arguments.length > 1 ? slice.call(arguments) : value;
                                        if (!--remaining) {
                                            primary.resolveWith(resolveContexts, resolveValues);
                                        }
                                    };
                                };

                            // Single- and empty arguments are adopted like Promise.resolve
                            if (remaining <= 1) {
                                adoptValue(
                                    singleValue,
                                    primary.done(updateFunc(i)).resolve,
                                    primary.reject,
                                    !remaining,
                                );

                                // Use .then() to unwrap secondary thenables (cf. gh-3000)
                                if (
                                    primary.state() === 'pending' ||
                                    isFunction(resolveValues[i] && resolveValues[i].then)
                                ) {
                                    return primary.then();
                                }
                            }

                            // Multiple arguments are aggregated like Promise.all array elements
                            while (i--) {
                                adoptValue(resolveValues[i], updateFunc(i), primary.reject);
                            }

                            return primary.promise();
                        },
                    });

                    // These usually indicate a programmer mistake during development,
                    // warn about them ASAP rather than swallowing them by default.
                    var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

                    // If `jQuery.Deferred.getErrorHook` is defined, `asyncError` is an error
                    // captured before the async barrier to get the original error cause
                    // which may otherwise be hidden.
                    jQuery.Deferred.exceptionHook = function (error, asyncError) {
                        // Support: IE 8 - 9 only
                        // Console exists when dev tools are open, which can happen at any time
                        if (
                            window.console &&
                            window.console.warn &&
                            error &&
                            rerrorNames.test(error.name)
                        ) {
                            window.console.warn(
                                'jQuery.Deferred exception: ' + error.message,
                                error.stack,
                                asyncError,
                            );
                        }
                    };

                    jQuery.readyException = function (error) {
                        window.setTimeout(function () {
                            throw error;
                        });
                    };

                    // The deferred used on DOM ready
                    var readyList = jQuery.Deferred();

                    jQuery.fn.ready = function (fn) {
                        readyList
                            .then(fn)

                            // Wrap jQuery.readyException in a function so that the lookup
                            // happens at the time of error handling instead of callback
                            // registration.
                            .catch(function (error) {
                                jQuery.readyException(error);
                            });

                        return this;
                    };

                    jQuery.extend({
                        // Is the DOM ready to be used? Set to true once it occurs.
                        isReady: false,

                        // A counter to track how many items to wait for before
                        // the ready event fires. See trac-6781
                        readyWait: 1,

                        // Handle when the DOM is ready
                        ready: function (wait) {
                            // Abort if there are pending holds or we're already ready
                            if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                                return;
                            }

                            // Remember that the DOM is ready
                            jQuery.isReady = true;

                            // If a normal DOM Ready event fired, decrement, and wait if need be
                            if (wait !== true && --jQuery.readyWait > 0) {
                                return;
                            }

                            // If there are functions bound, to execute
                            readyList.resolveWith(document, [jQuery]);
                        },
                    });

                    jQuery.ready.then = readyList.then;

                    // The ready event handler and self cleanup method
                    function completed() {
                        document.removeEventListener('DOMContentLoaded', completed);
                        window.removeEventListener('load', completed);
                        jQuery.ready();
                    }

                    // Catch cases where $(document).ready() is called
                    // after the browser event has already occurred.
                    // Support: IE <=9 - 10 only
                    // Older IE sometimes signals "interactive" too soon
                    if (
                        document.readyState === 'complete' ||
                        (document.readyState !== 'loading' && !document.documentElement.doScroll)
                    ) {
                        // Handle it asynchronously to allow scripts the opportunity to delay ready
                        window.setTimeout(jQuery.ready);
                    } else {
                        // Use the handy event callback
                        document.addEventListener('DOMContentLoaded', completed);

                        // A fallback to window.onload, that will always work
                        window.addEventListener('load', completed);
                    }

                    // Multifunctional method to get and set values of a collection
                    // The value/s can optionally be executed if it's a function
                    var access = function (elems, fn, key, value, chainable, emptyGet, raw) {
                        var i = 0,
                            len = elems.length,
                            bulk = key == null;

                        // Sets many values
                        if (toType(key) === 'object') {
                            chainable = true;
                            for (i in key) {
                                access(elems, fn, i, key[i], true, emptyGet, raw);
                            }

                            // Sets one value
                        } else if (value !== undefined) {
                            chainable = true;

                            if (!isFunction(value)) {
                                raw = true;
                            }

                            if (bulk) {
                                // Bulk operations run against the entire set
                                if (raw) {
                                    fn.call(elems, value);
                                    fn = null;

                                    // ...except when executing function values
                                } else {
                                    bulk = fn;
                                    fn = function (elem, _key, value) {
                                        return bulk.call(jQuery(elem), value);
                                    };
                                }
                            }

                            if (fn) {
                                for (; i < len; i++) {
                                    fn(
                                        elems[i],
                                        key,
                                        raw ? value : value.call(elems[i], i, fn(elems[i], key)),
                                    );
                                }
                            }
                        }

                        if (chainable) {
                            return elems;
                        }

                        // Gets
                        if (bulk) {
                            return fn.call(elems);
                        }

                        return len ? fn(elems[0], key) : emptyGet;
                    };

                    // Matches dashed string for camelizing
                    var rmsPrefix = /^-ms-/,
                        rdashAlpha = /-([a-z])/g;

                    // Used by camelCase as callback to replace()
                    function fcamelCase(_all, letter) {
                        return letter.toUpperCase();
                    }

                    // Convert dashed to camelCase; used by the css and data modules
                    // Support: IE <=9 - 11, Edge 12 - 15
                    // Microsoft forgot to hump their vendor prefix (trac-9572)
                    function camelCase(string) {
                        return string.replace(rmsPrefix, 'ms-').replace(rdashAlpha, fcamelCase);
                    }
                    var acceptData = function (owner) {
                        // Accepts only:
                        //  - Node
                        //    - Node.ELEMENT_NODE
                        //    - Node.DOCUMENT_NODE
                        //  - Object
                        //    - Any
                        return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
                    };

                    function Data() {
                        this.expando = jQuery.expando + Data.uid++;
                    }

                    Data.uid = 1;

                    Data.prototype = {
                        cache: function (owner) {
                            // Check if the owner object already has a cache
                            var value = owner[this.expando];

                            // If not, create one
                            if (!value) {
                                value = {};

                                // We can accept data for non-element nodes in modern browsers,
                                // but we should not, see trac-8335.
                                // Always return an empty object.
                                if (acceptData(owner)) {
                                    // If it is a node unlikely to be stringify-ed or looped over
                                    // use plain assignment
                                    if (owner.nodeType) {
                                        owner[this.expando] = value;

                                        // Otherwise secure it in a non-enumerable property
                                        // configurable must be true to allow the property to be
                                        // deleted when data is removed
                                    } else {
                                        Object.defineProperty(owner, this.expando, {
                                            value: value,
                                            configurable: true,
                                        });
                                    }
                                }
                            }

                            return value;
                        },
                        set: function (owner, data, value) {
                            var prop,
                                cache = this.cache(owner);

                            // Handle: [ owner, key, value ] args
                            // Always use camelCase key (gh-2257)
                            if (typeof data === 'string') {
                                cache[camelCase(data)] = value;

                                // Handle: [ owner, { properties } ] args
                            } else {
                                // Copy the properties one-by-one to the cache object
                                for (prop in data) {
                                    cache[camelCase(prop)] = data[prop];
                                }
                            }
                            return cache;
                        },
                        get: function (owner, key) {
                            return key === undefined
                                ? this.cache(owner)
                                : // Always use camelCase key (gh-2257)
                                  owner[this.expando] && owner[this.expando][camelCase(key)];
                        },
                        access: function (owner, key, value) {
                            // In cases where either:
                            //
                            //   1. No key was specified
                            //   2. A string key was specified, but no value provided
                            //
                            // Take the "read" path and allow the get method to determine
                            // which value to return, respectively either:
                            //
                            //   1. The entire cache object
                            //   2. The data stored at the key
                            //
                            if (
                                key === undefined ||
                                (key && typeof key === 'string' && value === undefined)
                            ) {
                                return this.get(owner, key);
                            }

                            // When the key is not a string, or both a key and value
                            // are specified, set or extend (existing objects) with either:
                            //
                            //   1. An object of properties
                            //   2. A key and value
                            //
                            this.set(owner, key, value);

                            // Since the "set" path can have two possible entry points
                            // return the expected data based on which path was taken[*]
                            return value !== undefined ? value : key;
                        },
                        remove: function (owner, key) {
                            var i,
                                cache = owner[this.expando];

                            if (cache === undefined) {
                                return;
                            }

                            if (key !== undefined) {
                                // Support array or space separated string of keys
                                if (Array.isArray(key)) {
                                    // If key is an array of keys...
                                    // We always set camelCase keys, so remove that.
                                    key = key.map(camelCase);
                                } else {
                                    key = camelCase(key);

                                    // If a key with the spaces exists, use it.
                                    // Otherwise, create an array by matching non-whitespace
                                    key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
                                }

                                i = key.length;

                                while (i--) {
                                    delete cache[key[i]];
                                }
                            }

                            // Remove the expando if there's no more data
                            if (key === undefined || jQuery.isEmptyObject(cache)) {
                                // Support: Chrome <=35 - 45
                                // Webkit & Blink performance suffers when deleting properties
                                // from DOM nodes, so set to undefined instead
                                // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
                                if (owner.nodeType) {
                                    owner[this.expando] = undefined;
                                } else {
                                    delete owner[this.expando];
                                }
                            }
                        },
                        hasData: function (owner) {
                            var cache = owner[this.expando];
                            return cache !== undefined && !jQuery.isEmptyObject(cache);
                        },
                    };
                    var dataPriv = new Data();

                    var dataUser = new Data();

                    //	Implementation Summary
                    //
                    //	1. Enforce API surface and semantic compatibility with 1.9.x branch
                    //	2. Improve the module's maintainability by reducing the storage
                    //		paths to a single mechanism.
                    //	3. Use the same single mechanism to support "private" and "user" data.
                    //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
                    //	5. Avoid exposing implementation details on user objects (eg. expando properties)
                    //	6. Provide a clear path for implementation upgrade to WeakMap in 2014

                    var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
                        rmultiDash = /[A-Z]/g;

                    function getData(data) {
                        if (data === 'true') {
                            return true;
                        }

                        if (data === 'false') {
                            return false;
                        }

                        if (data === 'null') {
                            return null;
                        }

                        // Only convert to a number if it doesn't change the string
                        if (data === +data + '') {
                            return +data;
                        }

                        if (rbrace.test(data)) {
                            return JSON.parse(data);
                        }

                        return data;
                    }

                    function dataAttr(elem, key, data) {
                        var name;

                        // If nothing was found internally, try to fetch any
                        // data from the HTML5 data-* attribute
                        if (data === undefined && elem.nodeType === 1) {
                            name = 'data-' + key.replace(rmultiDash, '-$&').toLowerCase();
                            data = elem.getAttribute(name);

                            if (typeof data === 'string') {
                                try {
                                    data = getData(data);
                                } catch (e) {}

                                // Make sure we set the data so it isn't changed later
                                dataUser.set(elem, key, data);
                            } else {
                                data = undefined;
                            }
                        }
                        return data;
                    }

                    jQuery.extend({
                        hasData: function (elem) {
                            return dataUser.hasData(elem) || dataPriv.hasData(elem);
                        },

                        data: function (elem, name, data) {
                            return dataUser.access(elem, name, data);
                        },

                        removeData: function (elem, name) {
                            dataUser.remove(elem, name);
                        },

                        // TODO: Now that all calls to _data and _removeData have been replaced
                        // with direct calls to dataPriv methods, these can be deprecated.
                        _data: function (elem, name, data) {
                            return dataPriv.access(elem, name, data);
                        },

                        _removeData: function (elem, name) {
                            dataPriv.remove(elem, name);
                        },
                    });

                    jQuery.fn.extend({
                        data: function (key, value) {
                            var i,
                                name,
                                data,
                                elem = this[0],
                                attrs = elem && elem.attributes;

                            // Gets all values
                            if (key === undefined) {
                                if (this.length) {
                                    data = dataUser.get(elem);

                                    if (
                                        elem.nodeType === 1 &&
                                        !dataPriv.get(elem, 'hasDataAttrs')
                                    ) {
                                        i = attrs.length;
                                        while (i--) {
                                            // Support: IE 11 only
                                            // The attrs elements can be null (trac-14894)
                                            if (attrs[i]) {
                                                name = attrs[i].name;
                                                if (name.indexOf('data-') === 0) {
                                                    name = camelCase(name.slice(5));
                                                    dataAttr(elem, name, data[name]);
                                                }
                                            }
                                        }
                                        dataPriv.set(elem, 'hasDataAttrs', true);
                                    }
                                }

                                return data;
                            }

                            // Sets multiple values
                            if (typeof key === 'object') {
                                return this.each(function () {
                                    dataUser.set(this, key);
                                });
                            }

                            return access(
                                this,
                                function (value) {
                                    var data;

                                    // The calling jQuery object (element matches) is not empty
                                    // (and therefore has an element appears at this[ 0 ]) and the
                                    // `value` parameter was not undefined. An empty jQuery object
                                    // will result in `undefined` for elem = this[ 0 ] which will
                                    // throw an exception if an attempt to read a data cache is made.
                                    if (elem && value === undefined) {
                                        // Attempt to get data from the cache
                                        // The key will always be camelCased in Data
                                        data = dataUser.get(elem, key);
                                        if (data !== undefined) {
                                            return data;
                                        }

                                        // Attempt to "discover" the data in
                                        // HTML5 custom data-* attrs
                                        data = dataAttr(elem, key);
                                        if (data !== undefined) {
                                            return data;
                                        }

                                        // We tried really hard, but the data doesn't exist.
                                        return;
                                    }

                                    // Set the data...
                                    this.each(function () {
                                        // We always store the camelCased key
                                        dataUser.set(this, key, value);
                                    });
                                },
                                null,
                                value,
                                arguments.length > 1,
                                null,
                                true,
                            );
                        },

                        removeData: function (key) {
                            return this.each(function () {
                                dataUser.remove(this, key);
                            });
                        },
                    });

                    jQuery.extend({
                        queue: function (elem, type, data) {
                            var queue;

                            if (elem) {
                                type = (type || 'fx') + 'queue';
                                queue = dataPriv.get(elem, type);

                                // Speed up dequeue by getting out quickly if this is just a lookup
                                if (data) {
                                    if (!queue || Array.isArray(data)) {
                                        queue = dataPriv.access(elem, type, jQuery.makeArray(data));
                                    } else {
                                        queue.push(data);
                                    }
                                }
                                return queue || [];
                            }
                        },

                        dequeue: function (elem, type) {
                            type = type || 'fx';

                            var queue = jQuery.queue(elem, type),
                                startLength = queue.length,
                                fn = queue.shift(),
                                hooks = jQuery._queueHooks(elem, type),
                                next = function () {
                                    jQuery.dequeue(elem, type);
                                };

                            // If the fx queue is dequeued, always remove the progress sentinel
                            if (fn === 'inprogress') {
                                fn = queue.shift();
                                startLength--;
                            }

                            if (fn) {
                                // Add a progress sentinel to prevent the fx queue from being
                                // automatically dequeued
                                if (type === 'fx') {
                                    queue.unshift('inprogress');
                                }

                                // Clear up the last queue stop function
                                delete hooks.stop;
                                fn.call(elem, next, hooks);
                            }

                            if (!startLength && hooks) {
                                hooks.empty.fire();
                            }
                        },

                        // Not public - generate a queueHooks object, or return the current one
                        _queueHooks: function (elem, type) {
                            var key = type + 'queueHooks';
                            return (
                                dataPriv.get(elem, key) ||
                                dataPriv.access(elem, key, {
                                    empty: jQuery.Callbacks('once memory').add(function () {
                                        dataPriv.remove(elem, [type + 'queue', key]);
                                    }),
                                })
                            );
                        },
                    });

                    jQuery.fn.extend({
                        queue: function (type, data) {
                            var setter = 2;

                            if (typeof type !== 'string') {
                                data = type;
                                type = 'fx';
                                setter--;
                            }

                            if (arguments.length < setter) {
                                return jQuery.queue(this[0], type);
                            }

                            return data === undefined
                                ? this
                                : this.each(function () {
                                      var queue = jQuery.queue(this, type, data);

                                      // Ensure a hooks for this queue
                                      jQuery._queueHooks(this, type);

                                      if (type === 'fx' && queue[0] !== 'inprogress') {
                                          jQuery.dequeue(this, type);
                                      }
                                  });
                        },
                        dequeue: function (type) {
                            return this.each(function () {
                                jQuery.dequeue(this, type);
                            });
                        },
                        clearQueue: function (type) {
                            return this.queue(type || 'fx', []);
                        },

                        // Get a promise resolved when queues of a certain type
                        // are emptied (fx is the type by default)
                        promise: function (type, obj) {
                            var tmp,
                                count = 1,
                                defer = jQuery.Deferred(),
                                elements = this,
                                i = this.length,
                                resolve = function () {
                                    if (!--count) {
                                        defer.resolveWith(elements, [elements]);
                                    }
                                };

                            if (typeof type !== 'string') {
                                obj = type;
                                type = undefined;
                            }
                            type = type || 'fx';

                            while (i--) {
                                tmp = dataPriv.get(elements[i], type + 'queueHooks');
                                if (tmp && tmp.empty) {
                                    count++;
                                    tmp.empty.add(resolve);
                                }
                            }
                            resolve();
                            return defer.promise(obj);
                        },
                    });
                    var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;

                    var rcssNum = new RegExp('^(?:([+-])=|)(' + pnum + ')([a-z%]*)$', 'i');

                    var cssExpand = ['Top', 'Right', 'Bottom', 'Left'];

                    var documentElement = document.documentElement;

                    var isAttached = function (elem) {
                            return jQuery.contains(elem.ownerDocument, elem);
                        },
                        composed = { composed: true };

                    // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
                    // Check attachment across shadow DOM boundaries when possible (gh-3504)
                    // Support: iOS 10.0-10.2 only
                    // Early iOS 10 versions support `attachShadow` but not `getRootNode`,
                    // leading to errors. We need to check for `getRootNode`.
                    if (documentElement.getRootNode) {
                        isAttached = function (elem) {
                            return (
                                jQuery.contains(elem.ownerDocument, elem) ||
                                elem.getRootNode(composed) === elem.ownerDocument
                            );
                        };
                    }
                    var isHiddenWithinTree = function (elem, el) {
                        // isHiddenWithinTree might be called from jQuery#filter function;
                        // in that case, element will be second argument
                        elem = el || elem;

                        // Inline style trumps all
                        return (
                            elem.style.display === 'none' ||
                            (elem.style.display === '' &&
                                // Otherwise, check computed style
                                // Support: Firefox <=43 - 45
                                // Disconnected elements can have computed display: none, so first confirm that elem is
                                // in the document.
                                isAttached(elem) &&
                                jQuery.css(elem, 'display') === 'none')
                        );
                    };

                    function adjustCSS(elem, prop, valueParts, tween) {
                        var adjusted,
                            scale,
                            maxIterations = 20,
                            currentValue = tween
                                ? function () {
                                      return tween.cur();
                                  }
                                : function () {
                                      return jQuery.css(elem, prop, '');
                                  },
                            initial = currentValue(),
                            unit =
                                (valueParts && valueParts[3]) ||
                                (jQuery.cssNumber[prop] ? '' : 'px'),
                            // Starting value computation is required for potential unit mismatches
                            initialInUnit =
                                elem.nodeType &&
                                (jQuery.cssNumber[prop] || (unit !== 'px' && +initial)) &&
                                rcssNum.exec(jQuery.css(elem, prop));

                        if (initialInUnit && initialInUnit[3] !== unit) {
                            // Support: Firefox <=54
                            // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
                            initial = initial / 2;

                            // Trust units reported by jQuery.css
                            unit = unit || initialInUnit[3];

                            // Iteratively approximate from a nonzero starting point
                            initialInUnit = +initial || 1;

                            while (maxIterations--) {
                                // Evaluate and update our best guess (doubling guesses that zero out).
                                // Finish if the scale equals or crosses 1 (making the old*new product non-positive).
                                jQuery.style(elem, prop, initialInUnit + unit);
                                if (
                                    (1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <=
                                    0
                                ) {
                                    maxIterations = 0;
                                }
                                initialInUnit = initialInUnit / scale;
                            }

                            initialInUnit = initialInUnit * 2;
                            jQuery.style(elem, prop, initialInUnit + unit);

                            // Make sure we update the tween properties later on
                            valueParts = valueParts || [];
                        }

                        if (valueParts) {
                            initialInUnit = +initialInUnit || +initial || 0;

                            // Apply relative offset (+=/-=) if specified
                            adjusted = valueParts[1]
                                ? initialInUnit + (valueParts[1] + 1) * valueParts[2]
                                : +valueParts[2];
                            if (tween) {
                                tween.unit = unit;
                                tween.start = initialInUnit;
                                tween.end = adjusted;
                            }
                        }
                        return adjusted;
                    }

                    var defaultDisplayMap = {};

                    function getDefaultDisplay(elem) {
                        var temp,
                            doc = elem.ownerDocument,
                            nodeName = elem.nodeName,
                            display = defaultDisplayMap[nodeName];

                        if (display) {
                            return display;
                        }

                        temp = doc.body.appendChild(doc.createElement(nodeName));
                        display = jQuery.css(temp, 'display');

                        temp.parentNode.removeChild(temp);

                        if (display === 'none') {
                            display = 'block';
                        }
                        defaultDisplayMap[nodeName] = display;

                        return display;
                    }

                    function showHide(elements, show) {
                        var display,
                            elem,
                            values = [],
                            index = 0,
                            length = elements.length;

                        // Determine new display value for elements that need to change
                        for (; index < length; index++) {
                            elem = elements[index];
                            if (!elem.style) {
                                continue;
                            }

                            display = elem.style.display;
                            if (show) {
                                // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
                                // check is required in this first loop unless we have a nonempty display value (either
                                // inline or about-to-be-restored)
                                if (display === 'none') {
                                    values[index] = dataPriv.get(elem, 'display') || null;
                                    if (!values[index]) {
                                        elem.style.display = '';
                                    }
                                }
                                if (elem.style.display === '' && isHiddenWithinTree(elem)) {
                                    values[index] = getDefaultDisplay(elem);
                                }
                            } else {
                                if (display !== 'none') {
                                    values[index] = 'none';

                                    // Remember what we're overwriting
                                    dataPriv.set(elem, 'display', display);
                                }
                            }
                        }

                        // Set the display of the elements in a second loop to avoid constant reflow
                        for (index = 0; index < length; index++) {
                            if (values[index] != null) {
                                elements[index].style.display = values[index];
                            }
                        }

                        return elements;
                    }

                    jQuery.fn.extend({
                        show: function () {
                            return showHide(this, true);
                        },
                        hide: function () {
                            return showHide(this);
                        },
                        toggle: function (state) {
                            if (typeof state === 'boolean') {
                                return state ? this.show() : this.hide();
                            }

                            return this.each(function () {
                                if (isHiddenWithinTree(this)) {
                                    jQuery(this).show();
                                } else {
                                    jQuery(this).hide();
                                }
                            });
                        },
                    });
                    var rcheckableType = /^(?:checkbox|radio)$/i;

                    var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;

                    var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;

                    (function () {
                        var fragment = document.createDocumentFragment(),
                            div = fragment.appendChild(document.createElement('div')),
                            input = document.createElement('input');

                        // Support: Android 4.0 - 4.3 only
                        // Check state lost if the name is set (trac-11217)
                        // Support: Windows Web Apps (WWA)
                        // `name` and `type` must use .setAttribute for WWA (trac-14901)
                        input.setAttribute('type', 'radio');
                        input.setAttribute('checked', 'checked');
                        input.setAttribute('name', 't');

                        div.appendChild(input);

                        // Support: Android <=4.1 only
                        // Older WebKit doesn't clone checked state correctly in fragments
                        support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

                        // Support: IE <=11 only
                        // Make sure textarea (and checkbox) defaultValue is properly cloned
                        div.innerHTML = '<textarea>x</textarea>';
                        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;

                        // Support: IE <=9 only
                        // IE <=9 replaces <option> tags with their contents when inserted outside of
                        // the select element.
                        div.innerHTML = '<option></option>';
                        support.option = !!div.lastChild;
                    })();

                    // We have to close these tags to support XHTML (trac-13200)
                    var wrapMap = {
                        // XHTML parsers do not magically insert elements in the
                        // same way that tag soup parsers do. So we cannot shorten
                        // this by omitting <tbody> or other required elements.
                        thead: [1, '<table>', '</table>'],
                        col: [2, '<table><colgroup>', '</colgroup></table>'],
                        tr: [2, '<table><tbody>', '</tbody></table>'],
                        td: [3, '<table><tbody><tr>', '</tr></tbody></table>'],

                        _default: [0, '', ''],
                    };

                    wrapMap.tbody =
                        wrapMap.tfoot =
                        wrapMap.colgroup =
                        wrapMap.caption =
                            wrapMap.thead;
                    wrapMap.th = wrapMap.td;

                    // Support: IE <=9 only
                    if (!support.option) {
                        wrapMap.optgroup = wrapMap.option = [
                            1,
                            "<select multiple='multiple'>",
                            '</select>',
                        ];
                    }

                    function getAll(context, tag) {
                        // Support: IE <=9 - 11 only
                        // Use typeof to avoid zero-argument method invocation on host objects (trac-15151)
                        var ret;

                        if (typeof context.getElementsByTagName !== 'undefined') {
                            ret = context.getElementsByTagName(tag || '*');
                        } else if (typeof context.querySelectorAll !== 'undefined') {
                            ret = context.querySelectorAll(tag || '*');
                        } else {
                            ret = [];
                        }

                        if (tag === undefined || (tag && nodeName(context, tag))) {
                            return jQuery.merge([context], ret);
                        }

                        return ret;
                    }

                    // Mark scripts as having already been evaluated
                    function setGlobalEval(elems, refElements) {
                        var i = 0,
                            l = elems.length;

                        for (; i < l; i++) {
                            dataPriv.set(
                                elems[i],
                                'globalEval',
                                !refElements || dataPriv.get(refElements[i], 'globalEval'),
                            );
                        }
                    }

                    var rhtml = /<|&#?\w+;/;

                    function buildFragment(elems, context, scripts, selection, ignored) {
                        var elem,
                            tmp,
                            tag,
                            wrap,
                            attached,
                            j,
                            fragment = context.createDocumentFragment(),
                            nodes = [],
                            i = 0,
                            l = elems.length;

                        for (; i < l; i++) {
                            elem = elems[i];

                            if (elem || elem === 0) {
                                // Add nodes directly
                                if (toType(elem) === 'object') {
                                    // Support: Android <=4.0 only, PhantomJS 1 only
                                    // push.apply(_, arraylike) throws on ancient WebKit
                                    jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

                                    // Convert non-html into a text node
                                } else if (!rhtml.test(elem)) {
                                    nodes.push(context.createTextNode(elem));

                                    // Convert html into DOM nodes
                                } else {
                                    tmp = tmp || fragment.appendChild(context.createElement('div'));

                                    // Deserialize a standard representation
                                    tag = (rtagName.exec(elem) || ['', ''])[1].toLowerCase();
                                    wrap = wrapMap[tag] || wrapMap._default;
                                    tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];

                                    // Descend through wrappers to the right content
                                    j = wrap[0];
                                    while (j--) {
                                        tmp = tmp.lastChild;
                                    }

                                    // Support: Android <=4.0 only, PhantomJS 1 only
                                    // push.apply(_, arraylike) throws on ancient WebKit
                                    jQuery.merge(nodes, tmp.childNodes);

                                    // Remember the top-level container
                                    tmp = fragment.firstChild;

                                    // Ensure the created nodes are orphaned (trac-12392)
                                    tmp.textContent = '';
                                }
                            }
                        }

                        // Remove wrapper from fragment
                        fragment.textContent = '';

                        i = 0;
                        while ((elem = nodes[i++])) {
                            // Skip elements already in the context collection (trac-4087)
                            if (selection && jQuery.inArray(elem, selection) > -1) {
                                if (ignored) {
                                    ignored.push(elem);
                                }
                                continue;
                            }

                            attached = isAttached(elem);

                            // Append to fragment
                            tmp = getAll(fragment.appendChild(elem), 'script');

                            // Preserve script evaluation history
                            if (attached) {
                                setGlobalEval(tmp);
                            }

                            // Capture executables
                            if (scripts) {
                                j = 0;
                                while ((elem = tmp[j++])) {
                                    if (rscriptType.test(elem.type || '')) {
                                        scripts.push(elem);
                                    }
                                }
                            }
                        }

                        return fragment;
                    }

                    var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

                    function returnTrue() {
                        return true;
                    }

                    function returnFalse() {
                        return false;
                    }

                    function on(elem, types, selector, data, fn, one) {
                        var origFn, type;

                        // Types can be a map of types/handlers
                        if (typeof types === 'object') {
                            // ( types-Object, selector, data )
                            if (typeof selector !== 'string') {
                                // ( types-Object, data )
                                data = data || selector;
                                selector = undefined;
                            }
                            for (type in types) {
                                on(elem, type, selector, data, types[type], one);
                            }
                            return elem;
                        }

                        if (data == null && fn == null) {
                            // ( types, fn )
                            fn = selector;
                            data = selector = undefined;
                        } else if (fn == null) {
                            if (typeof selector === 'string') {
                                // ( types, selector, fn )
                                fn = data;
                                data = undefined;
                            } else {
                                // ( types, data, fn )
                                fn = data;
                                data = selector;
                                selector = undefined;
                            }
                        }
                        if (fn === false) {
                            fn = returnFalse;
                        } else if (!fn) {
                            return elem;
                        }

                        if (one === 1) {
                            origFn = fn;
                            fn = function (event) {
                                // Can use an empty set, since event contains the info
                                jQuery().off(event);
                                return origFn.apply(this, arguments);
                            };

                            // Use same guid so caller can remove using origFn
                            fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
                        }
                        return elem.each(function () {
                            jQuery.event.add(this, types, fn, data, selector);
                        });
                    }

                    /*
                     * Helper functions for managing events -- not part of the public interface.
                     * Props to Dean Edwards' addEvent library for many of the ideas.
                     */
                    jQuery.event = {
                        global: {},

                        add: function (elem, types, handler, data, selector) {
                            var handleObjIn,
                                eventHandle,
                                tmp,
                                events,
                                t,
                                handleObj,
                                special,
                                handlers,
                                type,
                                namespaces,
                                origType,
                                elemData = dataPriv.get(elem);

                            // Only attach events to objects that accept data
                            if (!acceptData(elem)) {
                                return;
                            }

                            // Caller can pass in an object of custom data in lieu of the handler
                            if (handler.handler) {
                                handleObjIn = handler;
                                handler = handleObjIn.handler;
                                selector = handleObjIn.selector;
                            }

                            // Ensure that invalid selectors throw exceptions at attach time
                            // Evaluate against documentElement in case elem is a non-element node (e.g., document)
                            if (selector) {
                                jQuery.find.matchesSelector(documentElement, selector);
                            }

                            // Make sure that the handler has a unique ID, used to find/remove it later
                            if (!handler.guid) {
                                handler.guid = jQuery.guid++;
                            }

                            // Init the element's event structure and main handler, if this is the first
                            if (!(events = elemData.events)) {
                                events = elemData.events = Object.create(null);
                            }
                            if (!(eventHandle = elemData.handle)) {
                                eventHandle = elemData.handle = function (e) {
                                    // Discard the second event of a jQuery.event.trigger() and
                                    // when an event is called after a page has unloaded
                                    return typeof jQuery !== 'undefined' &&
                                        jQuery.event.triggered !== e.type
                                        ? jQuery.event.dispatch.apply(elem, arguments)
                                        : undefined;
                                };
                            }

                            // Handle multiple events separated by a space
                            types = (types || '').match(rnothtmlwhite) || [''];
                            t = types.length;
                            while (t--) {
                                tmp = rtypenamespace.exec(types[t]) || [];
                                type = origType = tmp[1];
                                namespaces = (tmp[2] || '').split('.').sort();

                                // There *must* be a type, no attaching namespace-only handlers
                                if (!type) {
                                    continue;
                                }

                                // If event changes its type, use the special event handlers for the changed type
                                special = jQuery.event.special[type] || {};

                                // If selector defined, determine special event api type, otherwise given type
                                type = (selector ? special.delegateType : special.bindType) || type;

                                // Update special based on newly reset type
                                special = jQuery.event.special[type] || {};

                                // handleObj is passed to all event handlers
                                handleObj = jQuery.extend(
                                    {
                                        type: type,
                                        origType: origType,
                                        data: data,
                                        handler: handler,
                                        guid: handler.guid,
                                        selector: selector,
                                        needsContext:
                                            selector &&
                                            jQuery.expr.match.needsContext.test(selector),
                                        namespace: namespaces.join('.'),
                                    },
                                    handleObjIn,
                                );

                                // Init the event handler queue if we're the first
                                if (!(handlers = events[type])) {
                                    handlers = events[type] = [];
                                    handlers.delegateCount = 0;

                                    // Only use addEventListener if the special events handler returns false
                                    if (
                                        !special.setup ||
                                        special.setup.call(elem, data, namespaces, eventHandle) ===
                                            false
                                    ) {
                                        if (elem.addEventListener) {
                                            elem.addEventListener(type, eventHandle);
                                        }
                                    }
                                }

                                if (special.add) {
                                    special.add.call(elem, handleObj);

                                    if (!handleObj.handler.guid) {
                                        handleObj.handler.guid = handler.guid;
                                    }
                                }

                                // Add to the element's handler list, delegates in front
                                if (selector) {
                                    handlers.splice(handlers.delegateCount++, 0, handleObj);
                                } else {
                                    handlers.push(handleObj);
                                }

                                // Keep track of which events have ever been used, for event optimization
                                jQuery.event.global[type] = true;
                            }
                        },

                        // Detach an event or set of events from an element
                        remove: function (elem, types, handler, selector, mappedTypes) {
                            var j,
                                origCount,
                                tmp,
                                events,
                                t,
                                handleObj,
                                special,
                                handlers,
                                type,
                                namespaces,
                                origType,
                                elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

                            if (!elemData || !(events = elemData.events)) {
                                return;
                            }

                            // Once for each type.namespace in types; type may be omitted
                            types = (types || '').match(rnothtmlwhite) || [''];
                            t = types.length;
                            while (t--) {
                                tmp = rtypenamespace.exec(types[t]) || [];
                                type = origType = tmp[1];
                                namespaces = (tmp[2] || '').split('.').sort();

                                // Unbind all events (on this namespace, if provided) for the element
                                if (!type) {
                                    for (type in events) {
                                        jQuery.event.remove(
                                            elem,
                                            type + types[t],
                                            handler,
                                            selector,
                                            true,
                                        );
                                    }
                                    continue;
                                }

                                special = jQuery.event.special[type] || {};
                                type = (selector ? special.delegateType : special.bindType) || type;
                                handlers = events[type] || [];
                                tmp =
                                    tmp[2] &&
                                    new RegExp(
                                        '(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)',
                                    );

                                // Remove matching events
                                origCount = j = handlers.length;
                                while (j--) {
                                    handleObj = handlers[j];

                                    if (
                                        (mappedTypes || origType === handleObj.origType) &&
                                        (!handler || handler.guid === handleObj.guid) &&
                                        (!tmp || tmp.test(handleObj.namespace)) &&
                                        (!selector ||
                                            selector === handleObj.selector ||
                                            (selector === '**' && handleObj.selector))
                                    ) {
                                        handlers.splice(j, 1);

                                        if (handleObj.selector) {
                                            handlers.delegateCount--;
                                        }
                                        if (special.remove) {
                                            special.remove.call(elem, handleObj);
                                        }
                                    }
                                }

                                // Remove generic event handler if we removed something and no more handlers exist
                                // (avoids potential for endless recursion during removal of special event handlers)
                                if (origCount && !handlers.length) {
                                    if (
                                        !special.teardown ||
                                        special.teardown.call(elem, namespaces, elemData.handle) ===
                                            false
                                    ) {
                                        jQuery.removeEvent(elem, type, elemData.handle);
                                    }

                                    delete events[type];
                                }
                            }

                            // Remove data and the expando if it's no longer used
                            if (jQuery.isEmptyObject(events)) {
                                dataPriv.remove(elem, 'handle events');
                            }
                        },

                        dispatch: function (nativeEvent) {
                            var i,
                                j,
                                ret,
                                matched,
                                handleObj,
                                handlerQueue,
                                args = new Array(arguments.length),
                                // Make a writable jQuery.Event from the native event object
                                event = jQuery.event.fix(nativeEvent),
                                handlers =
                                    (dataPriv.get(this, 'events') || Object.create(null))[
                                        event.type
                                    ] || [],
                                special = jQuery.event.special[event.type] || {};

                            // Use the fix-ed jQuery.Event rather than the (read-only) native event
                            args[0] = event;

                            for (i = 1; i < arguments.length; i++) {
                                args[i] = arguments[i];
                            }

                            event.delegateTarget = this;

                            // Call the preDispatch hook for the mapped type, and let it bail if desired
                            if (
                                special.preDispatch &&
                                special.preDispatch.call(this, event) === false
                            ) {
                                return;
                            }

                            // Determine handlers
                            handlerQueue = jQuery.event.handlers.call(this, event, handlers);

                            // Run delegates first; they may want to stop propagation beneath us
                            i = 0;
                            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
                                event.currentTarget = matched.elem;

                                j = 0;
                                while (
                                    (handleObj = matched.handlers[j++]) &&
                                    !event.isImmediatePropagationStopped()
                                ) {
                                    // If the event is namespaced, then each handler is only invoked if it is
                                    // specially universal or its namespaces are a superset of the event's.
                                    if (
                                        !event.rnamespace ||
                                        handleObj.namespace === false ||
                                        event.rnamespace.test(handleObj.namespace)
                                    ) {
                                        event.handleObj = handleObj;
                                        event.data = handleObj.data;

                                        ret = (
                                            (jQuery.event.special[handleObj.origType] || {})
                                                .handle || handleObj.handler
                                        ).apply(matched.elem, args);

                                        if (ret !== undefined) {
                                            if ((event.result = ret) === false) {
                                                event.preventDefault();
                                                event.stopPropagation();
                                            }
                                        }
                                    }
                                }
                            }

                            // Call the postDispatch hook for the mapped type
                            if (special.postDispatch) {
                                special.postDispatch.call(this, event);
                            }

                            return event.result;
                        },

                        handlers: function (event, handlers) {
                            var i,
                                handleObj,
                                sel,
                                matchedHandlers,
                                matchedSelectors,
                                handlerQueue = [],
                                delegateCount = handlers.delegateCount,
                                cur = event.target;

                            // Find delegate handlers
                            if (
                                delegateCount &&
                                // Support: IE <=9
                                // Black-hole SVG <use> instance trees (trac-13180)
                                cur.nodeType &&
                                // Support: Firefox <=42
                                // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
                                // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
                                // Support: IE 11 only
                                // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
                                !(event.type === 'click' && event.button >= 1)
                            ) {
                                for (; cur !== this; cur = cur.parentNode || this) {
                                    // Don't check non-elements (trac-13208)
                                    // Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)
                                    if (
                                        cur.nodeType === 1 &&
                                        !(event.type === 'click' && cur.disabled === true)
                                    ) {
                                        matchedHandlers = [];
                                        matchedSelectors = {};
                                        for (i = 0; i < delegateCount; i++) {
                                            handleObj = handlers[i];

                                            // Don't conflict with Object.prototype properties (trac-13203)
                                            sel = handleObj.selector + ' ';

                                            if (matchedSelectors[sel] === undefined) {
                                                matchedSelectors[sel] = handleObj.needsContext
                                                    ? jQuery(sel, this).index(cur) > -1
                                                    : jQuery.find(sel, this, null, [cur]).length;
                                            }
                                            if (matchedSelectors[sel]) {
                                                matchedHandlers.push(handleObj);
                                            }
                                        }
                                        if (matchedHandlers.length) {
                                            handlerQueue.push({
                                                elem: cur,
                                                handlers: matchedHandlers,
                                            });
                                        }
                                    }
                                }
                            }

                            // Add the remaining (directly-bound) handlers
                            cur = this;
                            if (delegateCount < handlers.length) {
                                handlerQueue.push({
                                    elem: cur,
                                    handlers: handlers.slice(delegateCount),
                                });
                            }

                            return handlerQueue;
                        },

                        addProp: function (name, hook) {
                            Object.defineProperty(jQuery.Event.prototype, name, {
                                enumerable: true,
                                configurable: true,

                                get: isFunction(hook)
                                    ? function () {
                                          if (this.originalEvent) {
                                              return hook(this.originalEvent);
                                          }
                                      }
                                    : function () {
                                          if (this.originalEvent) {
                                              return this.originalEvent[name];
                                          }
                                      },

                                set: function (value) {
                                    Object.defineProperty(this, name, {
                                        enumerable: true,
                                        configurable: true,
                                        writable: true,
                                        value: value,
                                    });
                                },
                            });
                        },

                        fix: function (originalEvent) {
                            return originalEvent[jQuery.expando]
                                ? originalEvent
                                : new jQuery.Event(originalEvent);
                        },

                        special: {
                            load: {
                                // Prevent triggered image.load events from bubbling to window.load
                                noBubble: true,
                            },
                            click: {
                                // Utilize native event to ensure correct state for checkable inputs
                                setup: function (data) {
                                    // For mutual compressibility with _default, replace `this` access with a local var.
                                    // `|| data` is dead code meant only to preserve the variable through minification.
                                    var el = this || data;

                                    // Claim the first handler
                                    if (
                                        rcheckableType.test(el.type) &&
                                        el.click &&
                                        nodeName(el, 'input')
                                    ) {
                                        // dataPriv.set( el, "click", ... )
                                        leverageNative(el, 'click', true);
                                    }

                                    // Return false to allow normal processing in the caller
                                    return false;
                                },
                                trigger: function (data) {
                                    // For mutual compressibility with _default, replace `this` access with a local var.
                                    // `|| data` is dead code meant only to preserve the variable through minification.
                                    var el = this || data;

                                    // Force setup before triggering a click
                                    if (
                                        rcheckableType.test(el.type) &&
                                        el.click &&
                                        nodeName(el, 'input')
                                    ) {
                                        leverageNative(el, 'click');
                                    }

                                    // Return non-false to allow normal event-path propagation
                                    return true;
                                },

                                // For cross-browser consistency, suppress native .click() on links
                                // Also prevent it if we're currently inside a leveraged native-event stack
                                _default: function (event) {
                                    var target = event.target;
                                    return (
                                        (rcheckableType.test(target.type) &&
                                            target.click &&
                                            nodeName(target, 'input') &&
                                            dataPriv.get(target, 'click')) ||
                                        nodeName(target, 'a')
                                    );
                                },
                            },

                            beforeunload: {
                                postDispatch: function (event) {
                                    // Support: Firefox 20+
                                    // Firefox doesn't alert if the returnValue field is not set.
                                    if (event.result !== undefined && event.originalEvent) {
                                        event.originalEvent.returnValue = event.result;
                                    }
                                },
                            },
                        },
                    };

                    // Ensure the presence of an event listener that handles manually-triggered
                    // synthetic events by interrupting progress until reinvoked in response to
                    // *native* events that it fires directly, ensuring that state changes have
                    // already occurred before other listeners are invoked.
                    function leverageNative(el, type, isSetup) {
                        // Missing `isSetup` indicates a trigger call, which must force setup through jQuery.event.add
                        if (!isSetup) {
                            if (dataPriv.get(el, type) === undefined) {
                                jQuery.event.add(el, type, returnTrue);
                            }
                            return;
                        }

                        // Register the controller as a special universal handler for all event namespaces
                        dataPriv.set(el, type, false);
                        jQuery.event.add(el, type, {
                            namespace: false,
                            handler: function (event) {
                                var result,
                                    saved = dataPriv.get(this, type);

                                if (event.isTrigger & 1 && this[type]) {
                                    // Interrupt processing of the outer synthetic .trigger()ed event
                                    if (!saved) {
                                        // Store arguments for use when handling the inner native event
                                        // There will always be at least one argument (an event object), so this array
                                        // will not be confused with a leftover capture object.
                                        saved = slice.call(arguments);
                                        dataPriv.set(this, type, saved);

                                        // Trigger the native event and capture its result
                                        this[type]();
                                        result = dataPriv.get(this, type);
                                        dataPriv.set(this, type, false);

                                        if (saved !== result) {
                                            // Cancel the outer synthetic event
                                            event.stopImmediatePropagation();
                                            event.preventDefault();

                                            return result;
                                        }

                                        // If this is an inner synthetic event for an event with a bubbling surrogate
                                        // (focus or blur), assume that the surrogate already propagated from triggering
                                        // the native event and prevent that from happening again here.
                                        // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
                                        // bubbling surrogate propagates *after* the non-bubbling base), but that seems
                                        // less bad than duplication.
                                    } else if ((jQuery.event.special[type] || {}).delegateType) {
                                        event.stopPropagation();
                                    }

                                    // If this is a native event triggered above, everything is now in order
                                    // Fire an inner synthetic event with the original arguments
                                } else if (saved) {
                                    // ...and capture the result
                                    dataPriv.set(
                                        this,
                                        type,
                                        jQuery.event.trigger(saved[0], saved.slice(1), this),
                                    );

                                    // Abort handling of the native event by all jQuery handlers while allowing
                                    // native handlers on the same element to run. On target, this is achieved
                                    // by stopping immediate propagation just on the jQuery event. However,
                                    // the native event is re-wrapped by a jQuery one on each level of the
                                    // propagation so the only way to stop it for jQuery is to stop it for
                                    // everyone via native `stopPropagation()`. This is not a problem for
                                    // focus/blur which don't bubble, but it does also stop click on checkboxes
                                    // and radios. We accept this limitation.
                                    event.stopPropagation();
                                    event.isImmediatePropagationStopped = returnTrue;
                                }
                            },
                        });
                    }

                    jQuery.removeEvent = function (elem, type, handle) {
                        // This "if" is needed for plain objects
                        if (elem.removeEventListener) {
                            elem.removeEventListener(type, handle);
                        }
                    };

                    jQuery.Event = function (src, props) {
                        // Allow instantiation without the 'new' keyword
                        if (!(this instanceof jQuery.Event)) {
                            return new jQuery.Event(src, props);
                        }

                        // Event object
                        if (src && src.type) {
                            this.originalEvent = src;
                            this.type = src.type;

                            // Events bubbling up the document may have been marked as prevented
                            // by a handler lower down the tree; reflect the correct value.
                            this.isDefaultPrevented =
                                src.defaultPrevented ||
                                (src.defaultPrevented === undefined &&
                                    // Support: Android <=2.3 only
                                    src.returnValue === false)
                                    ? returnTrue
                                    : returnFalse;

                            // Create target properties
                            // Support: Safari <=6 - 7 only
                            // Target should not be a text node (trac-504, trac-13143)
                            this.target =
                                src.target && src.target.nodeType === 3
                                    ? src.target.parentNode
                                    : src.target;

                            this.currentTarget = src.currentTarget;
                            this.relatedTarget = src.relatedTarget;

                            // Event type
                        } else {
                            this.type = src;
                        }

                        // Put explicitly provided properties onto the event object
                        if (props) {
                            jQuery.extend(this, props);
                        }

                        // Create a timestamp if incoming event doesn't have one
                        this.timeStamp = (src && src.timeStamp) || Date.now();

                        // Mark it as fixed
                        this[jQuery.expando] = true;
                    };

                    // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
                    // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
                    jQuery.Event.prototype = {
                        constructor: jQuery.Event,
                        isDefaultPrevented: returnFalse,
                        isPropagationStopped: returnFalse,
                        isImmediatePropagationStopped: returnFalse,
                        isSimulated: false,

                        preventDefault: function () {
                            var e = this.originalEvent;

                            this.isDefaultPrevented = returnTrue;

                            if (e && !this.isSimulated) {
                                e.preventDefault();
                            }
                        },
                        stopPropagation: function () {
                            var e = this.originalEvent;

                            this.isPropagationStopped = returnTrue;

                            if (e && !this.isSimulated) {
                                e.stopPropagation();
                            }
                        },
                        stopImmediatePropagation: function () {
                            var e = this.originalEvent;

                            this.isImmediatePropagationStopped = returnTrue;

                            if (e && !this.isSimulated) {
                                e.stopImmediatePropagation();
                            }

                            this.stopPropagation();
                        },
                    };

                    // Includes all common event props including KeyEvent and MouseEvent specific props
                    jQuery.each(
                        {
                            altKey: true,
                            bubbles: true,
                            cancelable: true,
                            changedTouches: true,
                            ctrlKey: true,
                            detail: true,
                            eventPhase: true,
                            metaKey: true,
                            pageX: true,
                            pageY: true,
                            shiftKey: true,
                            view: true,
                            char: true,
                            code: true,
                            charCode: true,
                            key: true,
                            keyCode: true,
                            button: true,
                            buttons: true,
                            clientX: true,
                            clientY: true,
                            offsetX: true,
                            offsetY: true,
                            pointerId: true,
                            pointerType: true,
                            screenX: true,
                            screenY: true,
                            targetTouches: true,
                            toElement: true,
                            touches: true,
                            which: true,
                        },
                        jQuery.event.addProp,
                    );

                    jQuery.each(
                        { focus: 'focusin', blur: 'focusout' },
                        function (type, delegateType) {
                            function focusMappedHandler(nativeEvent) {
                                if (document.documentMode) {
                                    // Support: IE 11+
                                    // Attach a single focusin/focusout handler on the document while someone wants
                                    // focus/blur. This is because the former are synchronous in IE while the latter
                                    // are async. In other browsers, all those handlers are invoked synchronously.

                                    // `handle` from private data would already wrap the event, but we need
                                    // to change the `type` here.
                                    var handle = dataPriv.get(this, 'handle'),
                                        event = jQuery.event.fix(nativeEvent);
                                    event.type = nativeEvent.type === 'focusin' ? 'focus' : 'blur';
                                    event.isSimulated = true;

                                    // First, handle focusin/focusout
                                    handle(nativeEvent);

                                    // ...then, handle focus/blur
                                    //
                                    // focus/blur don't bubble while focusin/focusout do; simulate the former by only
                                    // invoking the handler at the lower level.
                                    if (event.target === event.currentTarget) {
                                        // The setup part calls `leverageNative`, which, in turn, calls
                                        // `jQuery.event.add`, so event handle will already have been set
                                        // by this point.
                                        handle(event);
                                    }
                                } else {
                                    // For non-IE browsers, attach a single capturing handler on the document
                                    // while someone wants focusin/focusout.
                                    jQuery.event.simulate(
                                        delegateType,
                                        nativeEvent.target,
                                        jQuery.event.fix(nativeEvent),
                                    );
                                }
                            }

                            jQuery.event.special[type] = {
                                // Utilize native event if possible so blur/focus sequence is correct
                                setup: function () {
                                    var attaches;

                                    // Claim the first handler
                                    // dataPriv.set( this, "focus", ... )
                                    // dataPriv.set( this, "blur", ... )
                                    leverageNative(this, type, true);

                                    if (document.documentMode) {
                                        // Support: IE 9 - 11+
                                        // We use the same native handler for focusin & focus (and focusout & blur)
                                        // so we need to coordinate setup & teardown parts between those events.
                                        // Use `delegateType` as the key as `type` is already used by `leverageNative`.
                                        attaches = dataPriv.get(this, delegateType);
                                        if (!attaches) {
                                            this.addEventListener(delegateType, focusMappedHandler);
                                        }
                                        dataPriv.set(this, delegateType, (attaches || 0) + 1);
                                    } else {
                                        // Return false to allow normal processing in the caller
                                        return false;
                                    }
                                },
                                trigger: function () {
                                    // Force setup before trigger
                                    leverageNative(this, type);

                                    // Return non-false to allow normal event-path propagation
                                    return true;
                                },

                                teardown: function () {
                                    var attaches;

                                    if (document.documentMode) {
                                        attaches = dataPriv.get(this, delegateType) - 1;
                                        if (!attaches) {
                                            this.removeEventListener(
                                                delegateType,
                                                focusMappedHandler,
                                            );
                                            dataPriv.remove(this, delegateType);
                                        } else {
                                            dataPriv.set(this, delegateType, attaches);
                                        }
                                    } else {
                                        // Return false to indicate standard teardown should be applied
                                        return false;
                                    }
                                },

                                // Suppress native focus or blur if we're currently inside
                                // a leveraged native-event stack
                                _default: function (event) {
                                    return dataPriv.get(event.target, type);
                                },

                                delegateType: delegateType,
                            };

                            // Support: Firefox <=44
                            // Firefox doesn't have focus(in | out) events
                            // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
                            //
                            // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
                            // focus(in | out) events fire after focus & blur events,
                            // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
                            // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
                            //
                            // Support: IE 9 - 11+
                            // To preserve relative focusin/focus & focusout/blur event order guaranteed on the 3.x branch,
                            // attach a single handler for both events in IE.
                            jQuery.event.special[delegateType] = {
                                setup: function () {
                                    // Handle: regular nodes (via `this.ownerDocument`), window
                                    // (via `this.document`) & document (via `this`).
                                    var doc = this.ownerDocument || this.document || this,
                                        dataHolder = document.documentMode ? this : doc,
                                        attaches = dataPriv.get(dataHolder, delegateType);

                                    // Support: IE 9 - 11+
                                    // We use the same native handler for focusin & focus (and focusout & blur)
                                    // so we need to coordinate setup & teardown parts between those events.
                                    // Use `delegateType` as the key as `type` is already used by `leverageNative`.
                                    if (!attaches) {
                                        if (document.documentMode) {
                                            this.addEventListener(delegateType, focusMappedHandler);
                                        } else {
                                            doc.addEventListener(type, focusMappedHandler, true);
                                        }
                                    }
                                    dataPriv.set(dataHolder, delegateType, (attaches || 0) + 1);
                                },
                                teardown: function () {
                                    var doc = this.ownerDocument || this.document || this,
                                        dataHolder = document.documentMode ? this : doc,
                                        attaches = dataPriv.get(dataHolder, delegateType) - 1;

                                    if (!attaches) {
                                        if (document.documentMode) {
                                            this.removeEventListener(
                                                delegateType,
                                                focusMappedHandler,
                                            );
                                        } else {
                                            doc.removeEventListener(type, focusMappedHandler, true);
                                        }
                                        dataPriv.remove(dataHolder, delegateType);
                                    } else {
                                        dataPriv.set(dataHolder, delegateType, attaches);
                                    }
                                },
                            };
                        },
                    );

                    // Create mouseenter/leave events using mouseover/out and event-time checks
                    // so that event delegation works in jQuery.
                    // Do the same for pointerenter/pointerleave and pointerover/pointerout
                    //
                    // Support: Safari 7 only
                    // Safari sends mouseenter too often; see:
                    // https://bugs.chromium.org/p/chromium/issues/detail?id=470258
                    // for the description of the bug (it existed in older Chrome versions as well).
                    jQuery.each(
                        {
                            mouseenter: 'mouseover',
                            mouseleave: 'mouseout',
                            pointerenter: 'pointerover',
                            pointerleave: 'pointerout',
                        },
                        function (orig, fix) {
                            jQuery.event.special[orig] = {
                                delegateType: fix,
                                bindType: fix,

                                handle: function (event) {
                                    var ret,
                                        target = this,
                                        related = event.relatedTarget,
                                        handleObj = event.handleObj;

                                    // For mouseenter/leave call the handler if related is outside the target.
                                    // NB: No relatedTarget if the mouse left/entered the browser window
                                    if (
                                        !related ||
                                        (related !== target && !jQuery.contains(target, related))
                                    ) {
                                        event.type = handleObj.origType;
                                        ret = handleObj.handler.apply(this, arguments);
                                        event.type = fix;
                                    }
                                    return ret;
                                },
                            };
                        },
                    );

                    jQuery.fn.extend({
                        on: function (types, selector, data, fn) {
                            return on(this, types, selector, data, fn);
                        },
                        one: function (types, selector, data, fn) {
                            return on(this, types, selector, data, fn, 1);
                        },
                        off: function (types, selector, fn) {
                            var handleObj, type;
                            if (types && types.preventDefault && types.handleObj) {
                                // ( event )  dispatched jQuery.Event
                                handleObj = types.handleObj;
                                jQuery(types.delegateTarget).off(
                                    handleObj.namespace
                                        ? handleObj.origType + '.' + handleObj.namespace
                                        : handleObj.origType,
                                    handleObj.selector,
                                    handleObj.handler,
                                );
                                return this;
                            }
                            if (typeof types === 'object') {
                                // ( types-object [, selector] )
                                for (type in types) {
                                    this.off(type, selector, types[type]);
                                }
                                return this;
                            }
                            if (selector === false || typeof selector === 'function') {
                                // ( types [, fn] )
                                fn = selector;
                                selector = undefined;
                            }
                            if (fn === false) {
                                fn = returnFalse;
                            }
                            return this.each(function () {
                                jQuery.event.remove(this, types, fn, selector);
                            });
                        },
                    });

                    var // Support: IE <=10 - 11, Edge 12 - 13 only
                        // In IE/Edge using regex groups here causes severe slowdowns.
                        // See https://connect.microsoft.com/IE/feedback/details/1736512/
                        rnoInnerhtml = /<script|<style|<link/i,
                        // checked="checked" or checked
                        rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
                        rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g;

                    // Prefer a tbody over its parent table for containing new rows
                    function manipulationTarget(elem, content) {
                        if (
                            nodeName(elem, 'table') &&
                            nodeName(content.nodeType !== 11 ? content : content.firstChild, 'tr')
                        ) {
                            return jQuery(elem).children('tbody')[0] || elem;
                        }

                        return elem;
                    }

                    // Replace/restore the type attribute of script elements for safe DOM manipulation
                    function disableScript(elem) {
                        elem.type = (elem.getAttribute('type') !== null) + '/' + elem.type;
                        return elem;
                    }
                    function restoreScript(elem) {
                        if ((elem.type || '').slice(0, 5) === 'true/') {
                            elem.type = elem.type.slice(5);
                        } else {
                            elem.removeAttribute('type');
                        }

                        return elem;
                    }

                    function cloneCopyEvent(src, dest) {
                        var i, l, type, pdataOld, udataOld, udataCur, events;

                        if (dest.nodeType !== 1) {
                            return;
                        }

                        // 1. Copy private data: events, handlers, etc.
                        if (dataPriv.hasData(src)) {
                            pdataOld = dataPriv.get(src);
                            events = pdataOld.events;

                            if (events) {
                                dataPriv.remove(dest, 'handle events');

                                for (type in events) {
                                    for (i = 0, l = events[type].length; i < l; i++) {
                                        jQuery.event.add(dest, type, events[type][i]);
                                    }
                                }
                            }
                        }

                        // 2. Copy user data
                        if (dataUser.hasData(src)) {
                            udataOld = dataUser.access(src);
                            udataCur = jQuery.extend({}, udataOld);

                            dataUser.set(dest, udataCur);
                        }
                    }

                    // Fix IE bugs, see support tests
                    function fixInput(src, dest) {
                        var nodeName = dest.nodeName.toLowerCase();

                        // Fails to persist the checked state of a cloned checkbox or radio button.
                        if (nodeName === 'input' && rcheckableType.test(src.type)) {
                            dest.checked = src.checked;

                            // Fails to return the selected option to the default selected state when cloning options
                        } else if (nodeName === 'input' || nodeName === 'textarea') {
                            dest.defaultValue = src.defaultValue;
                        }
                    }

                    function domManip(collection, args, callback, ignored) {
                        // Flatten any nested arrays
                        args = flat(args);

                        var fragment,
                            first,
                            scripts,
                            hasScripts,
                            node,
                            doc,
                            i = 0,
                            l = collection.length,
                            iNoClone = l - 1,
                            value = args[0],
                            valueIsFunction = isFunction(value);

                        // We can't cloneNode fragments that contain checked, in WebKit
                        if (
                            valueIsFunction ||
                            (l > 1 &&
                                typeof value === 'string' &&
                                !support.checkClone &&
                                rchecked.test(value))
                        ) {
                            return collection.each(function (index) {
                                var self = collection.eq(index);
                                if (valueIsFunction) {
                                    args[0] = value.call(this, index, self.html());
                                }
                                domManip(self, args, callback, ignored);
                            });
                        }

                        if (l) {
                            fragment = buildFragment(
                                args,
                                collection[0].ownerDocument,
                                false,
                                collection,
                                ignored,
                            );
                            first = fragment.firstChild;

                            if (fragment.childNodes.length === 1) {
                                fragment = first;
                            }

                            // Require either new content or an interest in ignored elements to invoke the callback
                            if (first || ignored) {
                                scripts = jQuery.map(getAll(fragment, 'script'), disableScript);
                                hasScripts = scripts.length;

                                // Use the original fragment for the last item
                                // instead of the first because it can end up
                                // being emptied incorrectly in certain situations (trac-8070).
                                for (; i < l; i++) {
                                    node = fragment;

                                    if (i !== iNoClone) {
                                        node = jQuery.clone(node, true, true);

                                        // Keep references to cloned scripts for later restoration
                                        if (hasScripts) {
                                            // Support: Android <=4.0 only, PhantomJS 1 only
                                            // push.apply(_, arraylike) throws on ancient WebKit
                                            jQuery.merge(scripts, getAll(node, 'script'));
                                        }
                                    }

                                    callback.call(collection[i], node, i);
                                }

                                if (hasScripts) {
                                    doc = scripts[scripts.length - 1].ownerDocument;

                                    // Re-enable scripts
                                    jQuery.map(scripts, restoreScript);

                                    // Evaluate executable scripts on first document insertion
                                    for (i = 0; i < hasScripts; i++) {
                                        node = scripts[i];
                                        if (
                                            rscriptType.test(node.type || '') &&
                                            !dataPriv.access(node, 'globalEval') &&
                                            jQuery.contains(doc, node)
                                        ) {
                                            if (
                                                node.src &&
                                                (node.type || '').toLowerCase() !== 'module'
                                            ) {
                                                // Optional AJAX dependency, but won't run scripts if not present
                                                if (jQuery._evalUrl && !node.noModule) {
                                                    jQuery._evalUrl(
                                                        node.src,
                                                        {
                                                            nonce:
                                                                node.nonce ||
                                                                node.getAttribute('nonce'),
                                                        },
                                                        doc,
                                                    );
                                                }
                                            } else {
                                                // Unwrap a CDATA section containing script contents. This shouldn't be
                                                // needed as in XML documents they're already not visible when
                                                // inspecting element contents and in HTML documents they have no
                                                // meaning but we're preserving that logic for backwards compatibility.
                                                // This will be removed completely in 4.0. See gh-4904.
                                                DOMEval(
                                                    node.textContent.replace(rcleanScript, ''),
                                                    node,
                                                    doc,
                                                );
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        return collection;
                    }

                    function remove(elem, selector, keepData) {
                        var node,
                            nodes = selector ? jQuery.filter(selector, elem) : elem,
                            i = 0;

                        for (; (node = nodes[i]) != null; i++) {
                            if (!keepData && node.nodeType === 1) {
                                jQuery.cleanData(getAll(node));
                            }

                            if (node.parentNode) {
                                if (keepData && isAttached(node)) {
                                    setGlobalEval(getAll(node, 'script'));
                                }
                                node.parentNode.removeChild(node);
                            }
                        }

                        return elem;
                    }

                    jQuery.extend({
                        htmlPrefilter: function (html) {
                            return html;
                        },

                        clone: function (elem, dataAndEvents, deepDataAndEvents) {
                            var i,
                                l,
                                srcElements,
                                destElements,
                                clone = elem.cloneNode(true),
                                inPage = isAttached(elem);

                            // Fix IE cloning issues
                            if (
                                !support.noCloneChecked &&
                                (elem.nodeType === 1 || elem.nodeType === 11) &&
                                !jQuery.isXMLDoc(elem)
                            ) {
                                // We eschew jQuery#find here for performance reasons:
                                // https://jsperf.com/getall-vs-sizzle/2
                                destElements = getAll(clone);
                                srcElements = getAll(elem);

                                for (i = 0, l = srcElements.length; i < l; i++) {
                                    fixInput(srcElements[i], destElements[i]);
                                }
                            }

                            // Copy the events from the original to the clone
                            if (dataAndEvents) {
                                if (deepDataAndEvents) {
                                    srcElements = srcElements || getAll(elem);
                                    destElements = destElements || getAll(clone);

                                    for (i = 0, l = srcElements.length; i < l; i++) {
                                        cloneCopyEvent(srcElements[i], destElements[i]);
                                    }
                                } else {
                                    cloneCopyEvent(elem, clone);
                                }
                            }

                            // Preserve script evaluation history
                            destElements = getAll(clone, 'script');
                            if (destElements.length > 0) {
                                setGlobalEval(destElements, !inPage && getAll(elem, 'script'));
                            }

                            // Return the cloned set
                            return clone;
                        },

                        cleanData: function (elems) {
                            var data,
                                elem,
                                type,
                                special = jQuery.event.special,
                                i = 0;

                            for (; (elem = elems[i]) !== undefined; i++) {
                                if (acceptData(elem)) {
                                    if ((data = elem[dataPriv.expando])) {
                                        if (data.events) {
                                            for (type in data.events) {
                                                if (special[type]) {
                                                    jQuery.event.remove(elem, type);

                                                    // This is a shortcut to avoid jQuery.event.remove's overhead
                                                } else {
                                                    jQuery.removeEvent(elem, type, data.handle);
                                                }
                                            }
                                        }

                                        // Support: Chrome <=35 - 45+
                                        // Assign undefined instead of using delete, see Data#remove
                                        elem[dataPriv.expando] = undefined;
                                    }
                                    if (elem[dataUser.expando]) {
                                        // Support: Chrome <=35 - 45+
                                        // Assign undefined instead of using delete, see Data#remove
                                        elem[dataUser.expando] = undefined;
                                    }
                                }
                            }
                        },
                    });

                    jQuery.fn.extend({
                        detach: function (selector) {
                            return remove(this, selector, true);
                        },

                        remove: function (selector) {
                            return remove(this, selector);
                        },

                        text: function (value) {
                            return access(
                                this,
                                function (value) {
                                    return value === undefined
                                        ? jQuery.text(this)
                                        : this.empty().each(function () {
                                              if (
                                                  this.nodeType === 1 ||
                                                  this.nodeType === 11 ||
                                                  this.nodeType === 9
                                              ) {
                                                  this.textContent = value;
                                              }
                                          });
                                },
                                null,
                                value,
                                arguments.length,
                            );
                        },

                        append: function () {
                            return domManip(this, arguments, function (elem) {
                                if (
                                    this.nodeType === 1 ||
                                    this.nodeType === 11 ||
                                    this.nodeType === 9
                                ) {
                                    var target = manipulationTarget(this, elem);
                                    target.appendChild(elem);
                                }
                            });
                        },

                        prepend: function () {
                            return domManip(this, arguments, function (elem) {
                                if (
                                    this.nodeType === 1 ||
                                    this.nodeType === 11 ||
                                    this.nodeType === 9
                                ) {
                                    var target = manipulationTarget(this, elem);
                                    target.insertBefore(elem, target.firstChild);
                                }
                            });
                        },

                        before: function () {
                            return domManip(this, arguments, function (elem) {
                                if (this.parentNode) {
                                    this.parentNode.insertBefore(elem, this);
                                }
                            });
                        },

                        after: function () {
                            return domManip(this, arguments, function (elem) {
                                if (this.parentNode) {
                                    this.parentNode.insertBefore(elem, this.nextSibling);
                                }
                            });
                        },

                        empty: function () {
                            var elem,
                                i = 0;

                            for (; (elem = this[i]) != null; i++) {
                                if (elem.nodeType === 1) {
                                    // Prevent memory leaks
                                    jQuery.cleanData(getAll(elem, false));

                                    // Remove any remaining nodes
                                    elem.textContent = '';
                                }
                            }

                            return this;
                        },

                        clone: function (dataAndEvents, deepDataAndEvents) {
                            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
                            deepDataAndEvents =
                                deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

                            return this.map(function () {
                                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
                            });
                        },

                        html: function (value) {
                            return access(
                                this,
                                function (value) {
                                    var elem = this[0] || {},
                                        i = 0,
                                        l = this.length;

                                    if (value === undefined && elem.nodeType === 1) {
                                        return elem.innerHTML;
                                    }

                                    // See if we can take a shortcut and just use innerHTML
                                    if (
                                        typeof value === 'string' &&
                                        !rnoInnerhtml.test(value) &&
                                        !wrapMap[
                                            (rtagName.exec(value) || ['', ''])[1].toLowerCase()
                                        ]
                                    ) {
                                        value = jQuery.htmlPrefilter(value);

                                        try {
                                            for (; i < l; i++) {
                                                elem = this[i] || {};

                                                // Remove element nodes and prevent memory leaks
                                                if (elem.nodeType === 1) {
                                                    jQuery.cleanData(getAll(elem, false));
                                                    elem.innerHTML = value;
                                                }
                                            }

                                            elem = 0;

                                            // If using innerHTML throws an exception, use the fallback method
                                        } catch (e) {}
                                    }

                                    if (elem) {
                                        this.empty().append(value);
                                    }
                                },
                                null,
                                value,
                                arguments.length,
                            );
                        },

                        replaceWith: function () {
                            var ignored = [];

                            // Make the changes, replacing each non-ignored context element with the new content
                            return domManip(
                                this,
                                arguments,
                                function (elem) {
                                    var parent = this.parentNode;

                                    if (jQuery.inArray(this, ignored) < 0) {
                                        jQuery.cleanData(getAll(this));
                                        if (parent) {
                                            parent.replaceChild(elem, this);
                                        }
                                    }

                                    // Force callback invocation
                                },
                                ignored,
                            );
                        },
                    });

                    jQuery.each(
                        {
                            appendTo: 'append',
                            prependTo: 'prepend',
                            insertBefore: 'before',
                            insertAfter: 'after',
                            replaceAll: 'replaceWith',
                        },
                        function (name, original) {
                            jQuery.fn[name] = function (selector) {
                                var elems,
                                    ret = [],
                                    insert = jQuery(selector),
                                    last = insert.length - 1,
                                    i = 0;

                                for (; i <= last; i++) {
                                    elems = i === last ? this : this.clone(true);
                                    jQuery(insert[i])[original](elems);

                                    // Support: Android <=4.0 only, PhantomJS 1 only
                                    // .get() because push.apply(_, arraylike) throws on ancient WebKit
                                    push.apply(ret, elems.get());
                                }

                                return this.pushStack(ret);
                            };
                        },
                    );
                    var rnumnonpx = new RegExp('^(' + pnum + ')(?!px)[a-z%]+$', 'i');

                    var rcustomProp = /^--/;

                    var getStyles = function (elem) {
                        // Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)
                        // IE throws on elements created in popups
                        // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
                        var view = elem.ownerDocument.defaultView;

                        if (!view || !view.opener) {
                            view = window;
                        }

                        return view.getComputedStyle(elem);
                    };

                    var swap = function (elem, options, callback) {
                        var ret,
                            name,
                            old = {};

                        // Remember the old values, and insert the new ones
                        for (name in options) {
                            old[name] = elem.style[name];
                            elem.style[name] = options[name];
                        }

                        ret = callback.call(elem);

                        // Revert the old values
                        for (name in options) {
                            elem.style[name] = old[name];
                        }

                        return ret;
                    };

                    var rboxStyle = new RegExp(cssExpand.join('|'), 'i');

                    (function () {
                        // Executing both pixelPosition & boxSizingReliable tests require only one layout
                        // so they're executed at the same time to save the second computation.
                        function computeStyleTests() {
                            // This is a singleton, we need to execute it only once
                            if (!div) {
                                return;
                            }

                            container.style.cssText =
                                'position:absolute;left:-11111px;width:60px;' +
                                'margin-top:1px;padding:0;border:0';
                            div.style.cssText =
                                'position:relative;display:block;box-sizing:border-box;overflow:scroll;' +
                                'margin:auto;border:1px;padding:1px;' +
                                'width:60%;top:1%';
                            documentElement.appendChild(container).appendChild(div);

                            var divStyle = window.getComputedStyle(div);
                            pixelPositionVal = divStyle.top !== '1%';

                            // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
                            reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;

                            // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
                            // Some styles come back with percentage values, even though they shouldn't
                            div.style.right = '60%';
                            pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;

                            // Support: IE 9 - 11 only
                            // Detect misreporting of content dimensions for box-sizing:border-box elements
                            boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;

                            // Support: IE 9 only
                            // Detect overflow:scroll screwiness (gh-3699)
                            // Support: Chrome <=64
                            // Don't get tricked when zoom affects offsetWidth (gh-4029)
                            div.style.position = 'absolute';
                            scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;

                            documentElement.removeChild(container);

                            // Nullify the div so it wouldn't be stored in the memory and
                            // it will also be a sign that checks already performed
                            div = null;
                        }

                        function roundPixelMeasures(measure) {
                            return Math.round(parseFloat(measure));
                        }

                        var pixelPositionVal,
                            boxSizingReliableVal,
                            scrollboxSizeVal,
                            pixelBoxStylesVal,
                            reliableTrDimensionsVal,
                            reliableMarginLeftVal,
                            container = document.createElement('div'),
                            div = document.createElement('div');

                        // Finish early in limited (non-browser) environments
                        if (!div.style) {
                            return;
                        }

                        // Support: IE <=9 - 11 only
                        // Style of cloned element affects source element cloned (trac-8908)
                        div.style.backgroundClip = 'content-box';
                        div.cloneNode(true).style.backgroundClip = '';
                        support.clearCloneStyle = div.style.backgroundClip === 'content-box';

                        jQuery.extend(support, {
                            boxSizingReliable: function () {
                                computeStyleTests();
                                return boxSizingReliableVal;
                            },
                            pixelBoxStyles: function () {
                                computeStyleTests();
                                return pixelBoxStylesVal;
                            },
                            pixelPosition: function () {
                                computeStyleTests();
                                return pixelPositionVal;
                            },
                            reliableMarginLeft: function () {
                                computeStyleTests();
                                return reliableMarginLeftVal;
                            },
                            scrollboxSize: function () {
                                computeStyleTests();
                                return scrollboxSizeVal;
                            },

                            // Support: IE 9 - 11+, Edge 15 - 18+
                            // IE/Edge misreport `getComputedStyle` of table rows with width/height
                            // set in CSS while `offset*` properties report correct values.
                            // Behavior in IE 9 is more subtle than in newer versions & it passes
                            // some versions of this test; make sure not to make it pass there!
                            //
                            // Support: Firefox 70+
                            // Only Firefox includes border widths
                            // in computed dimensions. (gh-4529)
                            reliableTrDimensions: function () {
                                var table, tr, trChild, trStyle;
                                if (reliableTrDimensionsVal == null) {
                                    table = document.createElement('table');
                                    tr = document.createElement('tr');
                                    trChild = document.createElement('div');

                                    table.style.cssText =
                                        'position:absolute;left:-11111px;border-collapse:separate';
                                    tr.style.cssText = 'box-sizing:content-box;border:1px solid';

                                    // Support: Chrome 86+
                                    // Height set through cssText does not get applied.
                                    // Computed height then comes back as 0.
                                    tr.style.height = '1px';
                                    trChild.style.height = '9px';

                                    // Support: Android 8 Chrome 86+
                                    // In our bodyBackground.html iframe,
                                    // display for all div elements is set to "inline",
                                    // which causes a problem only in Android 8 Chrome 86.
                                    // Ensuring the div is `display: block`
                                    // gets around this issue.
                                    trChild.style.display = 'block';

                                    documentElement
                                        .appendChild(table)
                                        .appendChild(tr)
                                        .appendChild(trChild);

                                    trStyle = window.getComputedStyle(tr);
                                    reliableTrDimensionsVal =
                                        parseInt(trStyle.height, 10) +
                                            parseInt(trStyle.borderTopWidth, 10) +
                                            parseInt(trStyle.borderBottomWidth, 10) ===
                                        tr.offsetHeight;

                                    documentElement.removeChild(table);
                                }
                                return reliableTrDimensionsVal;
                            },
                        });
                    })();

                    function curCSS(elem, name, computed) {
                        var width,
                            minWidth,
                            maxWidth,
                            ret,
                            isCustomProp = rcustomProp.test(name),
                            // Support: Firefox 51+
                            // Retrieving style before computed somehow
                            // fixes an issue with getting wrong values
                            // on detached elements
                            style = elem.style;

                        computed = computed || getStyles(elem);

                        // getPropertyValue is needed for:
                        //   .css('filter') (IE 9 only, trac-12537)
                        //   .css('--customProperty) (gh-3144)
                        if (computed) {
                            // Support: IE <=9 - 11+
                            // IE only supports `"float"` in `getPropertyValue`; in computed styles
                            // it's only available as `"cssFloat"`. We no longer modify properties
                            // sent to `.css()` apart from camelCasing, so we need to check both.
                            // Normally, this would create difference in behavior: if
                            // `getPropertyValue` returns an empty string, the value returned
                            // by `.css()` would be `undefined`. This is usually the case for
                            // disconnected elements. However, in IE even disconnected elements
                            // with no styles return `"none"` for `getPropertyValue( "float" )`
                            ret = computed.getPropertyValue(name) || computed[name];

                            if (isCustomProp && ret) {
                                // Support: Firefox 105+, Chrome <=105+
                                // Spec requires trimming whitespace for custom properties (gh-4926).
                                // Firefox only trims leading whitespace. Chrome just collapses
                                // both leading & trailing whitespace to a single space.
                                //
                                // Fall back to `undefined` if empty string returned.
                                // This collapses a missing definition with property defined
                                // and set to an empty string but there's no standard API
                                // allowing us to differentiate them without a performance penalty
                                // and returning `undefined` aligns with older jQuery.
                                //
                                // rtrimCSS treats U+000D CARRIAGE RETURN and U+000C FORM FEED
                                // as whitespace while CSS does not, but this is not a problem
                                // because CSS preprocessing replaces them with U+000A LINE FEED
                                // (which *is* CSS whitespace)
                                // https://www.w3.org/TR/css-syntax-3/#input-preprocessing
                                ret = ret.replace(rtrimCSS, '$1') || undefined;
                            }

                            if (ret === '' && !isAttached(elem)) {
                                ret = jQuery.style(elem, name);
                            }

                            // A tribute to the "awesome hack by Dean Edwards"
                            // Android Browser returns percentage for some values,
                            // but width seems to be reliably pixels.
                            // This is against the CSSOM draft spec:
                            // https://drafts.csswg.org/cssom/#resolved-values
                            if (
                                !support.pixelBoxStyles() &&
                                rnumnonpx.test(ret) &&
                                rboxStyle.test(name)
                            ) {
                                // Remember the original values
                                width = style.width;
                                minWidth = style.minWidth;
                                maxWidth = style.maxWidth;

                                // Put in the new values to get a computed value out
                                style.minWidth = style.maxWidth = style.width = ret;
                                ret = computed.width;

                                // Revert the changed values
                                style.width = width;
                                style.minWidth = minWidth;
                                style.maxWidth = maxWidth;
                            }
                        }

                        return ret !== undefined
                            ? // Support: IE <=9 - 11 only
                              // IE returns zIndex value as an integer.
                              ret + ''
                            : ret;
                    }

                    function addGetHookIf(conditionFn, hookFn) {
                        // Define the hook, we'll check on the first run if it's really needed.
                        return {
                            get: function () {
                                if (conditionFn()) {
                                    // Hook not needed (or it's not possible to use it due
                                    // to missing dependency), remove it.
                                    delete this.get;
                                    return;
                                }

                                // Hook needed; redefine it so that the support test is not executed again.
                                return (this.get = hookFn).apply(this, arguments);
                            },
                        };
                    }

                    var cssPrefixes = ['Webkit', 'Moz', 'ms'],
                        emptyStyle = document.createElement('div').style,
                        vendorProps = {};

                    // Return a vendor-prefixed property or undefined
                    function vendorPropName(name) {
                        // Check for vendor prefixed names
                        var capName = name[0].toUpperCase() + name.slice(1),
                            i = cssPrefixes.length;

                        while (i--) {
                            name = cssPrefixes[i] + capName;
                            if (name in emptyStyle) {
                                return name;
                            }
                        }
                    }

                    // Return a potentially-mapped jQuery.cssProps or vendor prefixed property
                    function finalPropName(name) {
                        var final = jQuery.cssProps[name] || vendorProps[name];

                        if (final) {
                            return final;
                        }
                        if (name in emptyStyle) {
                            return name;
                        }
                        return (vendorProps[name] = vendorPropName(name) || name);
                    }

                    var // Swappable if display is none or starts with table
                        // except "table", "table-cell", or "table-caption"
                        // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
                        rdisplayswap = /^(none|table(?!-c[ea]).+)/,
                        cssShow = { position: 'absolute', visibility: 'hidden', display: 'block' },
                        cssNormalTransform = {
                            letterSpacing: '0',
                            fontWeight: '400',
                        };

                    function setPositiveNumber(_elem, value, subtract) {
                        // Any relative (+/-) values have already been
                        // normalized at this point
                        var matches = rcssNum.exec(value);
                        return matches
                            ? // Guard against undefined "subtract", e.g., when used as in cssHooks
                              Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || 'px')
                            : value;
                    }

                    function boxModelAdjustment(
                        elem,
                        dimension,
                        box,
                        isBorderBox,
                        styles,
                        computedVal,
                    ) {
                        var i = dimension === 'width' ? 1 : 0,
                            extra = 0,
                            delta = 0,
                            marginDelta = 0;

                        // Adjustment may not be necessary
                        if (box === (isBorderBox ? 'border' : 'content')) {
                            return 0;
                        }

                        for (; i < 4; i += 2) {
                            // Both box models exclude margin
                            // Count margin delta separately to only add it after scroll gutter adjustment.
                            // This is needed to make negative margins work with `outerHeight( true )` (gh-3982).
                            if (box === 'margin') {
                                marginDelta += jQuery.css(elem, box + cssExpand[i], true, styles);
                            }

                            // If we get here with a content-box, we're seeking "padding" or "border" or "margin"
                            if (!isBorderBox) {
                                // Add padding
                                delta += jQuery.css(elem, 'padding' + cssExpand[i], true, styles);

                                // For "border" or "margin", add border
                                if (box !== 'padding') {
                                    delta += jQuery.css(
                                        elem,
                                        'border' + cssExpand[i] + 'Width',
                                        true,
                                        styles,
                                    );

                                    // But still keep track of it otherwise
                                } else {
                                    extra += jQuery.css(
                                        elem,
                                        'border' + cssExpand[i] + 'Width',
                                        true,
                                        styles,
                                    );
                                }

                                // If we get here with a border-box (content + padding + border), we're seeking "content" or
                                // "padding" or "margin"
                            } else {
                                // For "content", subtract padding
                                if (box === 'content') {
                                    delta -= jQuery.css(
                                        elem,
                                        'padding' + cssExpand[i],
                                        true,
                                        styles,
                                    );
                                }

                                // For "content" or "padding", subtract border
                                if (box !== 'margin') {
                                    delta -= jQuery.css(
                                        elem,
                                        'border' + cssExpand[i] + 'Width',
                                        true,
                                        styles,
                                    );
                                }
                            }
                        }

                        // Account for positive content-box scroll gutter when requested by providing computedVal
                        if (!isBorderBox && computedVal >= 0) {
                            // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
                            // Assuming integer scroll gutter, subtract the rest and round down
                            delta +=
                                Math.max(
                                    0,
                                    Math.ceil(
                                        elem[
                                            'offset' +
                                                dimension[0].toUpperCase() +
                                                dimension.slice(1)
                                        ] -
                                            computedVal -
                                            delta -
                                            extra -
                                            0.5,

                                        // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
                                        // Use an explicit zero to avoid NaN (gh-3964)
                                    ),
                                ) || 0;
                        }

                        return delta + marginDelta;
                    }

                    function getWidthOrHeight(elem, dimension, extra) {
                        // Start with computed style
                        var styles = getStyles(elem),
                            // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
                            // Fake content-box until we know it's needed to know the true value.
                            boxSizingNeeded = !support.boxSizingReliable() || extra,
                            isBorderBox =
                                boxSizingNeeded &&
                                jQuery.css(elem, 'boxSizing', false, styles) === 'border-box',
                            valueIsBorderBox = isBorderBox,
                            val = curCSS(elem, dimension, styles),
                            offsetProp = 'offset' + dimension[0].toUpperCase() + dimension.slice(1);

                        // Support: Firefox <=54
                        // Return a confounding non-pixel value or feign ignorance, as appropriate.
                        if (rnumnonpx.test(val)) {
                            if (!extra) {
                                return val;
                            }
                            val = 'auto';
                        }

                        // Support: IE 9 - 11 only
                        // Use offsetWidth/offsetHeight for when box sizing is unreliable.
                        // In those cases, the computed value can be trusted to be border-box.
                        if (
                            ((!support.boxSizingReliable() && isBorderBox) ||
                                // Support: IE 10 - 11+, Edge 15 - 18+
                                // IE/Edge misreport `getComputedStyle` of table rows with width/height
                                // set in CSS while `offset*` properties report correct values.
                                // Interestingly, in some cases IE 9 doesn't suffer from this issue.
                                (!support.reliableTrDimensions() && nodeName(elem, 'tr')) ||
                                // Fall back to offsetWidth/offsetHeight when value is "auto"
                                // This happens for inline elements with no explicit setting (gh-3571)
                                val === 'auto' ||
                                // Support: Android <=4.1 - 4.3 only
                                // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
                                (!parseFloat(val) &&
                                    jQuery.css(elem, 'display', false, styles) === 'inline')) &&
                            // Make sure the element is visible & connected
                            elem.getClientRects().length
                        ) {
                            isBorderBox =
                                jQuery.css(elem, 'boxSizing', false, styles) === 'border-box';

                            // Where available, offsetWidth/offsetHeight approximate border box dimensions.
                            // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
                            // retrieved value as a content box dimension.
                            valueIsBorderBox = offsetProp in elem;
                            if (valueIsBorderBox) {
                                val = elem[offsetProp];
                            }
                        }

                        // Normalize "" and auto
                        val = parseFloat(val) || 0;

                        // Adjust for the element's box model
                        return (
                            val +
                            boxModelAdjustment(
                                elem,
                                dimension,
                                extra || (isBorderBox ? 'border' : 'content'),
                                valueIsBorderBox,
                                styles,

                                // Provide the current computed size to request scroll gutter calculation (gh-3589)
                                val,
                            ) +
                            'px'
                        );
                    }

                    jQuery.extend({
                        // Add in style property hooks for overriding the default
                        // behavior of getting and setting a style property
                        cssHooks: {
                            opacity: {
                                get: function (elem, computed) {
                                    if (computed) {
                                        // We should always get a number back from opacity
                                        var ret = curCSS(elem, 'opacity');
                                        return ret === '' ? '1' : ret;
                                    }
                                },
                            },
                        },

                        // Don't automatically add "px" to these possibly-unitless properties
                        cssNumber: {
                            animationIterationCount: true,
                            aspectRatio: true,
                            borderImageSlice: true,
                            columnCount: true,
                            flexGrow: true,
                            flexShrink: true,
                            fontWeight: true,
                            gridArea: true,
                            gridColumn: true,
                            gridColumnEnd: true,
                            gridColumnStart: true,
                            gridRow: true,
                            gridRowEnd: true,
                            gridRowStart: true,
                            lineHeight: true,
                            opacity: true,
                            order: true,
                            orphans: true,
                            scale: true,
                            widows: true,
                            zIndex: true,
                            zoom: true,

                            // SVG-related
                            fillOpacity: true,
                            floodOpacity: true,
                            stopOpacity: true,
                            strokeMiterlimit: true,
                            strokeOpacity: true,
                        },

                        // Add in properties whose names you wish to fix before
                        // setting or getting the value
                        cssProps: {},

                        // Get and set the style property on a DOM Node
                        style: function (elem, name, value, extra) {
                            // Don't set styles on text and comment nodes
                            if (
                                !elem ||
                                elem.nodeType === 3 ||
                                elem.nodeType === 8 ||
                                !elem.style
                            ) {
                                return;
                            }

                            // Make sure that we're working with the right name
                            var ret,
                                type,
                                hooks,
                                origName = camelCase(name),
                                isCustomProp = rcustomProp.test(name),
                                style = elem.style;

                            // Make sure that we're working with the right name. We don't
                            // want to query the value if it is a CSS custom property
                            // since they are user-defined.
                            if (!isCustomProp) {
                                name = finalPropName(origName);
                            }

                            // Gets hook for the prefixed version, then unprefixed version
                            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

                            // Check if we're setting a value
                            if (value !== undefined) {
                                type = typeof value;

                                // Convert "+=" or "-=" to relative numbers (trac-7345)
                                if (type === 'string' && (ret = rcssNum.exec(value)) && ret[1]) {
                                    value = adjustCSS(elem, name, ret);

                                    // Fixes bug trac-9237
                                    type = 'number';
                                }

                                // Make sure that null and NaN values aren't set (trac-7116)
                                if (value == null || value !== value) {
                                    return;
                                }

                                // If a number was passed in, add the unit (except for certain CSS properties)
                                // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
                                // "px" to a few hardcoded values.
                                if (type === 'number' && !isCustomProp) {
                                    value +=
                                        (ret && ret[3]) || (jQuery.cssNumber[origName] ? '' : 'px');
                                }

                                // background-* props affect original clone's values
                                if (
                                    !support.clearCloneStyle &&
                                    value === '' &&
                                    name.indexOf('background') === 0
                                ) {
                                    style[name] = 'inherit';
                                }

                                // If a hook was provided, use that value, otherwise just set the specified value
                                if (
                                    !hooks ||
                                    !('set' in hooks) ||
                                    (value = hooks.set(elem, value, extra)) !== undefined
                                ) {
                                    if (isCustomProp) {
                                        style.setProperty(name, value);
                                    } else {
                                        style[name] = value;
                                    }
                                }
                            } else {
                                // If a hook was provided get the non-computed value from there
                                if (
                                    hooks &&
                                    'get' in hooks &&
                                    (ret = hooks.get(elem, false, extra)) !== undefined
                                ) {
                                    return ret;
                                }

                                // Otherwise just get the value from the style object
                                return style[name];
                            }
                        },

                        css: function (elem, name, extra, styles) {
                            var val,
                                num,
                                hooks,
                                origName = camelCase(name),
                                isCustomProp = rcustomProp.test(name);

                            // Make sure that we're working with the right name. We don't
                            // want to modify the value if it is a CSS custom property
                            // since they are user-defined.
                            if (!isCustomProp) {
                                name = finalPropName(origName);
                            }

                            // Try prefixed name followed by the unprefixed name
                            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

                            // If a hook was provided get the computed value from there
                            if (hooks && 'get' in hooks) {
                                val = hooks.get(elem, true, extra);
                            }

                            // Otherwise, if a way to get the computed value exists, use that
                            if (val === undefined) {
                                val = curCSS(elem, name, styles);
                            }

                            // Convert "normal" to computed value
                            if (val === 'normal' && name in cssNormalTransform) {
                                val = cssNormalTransform[name];
                            }

                            // Make numeric if forced or a qualifier was provided and val looks numeric
                            if (extra === '' || extra) {
                                num = parseFloat(val);
                                return extra === true || isFinite(num) ? num || 0 : val;
                            }

                            return val;
                        },
                    });

                    jQuery.each(['height', 'width'], function (_i, dimension) {
                        jQuery.cssHooks[dimension] = {
                            get: function (elem, computed, extra) {
                                if (computed) {
                                    // Certain elements can have dimension info if we invisibly show them
                                    // but it must have a current display style that would benefit
                                    return rdisplayswap.test(jQuery.css(elem, 'display')) &&
                                        // Support: Safari 8+
                                        // Table columns in Safari have non-zero offsetWidth & zero
                                        // getBoundingClientRect().width unless display is changed.
                                        // Support: IE <=11 only
                                        // Running getBoundingClientRect on a disconnected node
                                        // in IE throws an error.
                                        (!elem.getClientRects().length ||
                                            !elem.getBoundingClientRect().width)
                                        ? swap(elem, cssShow, function () {
                                              return getWidthOrHeight(elem, dimension, extra);
                                          })
                                        : getWidthOrHeight(elem, dimension, extra);
                                }
                            },

                            set: function (elem, value, extra) {
                                var matches,
                                    styles = getStyles(elem),
                                    // Only read styles.position if the test has a chance to fail
                                    // to avoid forcing a reflow.
                                    scrollboxSizeBuggy =
                                        !support.scrollboxSize() && styles.position === 'absolute',
                                    // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
                                    boxSizingNeeded = scrollboxSizeBuggy || extra,
                                    isBorderBox =
                                        boxSizingNeeded &&
                                        jQuery.css(elem, 'boxSizing', false, styles) ===
                                            'border-box',
                                    subtract = extra
                                        ? boxModelAdjustment(
                                              elem,
                                              dimension,
                                              extra,
                                              isBorderBox,
                                              styles,
                                          )
                                        : 0;

                                // Account for unreliable border-box dimensions by comparing offset* to computed and
                                // faking a content-box to get border and padding (gh-3699)
                                if (isBorderBox && scrollboxSizeBuggy) {
                                    subtract -= Math.ceil(
                                        elem[
                                            'offset' +
                                                dimension[0].toUpperCase() +
                                                dimension.slice(1)
                                        ] -
                                            parseFloat(styles[dimension]) -
                                            boxModelAdjustment(
                                                elem,
                                                dimension,
                                                'border',
                                                false,
                                                styles,
                                            ) -
                                            0.5,
                                    );
                                }

                                // Convert to pixels if value adjustment is needed
                                if (
                                    subtract &&
                                    (matches = rcssNum.exec(value)) &&
                                    (matches[3] || 'px') !== 'px'
                                ) {
                                    elem.style[dimension] = value;
                                    value = jQuery.css(elem, dimension);
                                }

                                return setPositiveNumber(elem, value, subtract);
                            },
                        };
                    });

                    jQuery.cssHooks.marginLeft = addGetHookIf(
                        support.reliableMarginLeft,
                        function (elem, computed) {
                            if (computed) {
                                return (
                                    (parseFloat(curCSS(elem, 'marginLeft')) ||
                                        elem.getBoundingClientRect().left -
                                            swap(elem, { marginLeft: 0 }, function () {
                                                return elem.getBoundingClientRect().left;
                                            })) + 'px'
                                );
                            }
                        },
                    );

                    // These hooks are used by animate to expand properties
                    jQuery.each(
                        {
                            margin: '',
                            padding: '',
                            border: 'Width',
                        },
                        function (prefix, suffix) {
                            jQuery.cssHooks[prefix + suffix] = {
                                expand: function (value) {
                                    var i = 0,
                                        expanded = {},
                                        // Assumes a single number if not a string
                                        parts =
                                            typeof value === 'string' ? value.split(' ') : [value];

                                    for (; i < 4; i++) {
                                        expanded[prefix + cssExpand[i] + suffix] =
                                            parts[i] || parts[i - 2] || parts[0];
                                    }

                                    return expanded;
                                },
                            };

                            if (prefix !== 'margin') {
                                jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
                            }
                        },
                    );

                    jQuery.fn.extend({
                        css: function (name, value) {
                            return access(
                                this,
                                function (elem, name, value) {
                                    var styles,
                                        len,
                                        map = {},
                                        i = 0;

                                    if (Array.isArray(name)) {
                                        styles = getStyles(elem);
                                        len = name.length;

                                        for (; i < len; i++) {
                                            map[name[i]] = jQuery.css(elem, name[i], false, styles);
                                        }

                                        return map;
                                    }

                                    return value !== undefined
                                        ? jQuery.style(elem, name, value)
                                        : jQuery.css(elem, name);
                                },
                                name,
                                value,
                                arguments.length > 1,
                            );
                        },
                    });

                    function Tween(elem, options, prop, end, easing) {
                        return new Tween.prototype.init(elem, options, prop, end, easing);
                    }
                    jQuery.Tween = Tween;

                    Tween.prototype = {
                        constructor: Tween,
                        init: function (elem, options, prop, end, easing, unit) {
                            this.elem = elem;
                            this.prop = prop;
                            this.easing = easing || jQuery.easing._default;
                            this.options = options;
                            this.start = this.now = this.cur();
                            this.end = end;
                            this.unit = unit || (jQuery.cssNumber[prop] ? '' : 'px');
                        },
                        cur: function () {
                            var hooks = Tween.propHooks[this.prop];

                            return hooks && hooks.get
                                ? hooks.get(this)
                                : Tween.propHooks._default.get(this);
                        },
                        run: function (percent) {
                            var eased,
                                hooks = Tween.propHooks[this.prop];

                            if (this.options.duration) {
                                this.pos = eased = jQuery.easing[this.easing](
                                    percent,
                                    this.options.duration * percent,
                                    0,
                                    1,
                                    this.options.duration,
                                );
                            } else {
                                this.pos = eased = percent;
                            }
                            this.now = (this.end - this.start) * eased + this.start;

                            if (this.options.step) {
                                this.options.step.call(this.elem, this.now, this);
                            }

                            if (hooks && hooks.set) {
                                hooks.set(this);
                            } else {
                                Tween.propHooks._default.set(this);
                            }
                            return this;
                        },
                    };

                    Tween.prototype.init.prototype = Tween.prototype;

                    Tween.propHooks = {
                        _default: {
                            get: function (tween) {
                                var result;

                                // Use a property on the element directly when it is not a DOM element,
                                // or when there is no matching style property that exists.
                                if (
                                    tween.elem.nodeType !== 1 ||
                                    (tween.elem[tween.prop] != null &&
                                        tween.elem.style[tween.prop] == null)
                                ) {
                                    return tween.elem[tween.prop];
                                }

                                // Passing an empty string as a 3rd parameter to .css will automatically
                                // attempt a parseFloat and fallback to a string if the parse fails.
                                // Simple values such as "10px" are parsed to Float;
                                // complex values such as "rotate(1rad)" are returned as-is.
                                result = jQuery.css(tween.elem, tween.prop, '');

                                // Empty strings, null, undefined and "auto" are converted to 0.
                                return !result || result === 'auto' ? 0 : result;
                            },
                            set: function (tween) {
                                // Use step hook for back compat.
                                // Use cssHook if its there.
                                // Use .style if available and use plain properties where available.
                                if (jQuery.fx.step[tween.prop]) {
                                    jQuery.fx.step[tween.prop](tween);
                                } else if (
                                    tween.elem.nodeType === 1 &&
                                    (jQuery.cssHooks[tween.prop] ||
                                        tween.elem.style[finalPropName(tween.prop)] != null)
                                ) {
                                    jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
                                } else {
                                    tween.elem[tween.prop] = tween.now;
                                }
                            },
                        },
                    };

                    // Support: IE <=9 only
                    // Panic based approach to setting things on disconnected nodes
                    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
                        set: function (tween) {
                            if (tween.elem.nodeType && tween.elem.parentNode) {
                                tween.elem[tween.prop] = tween.now;
                            }
                        },
                    };

                    jQuery.easing = {
                        linear: function (p) {
                            return p;
                        },
                        swing: function (p) {
                            return 0.5 - Math.cos(p * Math.PI) / 2;
                        },
                        _default: 'swing',
                    };

                    jQuery.fx = Tween.prototype.init;

                    // Back compat <1.8 extension point
                    jQuery.fx.step = {};

                    var fxNow,
                        inProgress,
                        rfxtypes = /^(?:toggle|show|hide)$/,
                        rrun = /queueHooks$/;

                    function schedule() {
                        if (inProgress) {
                            if (document.hidden === false && window.requestAnimationFrame) {
                                window.requestAnimationFrame(schedule);
                            } else {
                                window.setTimeout(schedule, jQuery.fx.interval);
                            }

                            jQuery.fx.tick();
                        }
                    }

                    // Animations created synchronously will run synchronously
                    function createFxNow() {
                        window.setTimeout(function () {
                            fxNow = undefined;
                        });
                        return (fxNow = Date.now());
                    }

                    // Generate parameters to create a standard animation
                    function genFx(type, includeWidth) {
                        var which,
                            i = 0,
                            attrs = { height: type };

                        // If we include width, step value is 1 to do all cssExpand values,
                        // otherwise step value is 2 to skip over Left and Right
                        includeWidth = includeWidth ? 1 : 0;
                        for (; i < 4; i += 2 - includeWidth) {
                            which = cssExpand[i];
                            attrs['margin' + which] = attrs['padding' + which] = type;
                        }

                        if (includeWidth) {
                            attrs.opacity = attrs.width = type;
                        }

                        return attrs;
                    }

                    function createTween(value, prop, animation) {
                        var tween,
                            collection = (Animation.tweeners[prop] || []).concat(
                                Animation.tweeners['*'],
                            ),
                            index = 0,
                            length = collection.length;
                        for (; index < length; index++) {
                            if ((tween = collection[index].call(animation, prop, value))) {
                                // We're done with this property
                                return tween;
                            }
                        }
                    }

                    function defaultPrefilter(elem, props, opts) {
                        var prop,
                            value,
                            toggle,
                            hooks,
                            oldfire,
                            propTween,
                            restoreDisplay,
                            display,
                            isBox = 'width' in props || 'height' in props,
                            anim = this,
                            orig = {},
                            style = elem.style,
                            hidden = elem.nodeType && isHiddenWithinTree(elem),
                            dataShow = dataPriv.get(elem, 'fxshow');

                        // Queue-skipping animations hijack the fx hooks
                        if (!opts.queue) {
                            hooks = jQuery._queueHooks(elem, 'fx');
                            if (hooks.unqueued == null) {
                                hooks.unqueued = 0;
                                oldfire = hooks.empty.fire;
                                hooks.empty.fire = function () {
                                    if (!hooks.unqueued) {
                                        oldfire();
                                    }
                                };
                            }
                            hooks.unqueued++;

                            anim.always(function () {
                                // Ensure the complete handler is called before this completes
                                anim.always(function () {
                                    hooks.unqueued--;
                                    if (!jQuery.queue(elem, 'fx').length) {
                                        hooks.empty.fire();
                                    }
                                });
                            });
                        }

                        // Detect show/hide animations
                        for (prop in props) {
                            value = props[prop];
                            if (rfxtypes.test(value)) {
                                delete props[prop];
                                toggle = toggle || value === 'toggle';
                                if (value === (hidden ? 'hide' : 'show')) {
                                    // Pretend to be hidden if this is a "show" and
                                    // there is still data from a stopped show/hide
                                    if (
                                        value === 'show' &&
                                        dataShow &&
                                        dataShow[prop] !== undefined
                                    ) {
                                        hidden = true;

                                        // Ignore all other no-op show/hide data
                                    } else {
                                        continue;
                                    }
                                }
                                orig[prop] =
                                    (dataShow && dataShow[prop]) || jQuery.style(elem, prop);
                            }
                        }

                        // Bail out if this is a no-op like .hide().hide()
                        propTween = !jQuery.isEmptyObject(props);
                        if (!propTween && jQuery.isEmptyObject(orig)) {
                            return;
                        }

                        // Restrict "overflow" and "display" styles during box animations
                        if (isBox && elem.nodeType === 1) {
                            // Support: IE <=9 - 11, Edge 12 - 15
                            // Record all 3 overflow attributes because IE does not infer the shorthand
                            // from identically-valued overflowX and overflowY and Edge just mirrors
                            // the overflowX value there.
                            opts.overflow = [style.overflow, style.overflowX, style.overflowY];

                            // Identify a display type, preferring old show/hide data over the CSS cascade
                            restoreDisplay = dataShow && dataShow.display;
                            if (restoreDisplay == null) {
                                restoreDisplay = dataPriv.get(elem, 'display');
                            }
                            display = jQuery.css(elem, 'display');
                            if (display === 'none') {
                                if (restoreDisplay) {
                                    display = restoreDisplay;
                                } else {
                                    // Get nonempty value(s) by temporarily forcing visibility
                                    showHide([elem], true);
                                    restoreDisplay = elem.style.display || restoreDisplay;
                                    display = jQuery.css(elem, 'display');
                                    showHide([elem]);
                                }
                            }

                            // Animate inline elements as inline-block
                            if (
                                display === 'inline' ||
                                (display === 'inline-block' && restoreDisplay != null)
                            ) {
                                if (jQuery.css(elem, 'float') === 'none') {
                                    // Restore the original display value at the end of pure show/hide animations
                                    if (!propTween) {
                                        anim.done(function () {
                                            style.display = restoreDisplay;
                                        });
                                        if (restoreDisplay == null) {
                                            display = style.display;
                                            restoreDisplay = display === 'none' ? '' : display;
                                        }
                                    }
                                    style.display = 'inline-block';
                                }
                            }
                        }

                        if (opts.overflow) {
                            style.overflow = 'hidden';
                            anim.always(function () {
                                style.overflow = opts.overflow[0];
                                style.overflowX = opts.overflow[1];
                                style.overflowY = opts.overflow[2];
                            });
                        }

                        // Implement show/hide animations
                        propTween = false;
                        for (prop in orig) {
                            // General show/hide setup for this element animation
                            if (!propTween) {
                                if (dataShow) {
                                    if ('hidden' in dataShow) {
                                        hidden = dataShow.hidden;
                                    }
                                } else {
                                    dataShow = dataPriv.access(elem, 'fxshow', {
                                        display: restoreDisplay,
                                    });
                                }

                                // Store hidden/visible for toggle so `.stop().toggle()` "reverses"
                                if (toggle) {
                                    dataShow.hidden = !hidden;
                                }

                                // Show elements before animating them
                                if (hidden) {
                                    showHide([elem], true);
                                }

                                /* eslint-disable no-loop-func */

                                anim.done(function () {
                                    /* eslint-enable no-loop-func */

                                    // The final step of a "hide" animation is actually hiding the element
                                    if (!hidden) {
                                        showHide([elem]);
                                    }
                                    dataPriv.remove(elem, 'fxshow');
                                    for (prop in orig) {
                                        jQuery.style(elem, prop, orig[prop]);
                                    }
                                });
                            }

                            // Per-property setup
                            propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
                            if (!(prop in dataShow)) {
                                dataShow[prop] = propTween.start;
                                if (hidden) {
                                    propTween.end = propTween.start;
                                    propTween.start = 0;
                                }
                            }
                        }
                    }

                    function propFilter(props, specialEasing) {
                        var index, name, easing, value, hooks;

                        // camelCase, specialEasing and expand cssHook pass
                        for (index in props) {
                            name = camelCase(index);
                            easing = specialEasing[name];
                            value = props[index];
                            if (Array.isArray(value)) {
                                easing = value[1];
                                value = props[index] = value[0];
                            }

                            if (index !== name) {
                                props[name] = value;
                                delete props[index];
                            }

                            hooks = jQuery.cssHooks[name];
                            if (hooks && 'expand' in hooks) {
                                value = hooks.expand(value);
                                delete props[name];

                                // Not quite $.extend, this won't overwrite existing keys.
                                // Reusing 'index' because we have the correct "name"
                                for (index in value) {
                                    if (!(index in props)) {
                                        props[index] = value[index];
                                        specialEasing[index] = easing;
                                    }
                                }
                            } else {
                                specialEasing[name] = easing;
                            }
                        }
                    }

                    function Animation(elem, properties, options) {
                        var result,
                            stopped,
                            index = 0,
                            length = Animation.prefilters.length,
                            deferred = jQuery.Deferred().always(function () {
                                // Don't match elem in the :animated selector
                                delete tick.elem;
                            }),
                            tick = function () {
                                if (stopped) {
                                    return false;
                                }
                                var currentTime = fxNow || createFxNow(),
                                    remaining = Math.max(
                                        0,
                                        animation.startTime + animation.duration - currentTime,
                                    ),
                                    // Support: Android 2.3 only
                                    // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (trac-12497)
                                    temp = remaining / animation.duration || 0,
                                    percent = 1 - temp,
                                    index = 0,
                                    length = animation.tweens.length;

                                for (; index < length; index++) {
                                    animation.tweens[index].run(percent);
                                }

                                deferred.notifyWith(elem, [animation, percent, remaining]);

                                // If there's more to do, yield
                                if (percent < 1 && length) {
                                    return remaining;
                                }

                                // If this was an empty animation, synthesize a final progress notification
                                if (!length) {
                                    deferred.notifyWith(elem, [animation, 1, 0]);
                                }

                                // Resolve the animation and report its conclusion
                                deferred.resolveWith(elem, [animation]);
                                return false;
                            },
                            animation = deferred.promise({
                                elem: elem,
                                props: jQuery.extend({}, properties),
                                opts: jQuery.extend(
                                    true,
                                    {
                                        specialEasing: {},
                                        easing: jQuery.easing._default,
                                    },
                                    options,
                                ),
                                originalProperties: properties,
                                originalOptions: options,
                                startTime: fxNow || createFxNow(),
                                duration: options.duration,
                                tweens: [],
                                createTween: function (prop, end) {
                                    var tween = jQuery.Tween(
                                        elem,
                                        animation.opts,
                                        prop,
                                        end,
                                        animation.opts.specialEasing[prop] || animation.opts.easing,
                                    );
                                    animation.tweens.push(tween);
                                    return tween;
                                },
                                stop: function (gotoEnd) {
                                    var index = 0,
                                        // If we are going to the end, we want to run all the tweens
                                        // otherwise we skip this part
                                        length = gotoEnd ? animation.tweens.length : 0;
                                    if (stopped) {
                                        return this;
                                    }
                                    stopped = true;
                                    for (; index < length; index++) {
                                        animation.tweens[index].run(1);
                                    }

                                    // Resolve when we played the last frame; otherwise, reject
                                    if (gotoEnd) {
                                        deferred.notifyWith(elem, [animation, 1, 0]);
                                        deferred.resolveWith(elem, [animation, gotoEnd]);
                                    } else {
                                        deferred.rejectWith(elem, [animation, gotoEnd]);
                                    }
                                    return this;
                                },
                            }),
                            props = animation.props;

                        propFilter(props, animation.opts.specialEasing);

                        for (; index < length; index++) {
                            result = Animation.prefilters[index].call(
                                animation,
                                elem,
                                props,
                                animation.opts,
                            );
                            if (result) {
                                if (isFunction(result.stop)) {
                                    jQuery._queueHooks(animation.elem, animation.opts.queue).stop =
                                        result.stop.bind(result);
                                }
                                return result;
                            }
                        }

                        jQuery.map(props, createTween, animation);

                        if (isFunction(animation.opts.start)) {
                            animation.opts.start.call(elem, animation);
                        }

                        // Attach callbacks from options
                        animation
                            .progress(animation.opts.progress)
                            .done(animation.opts.done, animation.opts.complete)
                            .fail(animation.opts.fail)
                            .always(animation.opts.always);

                        jQuery.fx.timer(
                            jQuery.extend(tick, {
                                elem: elem,
                                anim: animation,
                                queue: animation.opts.queue,
                            }),
                        );

                        return animation;
                    }

                    jQuery.Animation = jQuery.extend(Animation, {
                        tweeners: {
                            '*': [
                                function (prop, value) {
                                    var tween = this.createTween(prop, value);
                                    adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
                                    return tween;
                                },
                            ],
                        },

                        tweener: function (props, callback) {
                            if (isFunction(props)) {
                                callback = props;
                                props = ['*'];
                            } else {
                                props = props.match(rnothtmlwhite);
                            }

                            var prop,
                                index = 0,
                                length = props.length;

                            for (; index < length; index++) {
                                prop = props[index];
                                Animation.tweeners[prop] = Animation.tweeners[prop] || [];
                                Animation.tweeners[prop].unshift(callback);
                            }
                        },

                        prefilters: [defaultPrefilter],

                        prefilter: function (callback, prepend) {
                            if (prepend) {
                                Animation.prefilters.unshift(callback);
                            } else {
                                Animation.prefilters.push(callback);
                            }
                        },
                    });

                    jQuery.speed = function (speed, easing, fn) {
                        var opt =
                            speed && typeof speed === 'object'
                                ? jQuery.extend({}, speed)
                                : {
                                      complete:
                                          fn || (!fn && easing) || (isFunction(speed) && speed),
                                      duration: speed,
                                      easing:
                                          (fn && easing) ||
                                          (easing && !isFunction(easing) && easing),
                                  };

                        // Go to the end state if fx are off
                        if (jQuery.fx.off) {
                            opt.duration = 0;
                        } else {
                            if (typeof opt.duration !== 'number') {
                                if (opt.duration in jQuery.fx.speeds) {
                                    opt.duration = jQuery.fx.speeds[opt.duration];
                                } else {
                                    opt.duration = jQuery.fx.speeds._default;
                                }
                            }
                        }

                        // Normalize opt.queue - true/undefined/null -> "fx"
                        if (opt.queue == null || opt.queue === true) {
                            opt.queue = 'fx';
                        }

                        // Queueing
                        opt.old = opt.complete;

                        opt.complete = function () {
                            if (isFunction(opt.old)) {
                                opt.old.call(this);
                            }

                            if (opt.queue) {
                                jQuery.dequeue(this, opt.queue);
                            }
                        };

                        return opt;
                    };

                    jQuery.fn.extend({
                        fadeTo: function (speed, to, easing, callback) {
                            // Show any hidden elements after setting opacity to 0
                            return (
                                this.filter(isHiddenWithinTree)
                                    .css('opacity', 0)
                                    .show()

                                    // Animate to the value specified
                                    .end()
                                    .animate({ opacity: to }, speed, easing, callback)
                            );
                        },
                        animate: function (prop, speed, easing, callback) {
                            var empty = jQuery.isEmptyObject(prop),
                                optall = jQuery.speed(speed, easing, callback),
                                doAnimation = function () {
                                    // Operate on a copy of prop so per-property easing won't be lost
                                    var anim = Animation(this, jQuery.extend({}, prop), optall);

                                    // Empty animations, or finishing resolves immediately
                                    if (empty || dataPriv.get(this, 'finish')) {
                                        anim.stop(true);
                                    }
                                };

                            doAnimation.finish = doAnimation;

                            return empty || optall.queue === false
                                ? this.each(doAnimation)
                                : this.queue(optall.queue, doAnimation);
                        },
                        stop: function (type, clearQueue, gotoEnd) {
                            var stopQueue = function (hooks) {
                                var stop = hooks.stop;
                                delete hooks.stop;
                                stop(gotoEnd);
                            };

                            if (typeof type !== 'string') {
                                gotoEnd = clearQueue;
                                clearQueue = type;
                                type = undefined;
                            }
                            if (clearQueue) {
                                this.queue(type || 'fx', []);
                            }

                            return this.each(function () {
                                var dequeue = true,
                                    index = type != null && type + 'queueHooks',
                                    timers = jQuery.timers,
                                    data = dataPriv.get(this);

                                if (index) {
                                    if (data[index] && data[index].stop) {
                                        stopQueue(data[index]);
                                    }
                                } else {
                                    for (index in data) {
                                        if (data[index] && data[index].stop && rrun.test(index)) {
                                            stopQueue(data[index]);
                                        }
                                    }
                                }

                                for (index = timers.length; index--; ) {
                                    if (
                                        timers[index].elem === this &&
                                        (type == null || timers[index].queue === type)
                                    ) {
                                        timers[index].anim.stop(gotoEnd);
                                        dequeue = false;
                                        timers.splice(index, 1);
                                    }
                                }

                                // Start the next in the queue if the last step wasn't forced.
                                // Timers currently will call their complete callbacks, which
                                // will dequeue but only if they were gotoEnd.
                                if (dequeue || !gotoEnd) {
                                    jQuery.dequeue(this, type);
                                }
                            });
                        },
                        finish: function (type) {
                            if (type !== false) {
                                type = type || 'fx';
                            }
                            return this.each(function () {
                                var index,
                                    data = dataPriv.get(this),
                                    queue = data[type + 'queue'],
                                    hooks = data[type + 'queueHooks'],
                                    timers = jQuery.timers,
                                    length = queue ? queue.length : 0;

                                // Enable finishing flag on private data
                                data.finish = true;

                                // Empty the queue first
                                jQuery.queue(this, type, []);

                                if (hooks && hooks.stop) {
                                    hooks.stop.call(this, true);
                                }

                                // Look for any active animations, and finish them
                                for (index = timers.length; index--; ) {
                                    if (
                                        timers[index].elem === this &&
                                        timers[index].queue === type
                                    ) {
                                        timers[index].anim.stop(true);
                                        timers.splice(index, 1);
                                    }
                                }

                                // Look for any animations in the old queue and finish them
                                for (index = 0; index < length; index++) {
                                    if (queue[index] && queue[index].finish) {
                                        queue[index].finish.call(this);
                                    }
                                }

                                // Turn off finishing flag
                                delete data.finish;
                            });
                        },
                    });

                    jQuery.each(['toggle', 'show', 'hide'], function (_i, name) {
                        var cssFn = jQuery.fn[name];
                        jQuery.fn[name] = function (speed, easing, callback) {
                            return speed == null || typeof speed === 'boolean'
                                ? cssFn.apply(this, arguments)
                                : this.animate(genFx(name, true), speed, easing, callback);
                        };
                    });

                    // Generate shortcuts for custom animations
                    jQuery.each(
                        {
                            slideDown: genFx('show'),
                            slideUp: genFx('hide'),
                            slideToggle: genFx('toggle'),
                            fadeIn: { opacity: 'show' },
                            fadeOut: { opacity: 'hide' },
                            fadeToggle: { opacity: 'toggle' },
                        },
                        function (name, props) {
                            jQuery.fn[name] = function (speed, easing, callback) {
                                return this.animate(props, speed, easing, callback);
                            };
                        },
                    );

                    jQuery.timers = [];
                    jQuery.fx.tick = function () {
                        var timer,
                            i = 0,
                            timers = jQuery.timers;

                        fxNow = Date.now();

                        for (; i < timers.length; i++) {
                            timer = timers[i];

                            // Run the timer and safely remove it when done (allowing for external removal)
                            if (!timer() && timers[i] === timer) {
                                timers.splice(i--, 1);
                            }
                        }

                        if (!timers.length) {
                            jQuery.fx.stop();
                        }
                        fxNow = undefined;
                    };

                    jQuery.fx.timer = function (timer) {
                        jQuery.timers.push(timer);
                        jQuery.fx.start();
                    };

                    jQuery.fx.interval = 13;
                    jQuery.fx.start = function () {
                        if (inProgress) {
                            return;
                        }

                        inProgress = true;
                        schedule();
                    };

                    jQuery.fx.stop = function () {
                        inProgress = null;
                    };

                    jQuery.fx.speeds = {
                        slow: 600,
                        fast: 200,

                        // Default speed
                        _default: 400,
                    };

                    // Based off of the plugin by Clint Helfers, with permission.
                    jQuery.fn.delay = function (time, type) {
                        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
                        type = type || 'fx';

                        return this.queue(type, function (next, hooks) {
                            var timeout = window.setTimeout(next, time);
                            hooks.stop = function () {
                                window.clearTimeout(timeout);
                            };
                        });
                    };

                    (function () {
                        var input = document.createElement('input'),
                            select = document.createElement('select'),
                            opt = select.appendChild(document.createElement('option'));

                        input.type = 'checkbox';

                        // Support: Android <=4.3 only
                        // Default value for a checkbox should be "on"
                        support.checkOn = input.value !== '';

                        // Support: IE <=11 only
                        // Must access selectedIndex to make default options select
                        support.optSelected = opt.selected;

                        // Support: IE <=11 only
                        // An input loses its value after becoming a radio
                        input = document.createElement('input');
                        input.value = 't';
                        input.type = 'radio';
                        support.radioValue = input.value === 't';
                    })();

                    var boolHook,
                        attrHandle = jQuery.expr.attrHandle;

                    jQuery.fn.extend({
                        attr: function (name, value) {
                            return access(this, jQuery.attr, name, value, arguments.length > 1);
                        },

                        removeAttr: function (name) {
                            return this.each(function () {
                                jQuery.removeAttr(this, name);
                            });
                        },
                    });

                    jQuery.extend({
                        attr: function (elem, name, value) {
                            var ret,
                                hooks,
                                nType = elem.nodeType;

                            // Don't get/set attributes on text, comment and attribute nodes
                            if (nType === 3 || nType === 8 || nType === 2) {
                                return;
                            }

                            // Fallback to prop when attributes are not supported
                            if (typeof elem.getAttribute === 'undefined') {
                                return jQuery.prop(elem, name, value);
                            }

                            // Attribute hooks are determined by the lowercase version
                            // Grab necessary hook if one is defined
                            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                                hooks =
                                    jQuery.attrHooks[name.toLowerCase()] ||
                                    (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
                            }

                            if (value !== undefined) {
                                if (value === null) {
                                    jQuery.removeAttr(elem, name);
                                    return;
                                }

                                if (
                                    hooks &&
                                    'set' in hooks &&
                                    (ret = hooks.set(elem, value, name)) !== undefined
                                ) {
                                    return ret;
                                }

                                elem.setAttribute(name, value + '');
                                return value;
                            }

                            if (hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {
                                return ret;
                            }

                            ret = jQuery.find.attr(elem, name);

                            // Non-existent attributes return null, we normalize to undefined
                            return ret == null ? undefined : ret;
                        },

                        attrHooks: {
                            type: {
                                set: function (elem, value) {
                                    if (
                                        !support.radioValue &&
                                        value === 'radio' &&
                                        nodeName(elem, 'input')
                                    ) {
                                        var val = elem.value;
                                        elem.setAttribute('type', value);
                                        if (val) {
                                            elem.value = val;
                                        }
                                        return value;
                                    }
                                },
                            },
                        },

                        removeAttr: function (elem, value) {
                            var name,
                                i = 0,
                                // Attribute names can contain non-HTML whitespace characters
                                // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
                                attrNames = value && value.match(rnothtmlwhite);

                            if (attrNames && elem.nodeType === 1) {
                                while ((name = attrNames[i++])) {
                                    elem.removeAttribute(name);
                                }
                            }
                        },
                    });

                    // Hooks for boolean attributes
                    boolHook = {
                        set: function (elem, value, name) {
                            if (value === false) {
                                // Remove boolean attributes when set to false
                                jQuery.removeAttr(elem, name);
                            } else {
                                elem.setAttribute(name, name);
                            }
                            return name;
                        },
                    };

                    jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (_i, name) {
                        var getter = attrHandle[name] || jQuery.find.attr;

                        attrHandle[name] = function (elem, name, isXML) {
                            var ret,
                                handle,
                                lowercaseName = name.toLowerCase();

                            if (!isXML) {
                                // Avoid an infinite loop by temporarily removing this function from the getter
                                handle = attrHandle[lowercaseName];
                                attrHandle[lowercaseName] = ret;
                                ret = getter(elem, name, isXML) != null ? lowercaseName : null;
                                attrHandle[lowercaseName] = handle;
                            }
                            return ret;
                        };
                    });

                    var rfocusable = /^(?:input|select|textarea|button)$/i,
                        rclickable = /^(?:a|area)$/i;

                    jQuery.fn.extend({
                        prop: function (name, value) {
                            return access(this, jQuery.prop, name, value, arguments.length > 1);
                        },

                        removeProp: function (name) {
                            return this.each(function () {
                                delete this[jQuery.propFix[name] || name];
                            });
                        },
                    });

                    jQuery.extend({
                        prop: function (elem, name, value) {
                            var ret,
                                hooks,
                                nType = elem.nodeType;

                            // Don't get/set properties on text, comment and attribute nodes
                            if (nType === 3 || nType === 8 || nType === 2) {
                                return;
                            }

                            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                                // Fix name and attach hooks
                                name = jQuery.propFix[name] || name;
                                hooks = jQuery.propHooks[name];
                            }

                            if (value !== undefined) {
                                if (
                                    hooks &&
                                    'set' in hooks &&
                                    (ret = hooks.set(elem, value, name)) !== undefined
                                ) {
                                    return ret;
                                }

                                return (elem[name] = value);
                            }

                            if (hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {
                                return ret;
                            }

                            return elem[name];
                        },

                        propHooks: {
                            tabIndex: {
                                get: function (elem) {
                                    // Support: IE <=9 - 11 only
                                    // elem.tabIndex doesn't always return the
                                    // correct value when it hasn't been explicitly set
                                    // Use proper attribute retrieval (trac-12072)
                                    var tabindex = jQuery.find.attr(elem, 'tabindex');

                                    if (tabindex) {
                                        return parseInt(tabindex, 10);
                                    }

                                    if (
                                        rfocusable.test(elem.nodeName) ||
                                        (rclickable.test(elem.nodeName) && elem.href)
                                    ) {
                                        return 0;
                                    }

                                    return -1;
                                },
                            },
                        },

                        propFix: {
                            for: 'htmlFor',
                            class: 'className',
                        },
                    });

                    // Support: IE <=11 only
                    // Accessing the selectedIndex property
                    // forces the browser to respect setting selected
                    // on the option
                    // The getter ensures a default option is selected
                    // when in an optgroup
                    // eslint rule "no-unused-expressions" is disabled for this code
                    // since it considers such accessions noop
                    if (!support.optSelected) {
                        jQuery.propHooks.selected = {
                            get: function (elem) {
                                /* eslint no-unused-expressions: "off" */

                                var parent = elem.parentNode;
                                if (parent && parent.parentNode) {
                                    parent.parentNode.selectedIndex;
                                }
                                return null;
                            },
                            set: function (elem) {
                                /* eslint no-unused-expressions: "off" */

                                var parent = elem.parentNode;
                                if (parent) {
                                    parent.selectedIndex;

                                    if (parent.parentNode) {
                                        parent.parentNode.selectedIndex;
                                    }
                                }
                            },
                        };
                    }

                    jQuery.each(
                        [
                            'tabIndex',
                            'readOnly',
                            'maxLength',
                            'cellSpacing',
                            'cellPadding',
                            'rowSpan',
                            'colSpan',
                            'useMap',
                            'frameBorder',
                            'contentEditable',
                        ],
                        function () {
                            jQuery.propFix[this.toLowerCase()] = this;
                        },
                    );

                    // Strip and collapse whitespace according to HTML spec
                    // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
                    function stripAndCollapse(value) {
                        var tokens = value.match(rnothtmlwhite) || [];
                        return tokens.join(' ');
                    }

                    function getClass(elem) {
                        return (elem.getAttribute && elem.getAttribute('class')) || '';
                    }

                    function classesToArray(value) {
                        if (Array.isArray(value)) {
                            return value;
                        }
                        if (typeof value === 'string') {
                            return value.match(rnothtmlwhite) || [];
                        }
                        return [];
                    }

                    jQuery.fn.extend({
                        addClass: function (value) {
                            var classNames, cur, curValue, className, i, finalValue;

                            if (isFunction(value)) {
                                return this.each(function (j) {
                                    jQuery(this).addClass(value.call(this, j, getClass(this)));
                                });
                            }

                            classNames = classesToArray(value);

                            if (classNames.length) {
                                return this.each(function () {
                                    curValue = getClass(this);
                                    cur =
                                        this.nodeType === 1 &&
                                        ' ' + stripAndCollapse(curValue) + ' ';

                                    if (cur) {
                                        for (i = 0; i < classNames.length; i++) {
                                            className = classNames[i];
                                            if (cur.indexOf(' ' + className + ' ') < 0) {
                                                cur += className + ' ';
                                            }
                                        }

                                        // Only assign if different to avoid unneeded rendering.
                                        finalValue = stripAndCollapse(cur);
                                        if (curValue !== finalValue) {
                                            this.setAttribute('class', finalValue);
                                        }
                                    }
                                });
                            }

                            return this;
                        },

                        removeClass: function (value) {
                            var classNames, cur, curValue, className, i, finalValue;

                            if (isFunction(value)) {
                                return this.each(function (j) {
                                    jQuery(this).removeClass(value.call(this, j, getClass(this)));
                                });
                            }

                            if (!arguments.length) {
                                return this.attr('class', '');
                            }

                            classNames = classesToArray(value);

                            if (classNames.length) {
                                return this.each(function () {
                                    curValue = getClass(this);

                                    // This expression is here for better compressibility (see addClass)
                                    cur =
                                        this.nodeType === 1 &&
                                        ' ' + stripAndCollapse(curValue) + ' ';

                                    if (cur) {
                                        for (i = 0; i < classNames.length; i++) {
                                            className = classNames[i];

                                            // Remove *all* instances
                                            while (cur.indexOf(' ' + className + ' ') > -1) {
                                                cur = cur.replace(' ' + className + ' ', ' ');
                                            }
                                        }

                                        // Only assign if different to avoid unneeded rendering.
                                        finalValue = stripAndCollapse(cur);
                                        if (curValue !== finalValue) {
                                            this.setAttribute('class', finalValue);
                                        }
                                    }
                                });
                            }

                            return this;
                        },

                        toggleClass: function (value, stateVal) {
                            var classNames,
                                className,
                                i,
                                self,
                                type = typeof value,
                                isValidValue = type === 'string' || Array.isArray(value);

                            if (isFunction(value)) {
                                return this.each(function (i) {
                                    jQuery(this).toggleClass(
                                        value.call(this, i, getClass(this), stateVal),
                                        stateVal,
                                    );
                                });
                            }

                            if (typeof stateVal === 'boolean' && isValidValue) {
                                return stateVal ? this.addClass(value) : this.removeClass(value);
                            }

                            classNames = classesToArray(value);

                            return this.each(function () {
                                if (isValidValue) {
                                    // Toggle individual class names
                                    self = jQuery(this);

                                    for (i = 0; i < classNames.length; i++) {
                                        className = classNames[i];

                                        // Check each className given, space separated list
                                        if (self.hasClass(className)) {
                                            self.removeClass(className);
                                        } else {
                                            self.addClass(className);
                                        }
                                    }

                                    // Toggle whole class name
                                } else if (value === undefined || type === 'boolean') {
                                    className = getClass(this);
                                    if (className) {
                                        // Store className if set
                                        dataPriv.set(this, '__className__', className);
                                    }

                                    // If the element has a class name or if we're passed `false`,
                                    // then remove the whole classname (if there was one, the above saved it).
                                    // Otherwise bring back whatever was previously saved (if anything),
                                    // falling back to the empty string if nothing was stored.
                                    if (this.setAttribute) {
                                        this.setAttribute(
                                            'class',
                                            className || value === false
                                                ? ''
                                                : dataPriv.get(this, '__className__') || '',
                                        );
                                    }
                                }
                            });
                        },

                        hasClass: function (selector) {
                            var className,
                                elem,
                                i = 0;

                            className = ' ' + selector + ' ';
                            while ((elem = this[i++])) {
                                if (
                                    elem.nodeType === 1 &&
                                    (' ' + stripAndCollapse(getClass(elem)) + ' ').indexOf(
                                        className,
                                    ) > -1
                                ) {
                                    return true;
                                }
                            }

                            return false;
                        },
                    });

                    var rreturn = /\r/g;

                    jQuery.fn.extend({
                        val: function (value) {
                            var hooks,
                                ret,
                                valueIsFunction,
                                elem = this[0];

                            if (!arguments.length) {
                                if (elem) {
                                    hooks =
                                        jQuery.valHooks[elem.type] ||
                                        jQuery.valHooks[elem.nodeName.toLowerCase()];

                                    if (
                                        hooks &&
                                        'get' in hooks &&
                                        (ret = hooks.get(elem, 'value')) !== undefined
                                    ) {
                                        return ret;
                                    }

                                    ret = elem.value;

                                    // Handle most common string cases
                                    if (typeof ret === 'string') {
                                        return ret.replace(rreturn, '');
                                    }

                                    // Handle cases where value is null/undef or number
                                    return ret == null ? '' : ret;
                                }

                                return;
                            }

                            valueIsFunction = isFunction(value);

                            return this.each(function (i) {
                                var val;

                                if (this.nodeType !== 1) {
                                    return;
                                }

                                if (valueIsFunction) {
                                    val = value.call(this, i, jQuery(this).val());
                                } else {
                                    val = value;
                                }

                                // Treat null/undefined as ""; convert numbers to string
                                if (val == null) {
                                    val = '';
                                } else if (typeof val === 'number') {
                                    val += '';
                                } else if (Array.isArray(val)) {
                                    val = jQuery.map(val, function (value) {
                                        return value == null ? '' : value + '';
                                    });
                                }

                                hooks =
                                    jQuery.valHooks[this.type] ||
                                    jQuery.valHooks[this.nodeName.toLowerCase()];

                                // If set returns undefined, fall back to normal setting
                                if (
                                    !hooks ||
                                    !('set' in hooks) ||
                                    hooks.set(this, val, 'value') === undefined
                                ) {
                                    this.value = val;
                                }
                            });
                        },
                    });

                    jQuery.extend({
                        valHooks: {
                            option: {
                                get: function (elem) {
                                    var val = jQuery.find.attr(elem, 'value');
                                    return val != null
                                        ? val
                                        : // Support: IE <=10 - 11 only
                                          // option.text throws exceptions (trac-14686, trac-14858)
                                          // Strip and collapse whitespace
                                          // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
                                          stripAndCollapse(jQuery.text(elem));
                                },
                            },
                            select: {
                                get: function (elem) {
                                    var value,
                                        option,
                                        i,
                                        options = elem.options,
                                        index = elem.selectedIndex,
                                        one = elem.type === 'select-one',
                                        values = one ? null : [],
                                        max = one ? index + 1 : options.length;

                                    if (index < 0) {
                                        i = max;
                                    } else {
                                        i = one ? index : 0;
                                    }

                                    // Loop through all the selected options
                                    for (; i < max; i++) {
                                        option = options[i];

                                        // Support: IE <=9 only
                                        // IE8-9 doesn't update selected after form reset (trac-2551)
                                        if (
                                            (option.selected || i === index) &&
                                            // Don't return options that are disabled or in a disabled optgroup
                                            !option.disabled &&
                                            (!option.parentNode.disabled ||
                                                !nodeName(option.parentNode, 'optgroup'))
                                        ) {
                                            // Get the specific value for the option
                                            value = jQuery(option).val();

                                            // We don't need an array for one selects
                                            if (one) {
                                                return value;
                                            }

                                            // Multi-Selects return an array
                                            values.push(value);
                                        }
                                    }

                                    return values;
                                },

                                set: function (elem, value) {
                                    var optionSet,
                                        option,
                                        options = elem.options,
                                        values = jQuery.makeArray(value),
                                        i = options.length;

                                    while (i--) {
                                        option = options[i];

                                        /* eslint-disable no-cond-assign */

                                        if (
                                            (option.selected =
                                                jQuery.inArray(
                                                    jQuery.valHooks.option.get(option),
                                                    values,
                                                ) > -1)
                                        ) {
                                            optionSet = true;
                                        }

                                        /* eslint-enable no-cond-assign */
                                    }

                                    // Force browsers to behave consistently when non-matching value is set
                                    if (!optionSet) {
                                        elem.selectedIndex = -1;
                                    }
                                    return values;
                                },
                            },
                        },
                    });

                    // Radios and checkboxes getter/setter
                    jQuery.each(['radio', 'checkbox'], function () {
                        jQuery.valHooks[this] = {
                            set: function (elem, value) {
                                if (Array.isArray(value)) {
                                    return (elem.checked =
                                        jQuery.inArray(jQuery(elem).val(), value) > -1);
                                }
                            },
                        };
                        if (!support.checkOn) {
                            jQuery.valHooks[this].get = function (elem) {
                                return elem.getAttribute('value') === null ? 'on' : elem.value;
                            };
                        }
                    });

                    // Return jQuery for attributes-only inclusion
                    var location = window.location;

                    var nonce = { guid: Date.now() };

                    var rquery = /\?/;

                    // Cross-browser xml parsing
                    jQuery.parseXML = function (data) {
                        var xml, parserErrorElem;
                        if (!data || typeof data !== 'string') {
                            return null;
                        }

                        // Support: IE 9 - 11 only
                        // IE throws on parseFromString with invalid input.
                        try {
                            xml = new window.DOMParser().parseFromString(data, 'text/xml');
                        } catch (e) {}

                        parserErrorElem = xml && xml.getElementsByTagName('parsererror')[0];
                        if (!xml || parserErrorElem) {
                            jQuery.error(
                                'Invalid XML: ' +
                                    (parserErrorElem
                                        ? jQuery
                                              .map(parserErrorElem.childNodes, function (el) {
                                                  return el.textContent;
                                              })
                                              .join('\n')
                                        : data),
                            );
                        }
                        return xml;
                    };

                    var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
                        stopPropagationCallback = function (e) {
                            e.stopPropagation();
                        };

                    jQuery.extend(jQuery.event, {
                        trigger: function (event, data, elem, onlyHandlers) {
                            var i,
                                cur,
                                tmp,
                                bubbleType,
                                ontype,
                                handle,
                                special,
                                lastElement,
                                eventPath = [elem || document],
                                type = hasOwn.call(event, 'type') ? event.type : event,
                                namespaces = hasOwn.call(event, 'namespace')
                                    ? event.namespace.split('.')
                                    : [];

                            cur = lastElement = tmp = elem = elem || document;

                            // Don't do events on text and comment nodes
                            if (elem.nodeType === 3 || elem.nodeType === 8) {
                                return;
                            }

                            // focus/blur morphs to focusin/out; ensure we're not firing them right now
                            if (rfocusMorph.test(type + jQuery.event.triggered)) {
                                return;
                            }

                            if (type.indexOf('.') > -1) {
                                // Namespaced trigger; create a regexp to match event type in handle()
                                namespaces = type.split('.');
                                type = namespaces.shift();
                                namespaces.sort();
                            }
                            ontype = type.indexOf(':') < 0 && 'on' + type;

                            // Caller can pass in a jQuery.Event object, Object, or just an event type string
                            event = event[jQuery.expando]
                                ? event
                                : new jQuery.Event(type, typeof event === 'object' && event);

                            // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
                            event.isTrigger = onlyHandlers ? 2 : 3;
                            event.namespace = namespaces.join('.');
                            event.rnamespace = event.namespace
                                ? new RegExp(
                                      '(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)',
                                  )
                                : null;

                            // Clean up the event in case it is being reused
                            event.result = undefined;
                            if (!event.target) {
                                event.target = elem;
                            }

                            // Clone any incoming data and prepend the event, creating the handler arg list
                            data = data == null ? [event] : jQuery.makeArray(data, [event]);

                            // Allow special events to draw outside the lines
                            special = jQuery.event.special[type] || {};
                            if (
                                !onlyHandlers &&
                                special.trigger &&
                                special.trigger.apply(elem, data) === false
                            ) {
                                return;
                            }

                            // Determine event propagation path in advance, per W3C events spec (trac-9951)
                            // Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)
                            if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
                                bubbleType = special.delegateType || type;
                                if (!rfocusMorph.test(bubbleType + type)) {
                                    cur = cur.parentNode;
                                }
                                for (; cur; cur = cur.parentNode) {
                                    eventPath.push(cur);
                                    tmp = cur;
                                }

                                // Only add window if we got to document (e.g., not plain obj or detached DOM)
                                if (tmp === (elem.ownerDocument || document)) {
                                    eventPath.push(tmp.defaultView || tmp.parentWindow || window);
                                }
                            }

                            // Fire handlers on the event path
                            i = 0;
                            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
                                lastElement = cur;
                                event.type = i > 1 ? bubbleType : special.bindType || type;

                                // jQuery handler
                                handle =
                                    (dataPriv.get(cur, 'events') || Object.create(null))[
                                        event.type
                                    ] && dataPriv.get(cur, 'handle');
                                if (handle) {
                                    handle.apply(cur, data);
                                }

                                // Native handler
                                handle = ontype && cur[ontype];
                                if (handle && handle.apply && acceptData(cur)) {
                                    event.result = handle.apply(cur, data);
                                    if (event.result === false) {
                                        event.preventDefault();
                                    }
                                }
                            }
                            event.type = type;

                            // If nobody prevented the default action, do it now
                            if (!onlyHandlers && !event.isDefaultPrevented()) {
                                if (
                                    (!special._default ||
                                        special._default.apply(eventPath.pop(), data) === false) &&
                                    acceptData(elem)
                                ) {
                                    // Call a native DOM method on the target with the same name as the event.
                                    // Don't do default actions on window, that's where global variables be (trac-6170)
                                    if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
                                        // Don't re-trigger an onFOO event when we call its FOO() method
                                        tmp = elem[ontype];

                                        if (tmp) {
                                            elem[ontype] = null;
                                        }

                                        // Prevent re-triggering of the same event, since we already bubbled it above
                                        jQuery.event.triggered = type;

                                        if (event.isPropagationStopped()) {
                                            lastElement.addEventListener(
                                                type,
                                                stopPropagationCallback,
                                            );
                                        }

                                        elem[type]();

                                        if (event.isPropagationStopped()) {
                                            lastElement.removeEventListener(
                                                type,
                                                stopPropagationCallback,
                                            );
                                        }

                                        jQuery.event.triggered = undefined;

                                        if (tmp) {
                                            elem[ontype] = tmp;
                                        }
                                    }
                                }
                            }

                            return event.result;
                        },

                        // Piggyback on a donor event to simulate a different one
                        // Used only for `focus(in | out)` events
                        simulate: function (type, elem, event) {
                            var e = jQuery.extend(new jQuery.Event(), event, {
                                type: type,
                                isSimulated: true,
                            });

                            jQuery.event.trigger(e, null, elem);
                        },
                    });

                    jQuery.fn.extend({
                        trigger: function (type, data) {
                            return this.each(function () {
                                jQuery.event.trigger(type, data, this);
                            });
                        },
                        triggerHandler: function (type, data) {
                            var elem = this[0];
                            if (elem) {
                                return jQuery.event.trigger(type, data, elem, true);
                            }
                        },
                    });

                    var rbracket = /\[\]$/,
                        rCRLF = /\r?\n/g,
                        rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
                        rsubmittable = /^(?:input|select|textarea|keygen)/i;

                    function buildParams(prefix, obj, traditional, add) {
                        var name;

                        if (Array.isArray(obj)) {
                            // Serialize array item.
                            jQuery.each(obj, function (i, v) {
                                if (traditional || rbracket.test(prefix)) {
                                    // Treat each array item as a scalar.
                                    add(prefix, v);
                                } else {
                                    // Item is non-scalar (array or object), encode its numeric index.
                                    buildParams(
                                        prefix +
                                            '[' +
                                            (typeof v === 'object' && v != null ? i : '') +
                                            ']',
                                        v,
                                        traditional,
                                        add,
                                    );
                                }
                            });
                        } else if (!traditional && toType(obj) === 'object') {
                            // Serialize object item.
                            for (name in obj) {
                                buildParams(prefix + '[' + name + ']', obj[name], traditional, add);
                            }
                        } else {
                            // Serialize scalar item.
                            add(prefix, obj);
                        }
                    }

                    // Serialize an array of form elements or a set of
                    // key/values into a query string
                    jQuery.param = function (a, traditional) {
                        var prefix,
                            s = [],
                            add = function (key, valueOrFunction) {
                                // If value is a function, invoke it and use its return value
                                var value = isFunction(valueOrFunction)
                                    ? valueOrFunction()
                                    : valueOrFunction;

                                s[s.length] =
                                    encodeURIComponent(key) +
                                    '=' +
                                    encodeURIComponent(value == null ? '' : value);
                            };

                        if (a == null) {
                            return '';
                        }

                        // If an array was passed in, assume that it is an array of form elements.
                        if (Array.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) {
                            // Serialize the form elements
                            jQuery.each(a, function () {
                                add(this.name, this.value);
                            });
                        } else {
                            // If traditional, encode the "old" way (the way 1.3.2 or older
                            // did it), otherwise encode params recursively.
                            for (prefix in a) {
                                buildParams(prefix, a[prefix], traditional, add);
                            }
                        }

                        // Return the resulting serialization
                        return s.join('&');
                    };

                    jQuery.fn.extend({
                        serialize: function () {
                            return jQuery.param(this.serializeArray());
                        },
                        serializeArray: function () {
                            return this.map(function () {
                                // Can add propHook for "elements" to filter or add form elements
                                var elements = jQuery.prop(this, 'elements');
                                return elements ? jQuery.makeArray(elements) : this;
                            })
                                .filter(function () {
                                    var type = this.type;

                                    // Use .is( ":disabled" ) so that fieldset[disabled] works
                                    return (
                                        this.name &&
                                        !jQuery(this).is(':disabled') &&
                                        rsubmittable.test(this.nodeName) &&
                                        !rsubmitterTypes.test(type) &&
                                        (this.checked || !rcheckableType.test(type))
                                    );
                                })
                                .map(function (_i, elem) {
                                    var val = jQuery(this).val();

                                    if (val == null) {
                                        return null;
                                    }

                                    if (Array.isArray(val)) {
                                        return jQuery.map(val, function (val) {
                                            return {
                                                name: elem.name,
                                                value: val.replace(rCRLF, '\r\n'),
                                            };
                                        });
                                    }

                                    return { name: elem.name, value: val.replace(rCRLF, '\r\n') };
                                })
                                .get();
                        },
                    });

                    var r20 = /%20/g,
                        rhash = /#.*$/,
                        rantiCache = /([?&])_=[^&]*/,
                        rheaders = /^(.*?):[ \t]*([^\r\n]*)$/gm,
                        // trac-7653, trac-8125, trac-8152: local protocol detection
                        rlocalProtocol =
                            /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
                        rnoContent = /^(?:GET|HEAD)$/,
                        rprotocol = /^\/\//,
                        /* Prefilters
                         * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
                         * 2) These are called:
                         *    - BEFORE asking for a transport
                         *    - AFTER param serialization (s.data is a string if s.processData is true)
                         * 3) key is the dataType
                         * 4) the catchall symbol "*" can be used
                         * 5) execution will start with transport dataType and THEN continue down to "*" if needed
                         */
                        prefilters = {},
                        /* Transports bindings
                         * 1) key is the dataType
                         * 2) the catchall symbol "*" can be used
                         * 3) selection will start with transport dataType and THEN go to "*" if needed
                         */
                        transports = {},
                        // Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression
                        allTypes = '*/'.concat('*'),
                        // Anchor tag for parsing the document origin
                        originAnchor = document.createElement('a');

                    originAnchor.href = location.href;

                    // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
                    function addToPrefiltersOrTransports(structure) {
                        // dataTypeExpression is optional and defaults to "*"
                        return function (dataTypeExpression, func) {
                            if (typeof dataTypeExpression !== 'string') {
                                func = dataTypeExpression;
                                dataTypeExpression = '*';
                            }

                            var dataType,
                                i = 0,
                                dataTypes =
                                    dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];

                            if (isFunction(func)) {
                                // For each dataType in the dataTypeExpression
                                while ((dataType = dataTypes[i++])) {
                                    // Prepend if requested
                                    if (dataType[0] === '+') {
                                        dataType = dataType.slice(1) || '*';
                                        (structure[dataType] = structure[dataType] || []).unshift(
                                            func,
                                        );

                                        // Otherwise append
                                    } else {
                                        (structure[dataType] = structure[dataType] || []).push(
                                            func,
                                        );
                                    }
                                }
                            }
                        };
                    }

                    // Base inspection function for prefilters and transports
                    function inspectPrefiltersOrTransports(
                        structure,
                        options,
                        originalOptions,
                        jqXHR,
                    ) {
                        var inspected = {},
                            seekingTransport = structure === transports;

                        function inspect(dataType) {
                            var selected;
                            inspected[dataType] = true;
                            jQuery.each(
                                structure[dataType] || [],
                                function (_, prefilterOrFactory) {
                                    var dataTypeOrTransport = prefilterOrFactory(
                                        options,
                                        originalOptions,
                                        jqXHR,
                                    );
                                    if (
                                        typeof dataTypeOrTransport === 'string' &&
                                        !seekingTransport &&
                                        !inspected[dataTypeOrTransport]
                                    ) {
                                        options.dataTypes.unshift(dataTypeOrTransport);
                                        inspect(dataTypeOrTransport);
                                        return false;
                                    } else if (seekingTransport) {
                                        return !(selected = dataTypeOrTransport);
                                    }
                                },
                            );
                            return selected;
                        }

                        return inspect(options.dataTypes[0]) || (!inspected['*'] && inspect('*'));
                    }

                    // A special extend for ajax options
                    // that takes "flat" options (not to be deep extended)
                    // Fixes trac-9887
                    function ajaxExtend(target, src) {
                        var key,
                            deep,
                            flatOptions = jQuery.ajaxSettings.flatOptions || {};

                        for (key in src) {
                            if (src[key] !== undefined) {
                                (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
                            }
                        }
                        if (deep) {
                            jQuery.extend(true, target, deep);
                        }

                        return target;
                    }

                    /* Handles responses to an ajax request:
                     * - finds the right dataType (mediates between content-type and expected dataType)
                     * - returns the corresponding response
                     */
                    function ajaxHandleResponses(s, jqXHR, responses) {
                        var ct,
                            type,
                            finalDataType,
                            firstDataType,
                            contents = s.contents,
                            dataTypes = s.dataTypes;

                        // Remove auto dataType and get content-type in the process
                        while (dataTypes[0] === '*') {
                            dataTypes.shift();
                            if (ct === undefined) {
                                ct = s.mimeType || jqXHR.getResponseHeader('Content-Type');
                            }
                        }

                        // Check if we're dealing with a known content-type
                        if (ct) {
                            for (type in contents) {
                                if (contents[type] && contents[type].test(ct)) {
                                    dataTypes.unshift(type);
                                    break;
                                }
                            }
                        }

                        // Check to see if we have a response for the expected dataType
                        if (dataTypes[0] in responses) {
                            finalDataType = dataTypes[0];
                        } else {
                            // Try convertible dataTypes
                            for (type in responses) {
                                if (!dataTypes[0] || s.converters[type + ' ' + dataTypes[0]]) {
                                    finalDataType = type;
                                    break;
                                }
                                if (!firstDataType) {
                                    firstDataType = type;
                                }
                            }

                            // Or just use first one
                            finalDataType = finalDataType || firstDataType;
                        }

                        // If we found a dataType
                        // We add the dataType to the list if needed
                        // and return the corresponding response
                        if (finalDataType) {
                            if (finalDataType !== dataTypes[0]) {
                                dataTypes.unshift(finalDataType);
                            }
                            return responses[finalDataType];
                        }
                    }

                    /* Chain conversions given the request and the original response
                     * Also sets the responseXXX fields on the jqXHR instance
                     */
                    function ajaxConvert(s, response, jqXHR, isSuccess) {
                        var conv2,
                            current,
                            conv,
                            tmp,
                            prev,
                            converters = {},
                            // Work with a copy of dataTypes in case we need to modify it for conversion
                            dataTypes = s.dataTypes.slice();

                        // Create converters map with lowercased keys
                        if (dataTypes[1]) {
                            for (conv in s.converters) {
                                converters[conv.toLowerCase()] = s.converters[conv];
                            }
                        }

                        current = dataTypes.shift();

                        // Convert to each sequential dataType
                        while (current) {
                            if (s.responseFields[current]) {
                                jqXHR[s.responseFields[current]] = response;
                            }

                            // Apply the dataFilter if provided
                            if (!prev && isSuccess && s.dataFilter) {
                                response = s.dataFilter(response, s.dataType);
                            }

                            prev = current;
                            current = dataTypes.shift();

                            if (current) {
                                // There's only work to do if current dataType is non-auto
                                if (current === '*') {
                                    current = prev;

                                    // Convert response if prev dataType is non-auto and differs from current
                                } else if (prev !== '*' && prev !== current) {
                                    // Seek a direct converter
                                    conv =
                                        converters[prev + ' ' + current] ||
                                        converters['* ' + current];

                                    // If none found, seek a pair
                                    if (!conv) {
                                        for (conv2 in converters) {
                                            // If conv2 outputs current
                                            tmp = conv2.split(' ');
                                            if (tmp[1] === current) {
                                                // If prev can be converted to accepted input
                                                conv =
                                                    converters[prev + ' ' + tmp[0]] ||
                                                    converters['* ' + tmp[0]];
                                                if (conv) {
                                                    // Condense equivalence converters
                                                    if (conv === true) {
                                                        conv = converters[conv2];

                                                        // Otherwise, insert the intermediate dataType
                                                    } else if (converters[conv2] !== true) {
                                                        current = tmp[0];
                                                        dataTypes.unshift(tmp[1]);
                                                    }
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    // Apply converter (if not an equivalence)
                                    if (conv !== true) {
                                        // Unless errors are allowed to bubble, catch and return them
                                        if (conv && s.throws) {
                                            response = conv(response);
                                        } else {
                                            try {
                                                response = conv(response);
                                            } catch (e) {
                                                return {
                                                    state: 'parsererror',
                                                    error: conv
                                                        ? e
                                                        : 'No conversion from ' +
                                                          prev +
                                                          ' to ' +
                                                          current,
                                                };
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        return { state: 'success', data: response };
                    }

                    jQuery.extend({
                        // Counter for holding the number of active queries
                        active: 0,

                        // Last-Modified header cache for next request
                        lastModified: {},
                        etag: {},

                        ajaxSettings: {
                            url: location.href,
                            type: 'GET',
                            isLocal: rlocalProtocol.test(location.protocol),
                            global: true,
                            processData: true,
                            async: true,
                            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',

                            /*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

                            accepts: {
                                '*': allTypes,
                                text: 'text/plain',
                                html: 'text/html',
                                xml: 'application/xml, text/xml',
                                json: 'application/json, text/javascript',
                            },

                            contents: {
                                xml: /\bxml\b/,
                                html: /\bhtml/,
                                json: /\bjson\b/,
                            },

                            responseFields: {
                                xml: 'responseXML',
                                text: 'responseText',
                                json: 'responseJSON',
                            },

                            // Data converters
                            // Keys separate source (or catchall "*") and destination types with a single space
                            converters: {
                                // Convert anything to text
                                '* text': String,

                                // Text to html (true = no transformation)
                                'text html': true,

                                // Evaluate text as a json expression
                                'text json': JSON.parse,

                                // Parse text as xml
                                'text xml': jQuery.parseXML,
                            },

                            // For options that shouldn't be deep extended:
                            // you can add your own custom options here if
                            // and when you create one that shouldn't be
                            // deep extended (see ajaxExtend)
                            flatOptions: {
                                url: true,
                                context: true,
                            },
                        },

                        // Creates a full fledged settings object into target
                        // with both ajaxSettings and settings fields.
                        // If target is omitted, writes into ajaxSettings.
                        ajaxSetup: function (target, settings) {
                            return settings
                                ? // Building a settings object
                                  ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings)
                                : // Extending ajaxSettings
                                  ajaxExtend(jQuery.ajaxSettings, target);
                        },

                        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
                        ajaxTransport: addToPrefiltersOrTransports(transports),

                        // Main method
                        ajax: function (url, options) {
                            // If url is an object, simulate pre-1.5 signature
                            if (typeof url === 'object') {
                                options = url;
                                url = undefined;
                            }

                            // Force options to be an object
                            options = options || {};

                            var transport,
                                // URL without anti-cache param
                                cacheURL,
                                // Response headers
                                responseHeadersString,
                                responseHeaders,
                                // timeout handle
                                timeoutTimer,
                                // Url cleanup var
                                urlAnchor,
                                // Request state (becomes false upon send and true upon completion)
                                completed,
                                // To know if global events are to be dispatched
                                fireGlobals,
                                // Loop variable
                                i,
                                // uncached part of the url
                                uncached,
                                // Create the final options object
                                s = jQuery.ajaxSetup({}, options),
                                // Callbacks context
                                callbackContext = s.context || s,
                                // Context for global events is callbackContext if it is a DOM node or jQuery collection
                                globalEventContext =
                                    s.context &&
                                    (callbackContext.nodeType || callbackContext.jquery)
                                        ? jQuery(callbackContext)
                                        : jQuery.event,
                                // Deferreds
                                deferred = jQuery.Deferred(),
                                completeDeferred = jQuery.Callbacks('once memory'),
                                // Status-dependent callbacks
                                statusCode = s.statusCode || {},
                                // Headers (they are sent all at once)
                                requestHeaders = {},
                                requestHeadersNames = {},
                                // Default abort message
                                strAbort = 'canceled',
                                // Fake xhr
                                jqXHR = {
                                    readyState: 0,

                                    // Builds headers hashtable if needed
                                    getResponseHeader: function (key) {
                                        var match;
                                        if (completed) {
                                            if (!responseHeaders) {
                                                responseHeaders = {};
                                                while (
                                                    (match = rheaders.exec(responseHeadersString))
                                                ) {
                                                    responseHeaders[match[1].toLowerCase() + ' '] =
                                                        (
                                                            responseHeaders[
                                                                match[1].toLowerCase() + ' '
                                                            ] || []
                                                        ).concat(match[2]);
                                                }
                                            }
                                            match = responseHeaders[key.toLowerCase() + ' '];
                                        }
                                        return match == null ? null : match.join(', ');
                                    },

                                    // Raw string
                                    getAllResponseHeaders: function () {
                                        return completed ? responseHeadersString : null;
                                    },

                                    // Caches the header
                                    setRequestHeader: function (name, value) {
                                        if (completed == null) {
                                            name = requestHeadersNames[name.toLowerCase()] =
                                                requestHeadersNames[name.toLowerCase()] || name;
                                            requestHeaders[name] = value;
                                        }
                                        return this;
                                    },

                                    // Overrides response content-type header
                                    overrideMimeType: function (type) {
                                        if (completed == null) {
                                            s.mimeType = type;
                                        }
                                        return this;
                                    },

                                    // Status-dependent callbacks
                                    statusCode: function (map) {
                                        var code;
                                        if (map) {
                                            if (completed) {
                                                // Execute the appropriate callbacks
                                                jqXHR.always(map[jqXHR.status]);
                                            } else {
                                                // Lazy-add the new callbacks in a way that preserves old ones
                                                for (code in map) {
                                                    statusCode[code] = [
                                                        statusCode[code],
                                                        map[code],
                                                    ];
                                                }
                                            }
                                        }
                                        return this;
                                    },

                                    // Cancel the request
                                    abort: function (statusText) {
                                        var finalText = statusText || strAbort;
                                        if (transport) {
                                            transport.abort(finalText);
                                        }
                                        done(0, finalText);
                                        return this;
                                    },
                                };

                            // Attach deferreds
                            deferred.promise(jqXHR);

                            // Add protocol if not provided (prefilters might expect it)
                            // Handle falsy url in the settings object (trac-10093: consistency with old signature)
                            // We also use the url parameter if available
                            s.url = ((url || s.url || location.href) + '').replace(
                                rprotocol,
                                location.protocol + '//',
                            );

                            // Alias method option to type as per ticket trac-12004
                            s.type = options.method || options.type || s.method || s.type;

                            // Extract dataTypes list
                            s.dataTypes = (s.dataType || '*')
                                .toLowerCase()
                                .match(rnothtmlwhite) || [''];

                            // A cross-domain request is in order when the origin doesn't match the current origin.
                            if (s.crossDomain == null) {
                                urlAnchor = document.createElement('a');

                                // Support: IE <=8 - 11, Edge 12 - 15
                                // IE throws exception on accessing the href property if url is malformed,
                                // e.g. http://example.com:80x/
                                try {
                                    urlAnchor.href = s.url;

                                    // Support: IE <=8 - 11 only
                                    // Anchor's host property isn't correctly set when s.url is relative
                                    urlAnchor.href = urlAnchor.href;
                                    s.crossDomain =
                                        originAnchor.protocol + '//' + originAnchor.host !==
                                        urlAnchor.protocol + '//' + urlAnchor.host;
                                } catch (e) {
                                    // If there is an error parsing the URL, assume it is crossDomain,
                                    // it can be rejected by the transport if it is invalid
                                    s.crossDomain = true;
                                }
                            }

                            // Convert data if not already a string
                            if (s.data && s.processData && typeof s.data !== 'string') {
                                s.data = jQuery.param(s.data, s.traditional);
                            }

                            // Apply prefilters
                            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

                            // If request was aborted inside a prefilter, stop there
                            if (completed) {
                                return jqXHR;
                            }

                            // We can fire global events as of now if asked to
                            // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)
                            fireGlobals = jQuery.event && s.global;

                            // Watch for a new set of requests
                            if (fireGlobals && jQuery.active++ === 0) {
                                jQuery.event.trigger('ajaxStart');
                            }

                            // Uppercase the type
                            s.type = s.type.toUpperCase();

                            // Determine if request has content
                            s.hasContent = !rnoContent.test(s.type);

                            // Save the URL in case we're toying with the If-Modified-Since
                            // and/or If-None-Match header later on
                            // Remove hash to simplify url manipulation
                            cacheURL = s.url.replace(rhash, '');

                            // More options handling for requests with no content
                            if (!s.hasContent) {
                                // Remember the hash so we can put it back
                                uncached = s.url.slice(cacheURL.length);

                                // If data is available and should be processed, append data to url
                                if (s.data && (s.processData || typeof s.data === 'string')) {
                                    cacheURL += (rquery.test(cacheURL) ? '&' : '?') + s.data;

                                    // trac-9682: remove data so that it's not used in an eventual retry
                                    delete s.data;
                                }

                                // Add or update anti-cache param if needed
                                if (s.cache === false) {
                                    cacheURL = cacheURL.replace(rantiCache, '$1');
                                    uncached =
                                        (rquery.test(cacheURL) ? '&' : '?') +
                                        '_=' +
                                        nonce.guid++ +
                                        uncached;
                                }

                                // Put hash and anti-cache on the URL that will be requested (gh-1732)
                                s.url = cacheURL + uncached;

                                // Change '%20' to '+' if this is encoded form body content (gh-2658)
                            } else if (
                                s.data &&
                                s.processData &&
                                (s.contentType || '').indexOf(
                                    'application/x-www-form-urlencoded',
                                ) === 0
                            ) {
                                s.data = s.data.replace(r20, '+');
                            }

                            // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                            if (s.ifModified) {
                                if (jQuery.lastModified[cacheURL]) {
                                    jqXHR.setRequestHeader(
                                        'If-Modified-Since',
                                        jQuery.lastModified[cacheURL],
                                    );
                                }
                                if (jQuery.etag[cacheURL]) {
                                    jqXHR.setRequestHeader('If-None-Match', jQuery.etag[cacheURL]);
                                }
                            }

                            // Set the correct header, if data is being sent
                            if (
                                (s.data && s.hasContent && s.contentType !== false) ||
                                options.contentType
                            ) {
                                jqXHR.setRequestHeader('Content-Type', s.contentType);
                            }

                            // Set the Accepts header for the server, depending on the dataType
                            jqXHR.setRequestHeader(
                                'Accept',
                                s.dataTypes[0] && s.accepts[s.dataTypes[0]]
                                    ? s.accepts[s.dataTypes[0]] +
                                          (s.dataTypes[0] !== '*'
                                              ? ', ' + allTypes + '; q=0.01'
                                              : '')
                                    : s.accepts['*'],
                            );

                            // Check for headers option
                            for (i in s.headers) {
                                jqXHR.setRequestHeader(i, s.headers[i]);
                            }

                            // Allow custom headers/mimetypes and early abort
                            if (
                                s.beforeSend &&
                                (s.beforeSend.call(callbackContext, jqXHR, s) === false ||
                                    completed)
                            ) {
                                // Abort if not done already and return
                                return jqXHR.abort();
                            }

                            // Aborting is no longer a cancellation
                            strAbort = 'abort';

                            // Install callbacks on deferreds
                            completeDeferred.add(s.complete);
                            jqXHR.done(s.success);
                            jqXHR.fail(s.error);

                            // Get transport
                            transport = inspectPrefiltersOrTransports(
                                transports,
                                s,
                                options,
                                jqXHR,
                            );

                            // If no transport, we auto-abort
                            if (!transport) {
                                done(-1, 'No Transport');
                            } else {
                                jqXHR.readyState = 1;

                                // Send global event
                                if (fireGlobals) {
                                    globalEventContext.trigger('ajaxSend', [jqXHR, s]);
                                }

                                // If request was aborted inside ajaxSend, stop there
                                if (completed) {
                                    return jqXHR;
                                }

                                // Timeout
                                if (s.async && s.timeout > 0) {
                                    timeoutTimer = window.setTimeout(function () {
                                        jqXHR.abort('timeout');
                                    }, s.timeout);
                                }

                                try {
                                    completed = false;
                                    transport.send(requestHeaders, done);
                                } catch (e) {
                                    // Rethrow post-completion exceptions
                                    if (completed) {
                                        throw e;
                                    }

                                    // Propagate others as results
                                    done(-1, e);
                                }
                            }

                            // Callback for when everything is done
                            function done(status, nativeStatusText, responses, headers) {
                                var isSuccess,
                                    success,
                                    error,
                                    response,
                                    modified,
                                    statusText = nativeStatusText;

                                // Ignore repeat invocations
                                if (completed) {
                                    return;
                                }

                                completed = true;

                                // Clear timeout if it exists
                                if (timeoutTimer) {
                                    window.clearTimeout(timeoutTimer);
                                }

                                // Dereference transport for early garbage collection
                                // (no matter how long the jqXHR object will be used)
                                transport = undefined;

                                // Cache response headers
                                responseHeadersString = headers || '';

                                // Set readyState
                                jqXHR.readyState = status > 0 ? 4 : 0;

                                // Determine if successful
                                isSuccess = (status >= 200 && status < 300) || status === 304;

                                // Get response data
                                if (responses) {
                                    response = ajaxHandleResponses(s, jqXHR, responses);
                                }

                                // Use a noop converter for missing script but not if jsonp
                                if (
                                    !isSuccess &&
                                    jQuery.inArray('script', s.dataTypes) > -1 &&
                                    jQuery.inArray('json', s.dataTypes) < 0
                                ) {
                                    s.converters['text script'] = function () {};
                                }

                                // Convert no matter what (that way responseXXX fields are always set)
                                response = ajaxConvert(s, response, jqXHR, isSuccess);

                                // If successful, handle type chaining
                                if (isSuccess) {
                                    // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                                    if (s.ifModified) {
                                        modified = jqXHR.getResponseHeader('Last-Modified');
                                        if (modified) {
                                            jQuery.lastModified[cacheURL] = modified;
                                        }
                                        modified = jqXHR.getResponseHeader('etag');
                                        if (modified) {
                                            jQuery.etag[cacheURL] = modified;
                                        }
                                    }

                                    // if no content
                                    if (status === 204 || s.type === 'HEAD') {
                                        statusText = 'nocontent';

                                        // if not modified
                                    } else if (status === 304) {
                                        statusText = 'notmodified';

                                        // If we have data, let's convert it
                                    } else {
                                        statusText = response.state;
                                        success = response.data;
                                        error = response.error;
                                        isSuccess = !error;
                                    }
                                } else {
                                    // Extract error from statusText and normalize for non-aborts
                                    error = statusText;
                                    if (status || !statusText) {
                                        statusText = 'error';
                                        if (status < 0) {
                                            status = 0;
                                        }
                                    }
                                }

                                // Set data for the fake xhr object
                                jqXHR.status = status;
                                jqXHR.statusText = (nativeStatusText || statusText) + '';

                                // Success/Error
                                if (isSuccess) {
                                    deferred.resolveWith(callbackContext, [
                                        success,
                                        statusText,
                                        jqXHR,
                                    ]);
                                } else {
                                    deferred.rejectWith(callbackContext, [
                                        jqXHR,
                                        statusText,
                                        error,
                                    ]);
                                }

                                // Status-dependent callbacks
                                jqXHR.statusCode(statusCode);
                                statusCode = undefined;

                                if (fireGlobals) {
                                    globalEventContext.trigger(
                                        isSuccess ? 'ajaxSuccess' : 'ajaxError',
                                        [jqXHR, s, isSuccess ? success : error],
                                    );
                                }

                                // Complete
                                completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

                                if (fireGlobals) {
                                    globalEventContext.trigger('ajaxComplete', [jqXHR, s]);

                                    // Handle the global AJAX counter
                                    if (!--jQuery.active) {
                                        jQuery.event.trigger('ajaxStop');
                                    }
                                }
                            }

                            return jqXHR;
                        },

                        getJSON: function (url, data, callback) {
                            return jQuery.get(url, data, callback, 'json');
                        },

                        getScript: function (url, callback) {
                            return jQuery.get(url, undefined, callback, 'script');
                        },
                    });

                    jQuery.each(['get', 'post'], function (_i, method) {
                        jQuery[method] = function (url, data, callback, type) {
                            // Shift arguments if data argument was omitted
                            if (isFunction(data)) {
                                type = type || callback;
                                callback = data;
                                data = undefined;
                            }

                            // The url can be an options object (which then must have .url)
                            return jQuery.ajax(
                                jQuery.extend(
                                    {
                                        url: url,
                                        type: method,
                                        dataType: type,
                                        data: data,
                                        success: callback,
                                    },
                                    jQuery.isPlainObject(url) && url,
                                ),
                            );
                        };
                    });

                    jQuery.ajaxPrefilter(function (s) {
                        var i;
                        for (i in s.headers) {
                            if (i.toLowerCase() === 'content-type') {
                                s.contentType = s.headers[i] || '';
                            }
                        }
                    });

                    jQuery._evalUrl = function (url, options, doc) {
                        return jQuery.ajax({
                            url: url,

                            // Make this explicit, since user can override this through ajaxSetup (trac-11264)
                            type: 'GET',
                            dataType: 'script',
                            cache: true,
                            async: false,
                            global: false,

                            // Only evaluate the response if it is successful (gh-4126)
                            // dataFilter is not invoked for failure responses, so using it instead
                            // of the default converter is kludgy but it works.
                            converters: {
                                'text script': function () {},
                            },
                            dataFilter: function (response) {
                                jQuery.globalEval(response, options, doc);
                            },
                        });
                    };

                    jQuery.fn.extend({
                        wrapAll: function (html) {
                            var wrap;

                            if (this[0]) {
                                if (isFunction(html)) {
                                    html = html.call(this[0]);
                                }

                                // The elements to wrap the target around
                                wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

                                if (this[0].parentNode) {
                                    wrap.insertBefore(this[0]);
                                }

                                wrap.map(function () {
                                    var elem = this;

                                    while (elem.firstElementChild) {
                                        elem = elem.firstElementChild;
                                    }

                                    return elem;
                                }).append(this);
                            }

                            return this;
                        },

                        wrapInner: function (html) {
                            if (isFunction(html)) {
                                return this.each(function (i) {
                                    jQuery(this).wrapInner(html.call(this, i));
                                });
                            }

                            return this.each(function () {
                                var self = jQuery(this),
                                    contents = self.contents();

                                if (contents.length) {
                                    contents.wrapAll(html);
                                } else {
                                    self.append(html);
                                }
                            });
                        },

                        wrap: function (html) {
                            var htmlIsFunction = isFunction(html);

                            return this.each(function (i) {
                                jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
                            });
                        },

                        unwrap: function (selector) {
                            this.parent(selector)
                                .not('body')
                                .each(function () {
                                    jQuery(this).replaceWith(this.childNodes);
                                });
                            return this;
                        },
                    });

                    jQuery.expr.pseudos.hidden = function (elem) {
                        return !jQuery.expr.pseudos.visible(elem);
                    };
                    jQuery.expr.pseudos.visible = function (elem) {
                        return !!(
                            elem.offsetWidth ||
                            elem.offsetHeight ||
                            elem.getClientRects().length
                        );
                    };

                    jQuery.ajaxSettings.xhr = function () {
                        try {
                            return new window.XMLHttpRequest();
                        } catch (e) {}
                    };

                    var xhrSuccessStatus = {
                            // File protocol always yields status code 0, assume 200
                            0: 200,

                            // Support: IE <=9 only
                            // trac-1450: sometimes IE returns 1223 when it should be 204
                            1223: 204,
                        },
                        xhrSupported = jQuery.ajaxSettings.xhr();

                    support.cors = !!xhrSupported && 'withCredentials' in xhrSupported;
                    support.ajax = xhrSupported = !!xhrSupported;

                    jQuery.ajaxTransport(function (options) {
                        var callback, errorCallback;

                        // Cross domain only allowed if supported through XMLHttpRequest
                        if (support.cors || (xhrSupported && !options.crossDomain)) {
                            return {
                                send: function (headers, complete) {
                                    var i,
                                        xhr = options.xhr();

                                    xhr.open(
                                        options.type,
                                        options.url,
                                        options.async,
                                        options.username,
                                        options.password,
                                    );

                                    // Apply custom fields if provided
                                    if (options.xhrFields) {
                                        for (i in options.xhrFields) {
                                            xhr[i] = options.xhrFields[i];
                                        }
                                    }

                                    // Override mime type if needed
                                    if (options.mimeType && xhr.overrideMimeType) {
                                        xhr.overrideMimeType(options.mimeType);
                                    }

                                    // X-Requested-With header
                                    // For cross-domain requests, seeing as conditions for a preflight are
                                    // akin to a jigsaw puzzle, we simply never set it to be sure.
                                    // (it can always be set on a per-request basis or even using ajaxSetup)
                                    // For same-domain requests, won't change header if already provided.
                                    if (!options.crossDomain && !headers['X-Requested-With']) {
                                        headers['X-Requested-With'] = 'XMLHttpRequest';
                                    }

                                    // Set headers
                                    for (i in headers) {
                                        xhr.setRequestHeader(i, headers[i]);
                                    }

                                    // Callback
                                    callback = function (type) {
                                        return function () {
                                            if (callback) {
                                                callback =
                                                    errorCallback =
                                                    xhr.onload =
                                                    xhr.onerror =
                                                    xhr.onabort =
                                                    xhr.ontimeout =
                                                    xhr.onreadystatechange =
                                                        null;

                                                if (type === 'abort') {
                                                    xhr.abort();
                                                } else if (type === 'error') {
                                                    // Support: IE <=9 only
                                                    // On a manual native abort, IE9 throws
                                                    // errors on any property access that is not readyState
                                                    if (typeof xhr.status !== 'number') {
                                                        complete(0, 'error');
                                                    } else {
                                                        complete(
                                                            // File: protocol always yields status 0; see trac-8605, trac-14207
                                                            xhr.status,
                                                            xhr.statusText,
                                                        );
                                                    }
                                                } else {
                                                    complete(
                                                        xhrSuccessStatus[xhr.status] || xhr.status,
                                                        xhr.statusText,

                                                        // Support: IE <=9 only
                                                        // IE9 has no XHR2 but throws on binary (trac-11426)
                                                        // For XHR2 non-text, let the caller handle it (gh-2498)
                                                        (xhr.responseType || 'text') !== 'text' ||
                                                            typeof xhr.responseText !== 'string'
                                                            ? { binary: xhr.response }
                                                            : { text: xhr.responseText },
                                                        xhr.getAllResponseHeaders(),
                                                    );
                                                }
                                            }
                                        };
                                    };

                                    // Listen to events
                                    xhr.onload = callback();
                                    errorCallback = xhr.onerror = xhr.ontimeout = callback('error');

                                    // Support: IE 9 only
                                    // Use onreadystatechange to replace onabort
                                    // to handle uncaught aborts
                                    if (xhr.onabort !== undefined) {
                                        xhr.onabort = errorCallback;
                                    } else {
                                        xhr.onreadystatechange = function () {
                                            // Check readyState before timeout as it changes
                                            if (xhr.readyState === 4) {
                                                // Allow onerror to be called first,
                                                // but that will not handle a native abort
                                                // Also, save errorCallback to a variable
                                                // as xhr.onerror cannot be accessed
                                                window.setTimeout(function () {
                                                    if (callback) {
                                                        errorCallback();
                                                    }
                                                });
                                            }
                                        };
                                    }

                                    // Create the abort callback
                                    callback = callback('abort');

                                    try {
                                        // Do send the request (this may raise an exception)
                                        xhr.send((options.hasContent && options.data) || null);
                                    } catch (e) {
                                        // trac-14683: Only rethrow if this hasn't been notified as an error yet
                                        if (callback) {
                                            throw e;
                                        }
                                    }
                                },

                                abort: function () {
                                    if (callback) {
                                        callback();
                                    }
                                },
                            };
                        }
                    });

                    // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
                    jQuery.ajaxPrefilter(function (s) {
                        if (s.crossDomain) {
                            s.contents.script = false;
                        }
                    });

                    // Install script dataType
                    jQuery.ajaxSetup({
                        accepts: {
                            script:
                                'text/javascript, application/javascript, ' +
                                'application/ecmascript, application/x-ecmascript',
                        },
                        contents: {
                            script: /\b(?:java|ecma)script\b/,
                        },
                        converters: {
                            'text script': function (text) {
                                jQuery.globalEval(text);
                                return text;
                            },
                        },
                    });

                    // Handle cache's special case and crossDomain
                    jQuery.ajaxPrefilter('script', function (s) {
                        if (s.cache === undefined) {
                            s.cache = false;
                        }
                        if (s.crossDomain) {
                            s.type = 'GET';
                        }
                    });

                    // Bind script tag hack transport
                    jQuery.ajaxTransport('script', function (s) {
                        // This transport only deals with cross domain or forced-by-attrs requests
                        if (s.crossDomain || s.scriptAttrs) {
                            var script, callback;
                            return {
                                send: function (_, complete) {
                                    script = jQuery('<script>')
                                        .attr(s.scriptAttrs || {})
                                        .prop({ charset: s.scriptCharset, src: s.url })
                                        .on(
                                            'load error',
                                            (callback = function (evt) {
                                                script.remove();
                                                callback = null;
                                                if (evt) {
                                                    complete(
                                                        evt.type === 'error' ? 404 : 200,
                                                        evt.type,
                                                    );
                                                }
                                            }),
                                        );

                                    // Use native DOM manipulation to avoid our domManip AJAX trickery
                                    document.head.appendChild(script[0]);
                                },
                                abort: function () {
                                    if (callback) {
                                        callback();
                                    }
                                },
                            };
                        }
                    });

                    var oldCallbacks = [],
                        rjsonp = /(=)\?(?=&|$)|\?\?/;

                    // Default jsonp settings
                    jQuery.ajaxSetup({
                        jsonp: 'callback',
                        jsonpCallback: function () {
                            var callback =
                                oldCallbacks.pop() || jQuery.expando + '_' + nonce.guid++;
                            this[callback] = true;
                            return callback;
                        },
                    });

                    // Detect, normalize options and install callbacks for jsonp requests
                    jQuery.ajaxPrefilter('json jsonp', function (s, originalSettings, jqXHR) {
                        var callbackName,
                            overwritten,
                            responseContainer,
                            jsonProp =
                                s.jsonp !== false &&
                                (rjsonp.test(s.url)
                                    ? 'url'
                                    : typeof s.data === 'string' &&
                                      (s.contentType || '').indexOf(
                                          'application/x-www-form-urlencoded',
                                      ) === 0 &&
                                      rjsonp.test(s.data) &&
                                      'data');

                        // Handle iff the expected data type is "jsonp" or we have a parameter to set
                        if (jsonProp || s.dataTypes[0] === 'jsonp') {
                            // Get callback name, remembering preexisting value associated with it
                            callbackName = s.jsonpCallback = isFunction(s.jsonpCallback)
                                ? s.jsonpCallback()
                                : s.jsonpCallback;

                            // Insert callback into url or form data
                            if (jsonProp) {
                                s[jsonProp] = s[jsonProp].replace(rjsonp, '$1' + callbackName);
                            } else if (s.jsonp !== false) {
                                s.url +=
                                    (rquery.test(s.url) ? '&' : '?') + s.jsonp + '=' + callbackName;
                            }

                            // Use data converter to retrieve json after script execution
                            s.converters['script json'] = function () {
                                if (!responseContainer) {
                                    jQuery.error(callbackName + ' was not called');
                                }
                                return responseContainer[0];
                            };

                            // Force json dataType
                            s.dataTypes[0] = 'json';

                            // Install callback
                            overwritten = window[callbackName];
                            window[callbackName] = function () {
                                responseContainer = arguments;
                            };

                            // Clean-up function (fires after converters)
                            jqXHR.always(function () {
                                // If previous value didn't exist - remove it
                                if (overwritten === undefined) {
                                    jQuery(window).removeProp(callbackName);

                                    // Otherwise restore preexisting value
                                } else {
                                    window[callbackName] = overwritten;
                                }

                                // Save back as free
                                if (s[callbackName]) {
                                    // Make sure that re-using the options doesn't screw things around
                                    s.jsonpCallback = originalSettings.jsonpCallback;

                                    // Save the callback name for future use
                                    oldCallbacks.push(callbackName);
                                }

                                // Call if it was a function and we have a response
                                if (responseContainer && isFunction(overwritten)) {
                                    overwritten(responseContainer[0]);
                                }

                                responseContainer = overwritten = undefined;
                            });

                            // Delegate to script
                            return 'script';
                        }
                    });

                    // Support: Safari 8 only
                    // In Safari 8 documents created via document.implementation.createHTMLDocument
                    // collapse sibling forms: the second one becomes a child of the first one.
                    // Because of that, this security measure has to be disabled in Safari 8.
                    // https://bugs.webkit.org/show_bug.cgi?id=137337
                    support.createHTMLDocument = (function () {
                        var body = document.implementation.createHTMLDocument('').body;
                        body.innerHTML = '<form></form><form></form>';
                        return body.childNodes.length === 2;
                    })();

                    // Argument "data" should be string of html
                    // context (optional): If specified, the fragment will be created in this context,
                    // defaults to document
                    // keepScripts (optional): If true, will include scripts passed in the html string
                    jQuery.parseHTML = function (data, context, keepScripts) {
                        if (typeof data !== 'string') {
                            return [];
                        }
                        if (typeof context === 'boolean') {
                            keepScripts = context;
                            context = false;
                        }

                        var base, parsed, scripts;

                        if (!context) {
                            // Stop scripts or inline event handlers from being executed immediately
                            // by using document.implementation
                            if (support.createHTMLDocument) {
                                context = document.implementation.createHTMLDocument('');

                                // Set the base href for the created document
                                // so any parsed elements with URLs
                                // are based on the document's URL (gh-2965)
                                base = context.createElement('base');
                                base.href = document.location.href;
                                context.head.appendChild(base);
                            } else {
                                context = document;
                            }
                        }

                        parsed = rsingleTag.exec(data);
                        scripts = !keepScripts && [];

                        // Single tag
                        if (parsed) {
                            return [context.createElement(parsed[1])];
                        }

                        parsed = buildFragment([data], context, scripts);

                        if (scripts && scripts.length) {
                            jQuery(scripts).remove();
                        }

                        return jQuery.merge([], parsed.childNodes);
                    };

                    /**
                     * Load a url into a page
                     */
                    jQuery.fn.load = function (url, params, callback) {
                        var selector,
                            type,
                            response,
                            self = this,
                            off = url.indexOf(' ');

                        if (off > -1) {
                            selector = stripAndCollapse(url.slice(off));
                            url = url.slice(0, off);
                        }

                        // If it's a function
                        if (isFunction(params)) {
                            // We assume that it's the callback
                            callback = params;
                            params = undefined;

                            // Otherwise, build a param string
                        } else if (params && typeof params === 'object') {
                            type = 'POST';
                        }

                        // If we have elements to modify, make the request
                        if (self.length > 0) {
                            jQuery
                                .ajax({
                                    url: url,

                                    // If "type" variable is undefined, then "GET" method will be used.
                                    // Make value of this field explicit since
                                    // user can override it through ajaxSetup method
                                    type: type || 'GET',
                                    dataType: 'html',
                                    data: params,
                                })
                                .done(function (responseText) {
                                    // Save response for use in complete callback
                                    response = arguments;

                                    self.html(
                                        selector
                                            ? // If a selector was specified, locate the right elements in a dummy div
                                              // Exclude scripts to avoid IE 'Permission Denied' errors
                                              jQuery('<div>')
                                                  .append(jQuery.parseHTML(responseText))
                                                  .find(selector)
                                            : // Otherwise use the full result
                                              responseText,
                                    );

                                    // If the request succeeds, this function gets "data", "status", "jqXHR"
                                    // but they are ignored because response was set above.
                                    // If it fails, this function gets "jqXHR", "status", "error"
                                })
                                .always(
                                    callback &&
                                        function (jqXHR, status) {
                                            self.each(function () {
                                                callback.apply(
                                                    this,
                                                    response || [jqXHR.responseText, status, jqXHR],
                                                );
                                            });
                                        },
                                );
                        }

                        return this;
                    };

                    jQuery.expr.pseudos.animated = function (elem) {
                        return jQuery.grep(jQuery.timers, function (fn) {
                            return elem === fn.elem;
                        }).length;
                    };

                    jQuery.offset = {
                        setOffset: function (elem, options, i) {
                            var curPosition,
                                curLeft,
                                curCSSTop,
                                curTop,
                                curOffset,
                                curCSSLeft,
                                calculatePosition,
                                position = jQuery.css(elem, 'position'),
                                curElem = jQuery(elem),
                                props = {};

                            // Set position first, in-case top/left are set even on static elem
                            if (position === 'static') {
                                elem.style.position = 'relative';
                            }

                            curOffset = curElem.offset();
                            curCSSTop = jQuery.css(elem, 'top');
                            curCSSLeft = jQuery.css(elem, 'left');
                            calculatePosition =
                                (position === 'absolute' || position === 'fixed') &&
                                (curCSSTop + curCSSLeft).indexOf('auto') > -1;

                            // Need to be able to calculate position if either
                            // top or left is auto and position is either absolute or fixed
                            if (calculatePosition) {
                                curPosition = curElem.position();
                                curTop = curPosition.top;
                                curLeft = curPosition.left;
                            } else {
                                curTop = parseFloat(curCSSTop) || 0;
                                curLeft = parseFloat(curCSSLeft) || 0;
                            }

                            if (isFunction(options)) {
                                // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
                                options = options.call(elem, i, jQuery.extend({}, curOffset));
                            }

                            if (options.top != null) {
                                props.top = options.top - curOffset.top + curTop;
                            }
                            if (options.left != null) {
                                props.left = options.left - curOffset.left + curLeft;
                            }

                            if ('using' in options) {
                                options.using.call(elem, props);
                            } else {
                                curElem.css(props);
                            }
                        },
                    };

                    jQuery.fn.extend({
                        // offset() relates an element's border box to the document origin
                        offset: function (options) {
                            // Preserve chaining for setter
                            if (arguments.length) {
                                return options === undefined
                                    ? this
                                    : this.each(function (i) {
                                          jQuery.offset.setOffset(this, options, i);
                                      });
                            }

                            var rect,
                                win,
                                elem = this[0];

                            if (!elem) {
                                return;
                            }

                            // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
                            // Support: IE <=11 only
                            // Running getBoundingClientRect on a
                            // disconnected node in IE throws an error
                            if (!elem.getClientRects().length) {
                                return { top: 0, left: 0 };
                            }

                            // Get document-relative position by adding viewport scroll to viewport-relative gBCR
                            rect = elem.getBoundingClientRect();
                            win = elem.ownerDocument.defaultView;
                            return {
                                top: rect.top + win.pageYOffset,
                                left: rect.left + win.pageXOffset,
                            };
                        },

                        // position() relates an element's margin box to its offset parent's padding box
                        // This corresponds to the behavior of CSS absolute positioning
                        position: function () {
                            if (!this[0]) {
                                return;
                            }

                            var offsetParent,
                                offset,
                                doc,
                                elem = this[0],
                                parentOffset = { top: 0, left: 0 };

                            // position:fixed elements are offset from the viewport, which itself always has zero offset
                            if (jQuery.css(elem, 'position') === 'fixed') {
                                // Assume position:fixed implies availability of getBoundingClientRect
                                offset = elem.getBoundingClientRect();
                            } else {
                                offset = this.offset();

                                // Account for the *real* offset parent, which can be the document or its root element
                                // when a statically positioned element is identified
                                doc = elem.ownerDocument;
                                offsetParent = elem.offsetParent || doc.documentElement;
                                while (
                                    offsetParent &&
                                    (offsetParent === doc.body ||
                                        offsetParent === doc.documentElement) &&
                                    jQuery.css(offsetParent, 'position') === 'static'
                                ) {
                                    offsetParent = offsetParent.parentNode;
                                }
                                if (
                                    offsetParent &&
                                    offsetParent !== elem &&
                                    offsetParent.nodeType === 1
                                ) {
                                    // Incorporate borders into its offset, since they are outside its content origin
                                    parentOffset = jQuery(offsetParent).offset();
                                    parentOffset.top += jQuery.css(
                                        offsetParent,
                                        'borderTopWidth',
                                        true,
                                    );
                                    parentOffset.left += jQuery.css(
                                        offsetParent,
                                        'borderLeftWidth',
                                        true,
                                    );
                                }
                            }

                            // Subtract parent offsets and element margins
                            return {
                                top:
                                    offset.top -
                                    parentOffset.top -
                                    jQuery.css(elem, 'marginTop', true),
                                left:
                                    offset.left -
                                    parentOffset.left -
                                    jQuery.css(elem, 'marginLeft', true),
                            };
                        },

                        // This method will return documentElement in the following cases:
                        // 1) For the element inside the iframe without offsetParent, this method will return
                        //    documentElement of the parent window
                        // 2) For the hidden or detached element
                        // 3) For body or html element, i.e. in case of the html node - it will return itself
                        //
                        // but those exceptions were never presented as a real life use-cases
                        // and might be considered as more preferable results.
                        //
                        // This logic, however, is not guaranteed and can change at any point in the future
                        offsetParent: function () {
                            return this.map(function () {
                                var offsetParent = this.offsetParent;

                                while (
                                    offsetParent &&
                                    jQuery.css(offsetParent, 'position') === 'static'
                                ) {
                                    offsetParent = offsetParent.offsetParent;
                                }

                                return offsetParent || documentElement;
                            });
                        },
                    });

                    // Create scrollLeft and scrollTop methods
                    jQuery.each(
                        { scrollLeft: 'pageXOffset', scrollTop: 'pageYOffset' },
                        function (method, prop) {
                            var top = 'pageYOffset' === prop;

                            jQuery.fn[method] = function (val) {
                                return access(
                                    this,
                                    function (elem, method, val) {
                                        // Coalesce documents and windows
                                        var win;
                                        if (isWindow(elem)) {
                                            win = elem;
                                        } else if (elem.nodeType === 9) {
                                            win = elem.defaultView;
                                        }

                                        if (val === undefined) {
                                            return win ? win[prop] : elem[method];
                                        }

                                        if (win) {
                                            win.scrollTo(
                                                !top ? val : win.pageXOffset,
                                                top ? val : win.pageYOffset,
                                            );
                                        } else {
                                            elem[method] = val;
                                        }
                                    },
                                    method,
                                    val,
                                    arguments.length,
                                );
                            };
                        },
                    );

                    // Support: Safari <=7 - 9.1, Chrome <=37 - 49
                    // Add the top/left cssHooks using jQuery.fn.position
                    // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
                    // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
                    // getComputedStyle returns percent when specified for top/left/bottom/right;
                    // rather than make the css module depend on the offset module, just check for it here
                    jQuery.each(['top', 'left'], function (_i, prop) {
                        jQuery.cssHooks[prop] = addGetHookIf(
                            support.pixelPosition,
                            function (elem, computed) {
                                if (computed) {
                                    computed = curCSS(elem, prop);

                                    // If curCSS returns percentage, fallback to offset
                                    return rnumnonpx.test(computed)
                                        ? jQuery(elem).position()[prop] + 'px'
                                        : computed;
                                }
                            },
                        );
                    });

                    // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
                    jQuery.each({ Height: 'height', Width: 'width' }, function (name, type) {
                        jQuery.each(
                            {
                                padding: 'inner' + name,
                                content: type,
                                '': 'outer' + name,
                            },
                            function (defaultExtra, funcName) {
                                // Margin is only for outerHeight, outerWidth
                                jQuery.fn[funcName] = function (margin, value) {
                                    var chainable =
                                            arguments.length &&
                                            (defaultExtra || typeof margin !== 'boolean'),
                                        extra =
                                            defaultExtra ||
                                            (margin === true || value === true
                                                ? 'margin'
                                                : 'border');

                                    return access(
                                        this,
                                        function (elem, type, value) {
                                            var doc;

                                            if (isWindow(elem)) {
                                                // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
                                                return funcName.indexOf('outer') === 0
                                                    ? elem['inner' + name]
                                                    : elem.document.documentElement[
                                                          'client' + name
                                                      ];
                                            }

                                            // Get document width or height
                                            if (elem.nodeType === 9) {
                                                doc = elem.documentElement;

                                                // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
                                                // whichever is greatest
                                                return Math.max(
                                                    elem.body['scroll' + name],
                                                    doc['scroll' + name],
                                                    elem.body['offset' + name],
                                                    doc['offset' + name],
                                                    doc['client' + name],
                                                );
                                            }

                                            return value === undefined
                                                ? // Get width or height on the element, requesting but not forcing parseFloat
                                                  jQuery.css(elem, type, extra)
                                                : // Set width or height on the element
                                                  jQuery.style(elem, type, value, extra);
                                        },
                                        type,
                                        chainable ? margin : undefined,
                                        chainable,
                                    );
                                };
                            },
                        );
                    });

                    jQuery.each(
                        [
                            'ajaxStart',
                            'ajaxStop',
                            'ajaxComplete',
                            'ajaxError',
                            'ajaxSuccess',
                            'ajaxSend',
                        ],
                        function (_i, type) {
                            jQuery.fn[type] = function (fn) {
                                return this.on(type, fn);
                            };
                        },
                    );

                    jQuery.fn.extend({
                        bind: function (types, data, fn) {
                            return this.on(types, null, data, fn);
                        },
                        unbind: function (types, fn) {
                            return this.off(types, null, fn);
                        },

                        delegate: function (selector, types, data, fn) {
                            return this.on(types, selector, data, fn);
                        },
                        undelegate: function (selector, types, fn) {
                            // ( namespace ) or ( selector, types [, fn] )
                            return arguments.length === 1
                                ? this.off(selector, '**')
                                : this.off(types, selector || '**', fn);
                        },

                        hover: function (fnOver, fnOut) {
                            return this.on('mouseenter', fnOver).on('mouseleave', fnOut || fnOver);
                        },
                    });

                    jQuery.each(
                        (
                            'blur focus focusin focusout resize scroll click dblclick ' +
                            'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' +
                            'change select submit keydown keypress keyup contextmenu'
                        ).split(' '),
                        function (_i, name) {
                            // Handle event binding
                            jQuery.fn[name] = function (data, fn) {
                                return arguments.length > 0
                                    ? this.on(name, null, data, fn)
                                    : this.trigger(name);
                            };
                        },
                    );

                    // Support: Android <=4.0 only
                    // Make sure we trim BOM and NBSP
                    // Require that the "whitespace run" starts from a non-whitespace
                    // to avoid O(N^2) behavior when the engine would try matching "\s+$" at each space position.
                    var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;

                    // Bind a function to a context, optionally partially applying any
                    // arguments.
                    // jQuery.proxy is deprecated to promote standards (specifically Function#bind)
                    // However, it is not slated for removal any time soon
                    jQuery.proxy = function (fn, context) {
                        var tmp, args, proxy;

                        if (typeof context === 'string') {
                            tmp = fn[context];
                            context = fn;
                            fn = tmp;
                        }

                        // Quick check to determine if target is callable, in the spec
                        // this throws a TypeError, but we will just return undefined.
                        if (!isFunction(fn)) {
                            return undefined;
                        }

                        // Simulated bind
                        args = slice.call(arguments, 2);
                        proxy = function () {
                            return fn.apply(context || this, args.concat(slice.call(arguments)));
                        };

                        // Set the guid of unique handler to the same of original handler, so it can be removed
                        proxy.guid = fn.guid = fn.guid || jQuery.guid++;

                        return proxy;
                    };

                    jQuery.holdReady = function (hold) {
                        if (hold) {
                            jQuery.readyWait++;
                        } else {
                            jQuery.ready(true);
                        }
                    };
                    jQuery.isArray = Array.isArray;
                    jQuery.parseJSON = JSON.parse;
                    jQuery.nodeName = nodeName;
                    jQuery.isFunction = isFunction;
                    jQuery.isWindow = isWindow;
                    jQuery.camelCase = camelCase;
                    jQuery.type = toType;

                    jQuery.now = Date.now;

                    jQuery.isNumeric = function (obj) {
                        // As of jQuery 3.0, isNumeric is limited to
                        // strings and numbers (primitives or objects)
                        // that can be coerced to finite numbers (gh-2662)
                        var type = jQuery.type(obj);
                        return (
                            (type === 'number' || type === 'string') &&
                            // parseFloat NaNs numeric-cast false positives ("")
                            // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
                            // subtraction forces infinities to NaN
                            !isNaN(obj - parseFloat(obj))
                        );
                    };

                    jQuery.trim = function (text) {
                        return text == null ? '' : (text + '').replace(rtrim, '$1');
                    };

                    // Register as a named AMD module, since jQuery can be concatenated with other
                    // files that may use define, but not via a proper concatenation script that
                    // understands anonymous AMD modules. A named AMD is safest and most robust
                    // way to register. Lowercase jquery is used because AMD module names are
                    // derived from file names, and jQuery is normally delivered in a lowercase
                    // file name. Do this after creating the global so that if an AMD module wants
                    // to call noConflict to hide this version of jQuery, it will work.

                    // Note that for maximum portability, libraries that are not jQuery should
                    // declare themselves as anonymous modules, and avoid setting a global if an
                    // AMD loader is present. jQuery is a special case. For more information, see
                    // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

                    if (typeof define === 'function' && define.amd) {
                        define('jquery', [], function () {
                            return jQuery;
                        });
                    }

                    var // Map over jQuery in case of overwrite
                        _jQuery = window.jQuery,
                        // Map over the $ in case of overwrite
                        _$ = window.$;

                    jQuery.noConflict = function (deep) {
                        if (window.$ === jQuery) {
                            window.$ = _$;
                        }

                        if (deep && window.jQuery === jQuery) {
                            window.jQuery = _jQuery;
                        }

                        return jQuery;
                    };

                    // Expose jQuery and $ identifiers, even in AMD
                    // (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)
                    // and CommonJS for browser emulators (trac-13566)
                    if (typeof noGlobal === 'undefined') {
                        window.jQuery = window.$ = jQuery;
                    }

                    return jQuery;
                });
            },
            {},
        ],
        34: [
            function (require, module, exports) {
                'use strict';
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.Consumer = void 0;
                const Logger_1 = require('./Logger');
                const EnhancedEventEmitter_1 = require('./EnhancedEventEmitter');
                const errors_1 = require('./errors');
                const logger = new Logger_1.Logger('Consumer');
                class Consumer extends EnhancedEventEmitter_1.EnhancedEventEmitter {
                    constructor({
                        id,
                        localId,
                        producerId,
                        rtpReceiver,
                        track,
                        rtpParameters,
                        appData,
                    }) {
                        super();
                        // Closed flag.
                        this._closed = false;
                        // Observer instance.
                        this._observer = new EnhancedEventEmitter_1.EnhancedEventEmitter();
                        logger.debug('constructor()');
                        this._id = id;
                        this._localId = localId;
                        this._producerId = producerId;
                        this._rtpReceiver = rtpReceiver;
                        this._track = track;
                        this._rtpParameters = rtpParameters;
                        this._paused = !track.enabled;
                        this._appData = appData || {};
                        this.onTrackEnded = this.onTrackEnded.bind(this);
                        this.handleTrack();
                    }
                    /**
                     * Consumer id.
                     */
                    get id() {
                        return this._id;
                    }
                    /**
                     * Local id.
                     */
                    get localId() {
                        return this._localId;
                    }
                    /**
                     * Associated Producer id.
                     */
                    get producerId() {
                        return this._producerId;
                    }
                    /**
                     * Whether the Consumer is closed.
                     */
                    get closed() {
                        return this._closed;
                    }
                    /**
                     * Media kind.
                     */
                    get kind() {
                        return this._track.kind;
                    }
                    /**
                     * Associated RTCRtpReceiver.
                     */
                    get rtpReceiver() {
                        return this._rtpReceiver;
                    }
                    /**
                     * The associated track.
                     */
                    get track() {
                        return this._track;
                    }
                    /**
                     * RTP parameters.
                     */
                    get rtpParameters() {
                        return this._rtpParameters;
                    }
                    /**
                     * Whether the Consumer is paused.
                     */
                    get paused() {
                        return this._paused;
                    }
                    /**
                     * App custom data.
                     */
                    get appData() {
                        return this._appData;
                    }
                    /**
                     * App custom data setter.
                     */
                    set appData(appData) {
                        this._appData = appData;
                    }
                    get observer() {
                        return this._observer;
                    }
                    /**
                     * Closes the Consumer.
                     */
                    close() {
                        if (this._closed) {
                            return;
                        }
                        logger.debug('close()');
                        this._closed = true;
                        this.destroyTrack();
                        this.emit('@close');
                        // Emit observer event.
                        this._observer.safeEmit('close');
                    }
                    /**
                     * Transport was closed.
                     */
                    transportClosed() {
                        if (this._closed) {
                            return;
                        }
                        logger.debug('transportClosed()');
                        this._closed = true;
                        this.destroyTrack();
                        this.safeEmit('transportclose');
                        // Emit observer event.
                        this._observer.safeEmit('close');
                    }
                    /**
                     * Get associated RTCRtpReceiver stats.
                     */
                    async getStats() {
                        if (this._closed) {
                            throw new errors_1.InvalidStateError('closed');
                        }
                        return new Promise((resolve, reject) => {
                            this.safeEmit('@getstats', resolve, reject);
                        });
                    }
                    /**
                     * Pauses receiving media.
                     */
                    pause() {
                        logger.debug('pause()');
                        if (this._closed) {
                            logger.error('pause() | Consumer closed');
                            return;
                        }
                        if (this._paused) {
                            logger.debug('pause() | Consumer is already paused');
                            return;
                        }
                        this._paused = true;
                        this._track.enabled = false;
                        this.emit('@pause');
                        // Emit observer event.
                        this._observer.safeEmit('pause');
                    }
                    /**
                     * Resumes receiving media.
                     */
                    resume() {
                        logger.debug('resume()');
                        if (this._closed) {
                            logger.error('resume() | Consumer closed');
                            return;
                        }
                        if (!this._paused) {
                            logger.debug('resume() | Consumer is already resumed');
                            return;
                        }
                        this._paused = false;
                        this._track.enabled = true;
                        this.emit('@resume');
                        // Emit observer event.
                        this._observer.safeEmit('resume');
                    }
                    onTrackEnded() {
                        logger.debug('track "ended" event');
                        this.safeEmit('trackended');
                        // Emit observer event.
                        this._observer.safeEmit('trackended');
                    }
                    handleTrack() {
                        this._track.addEventListener('ended', this.onTrackEnded);
                    }
                    destroyTrack() {
                        try {
                            this._track.removeEventListener('ended', this.onTrackEnded);
                            this._track.stop();
                        } catch (error) {}
                    }
                }
                exports.Consumer = Consumer;
            },
            { './EnhancedEventEmitter': 38, './Logger': 39, './errors': 44 },
        ],
        35: [
            function (require, module, exports) {
                'use strict';
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.DataConsumer = void 0;
                const Logger_1 = require('./Logger');
                const EnhancedEventEmitter_1 = require('./EnhancedEventEmitter');
                const logger = new Logger_1.Logger('DataConsumer');
                class DataConsumer extends EnhancedEventEmitter_1.EnhancedEventEmitter {
                    constructor({
                        id,
                        dataProducerId,
                        dataChannel,
                        sctpStreamParameters,
                        appData,
                    }) {
                        super();
                        // Closed flag.
                        this._closed = false;
                        // Observer instance.
                        this._observer = new EnhancedEventEmitter_1.EnhancedEventEmitter();
                        logger.debug('constructor()');
                        this._id = id;
                        this._dataProducerId = dataProducerId;
                        this._dataChannel = dataChannel;
                        this._sctpStreamParameters = sctpStreamParameters;
                        this._appData = appData || {};
                        this.handleDataChannel();
                    }
                    /**
                     * DataConsumer id.
                     */
                    get id() {
                        return this._id;
                    }
                    /**
                     * Associated DataProducer id.
                     */
                    get dataProducerId() {
                        return this._dataProducerId;
                    }
                    /**
                     * Whether the DataConsumer is closed.
                     */
                    get closed() {
                        return this._closed;
                    }
                    /**
                     * SCTP stream parameters.
                     */
                    get sctpStreamParameters() {
                        return this._sctpStreamParameters;
                    }
                    /**
                     * DataChannel readyState.
                     */
                    get readyState() {
                        return this._dataChannel.readyState;
                    }
                    /**
                     * DataChannel label.
                     */
                    get label() {
                        return this._dataChannel.label;
                    }
                    /**
                     * DataChannel protocol.
                     */
                    get protocol() {
                        return this._dataChannel.protocol;
                    }
                    /**
                     * DataChannel binaryType.
                     */
                    get binaryType() {
                        return this._dataChannel.binaryType;
                    }
                    /**
                     * Set DataChannel binaryType.
                     */
                    set binaryType(binaryType) {
                        this._dataChannel.binaryType = binaryType;
                    }
                    /**
                     * App custom data.
                     */
                    get appData() {
                        return this._appData;
                    }
                    /**
                     * App custom data setter.
                     */
                    set appData(appData) {
                        this._appData = appData;
                    }
                    get observer() {
                        return this._observer;
                    }
                    /**
                     * Closes the DataConsumer.
                     */
                    close() {
                        if (this._closed) {
                            return;
                        }
                        logger.debug('close()');
                        this._closed = true;
                        this._dataChannel.close();
                        this.emit('@close');
                        // Emit observer event.
                        this._observer.safeEmit('close');
                    }
                    /**
                     * Transport was closed.
                     */
                    transportClosed() {
                        if (this._closed) {
                            return;
                        }
                        logger.debug('transportClosed()');
                        this._closed = true;
                        this._dataChannel.close();
                        this.safeEmit('transportclose');
                        // Emit observer event.
                        this._observer.safeEmit('close');
                    }
                    handleDataChannel() {
                        this._dataChannel.addEventListener('open', () => {
                            if (this._closed) {
                                return;
                            }
                            logger.debug('DataChannel "open" event');
                            this.safeEmit('open');
                        });
                        this._dataChannel.addEventListener('error', (event) => {
                            if (this._closed) {
                                return;
                            }
                            let { error } = event;
                            if (!error) {
                                error = new Error('unknown DataChannel error');
                            }
                            if (error.errorDetail === 'sctp-failure') {
                                logger.error(
                                    'DataChannel SCTP error [sctpCauseCode:%s]: %s',
                                    error.sctpCauseCode,
                                    error.message,
                                );
                            } else {
                                logger.error('DataChannel "error" event: %o', error);
                            }
                            this.safeEmit('error', error);
                        });
                        this._dataChannel.addEventListener('close', () => {
                            if (this._closed) {
                                return;
                            }
                            logger.warn('DataChannel "close" event');
                            this._closed = true;
                            this.emit('@close');
                            this.safeEmit('close');
                            // Emit observer event.
                            this._observer.safeEmit('close');
                        });
                        this._dataChannel.addEventListener('message', (event) => {
                            if (this._closed) {
                                return;
                            }
                            this.safeEmit('message', event.data);
                        });
                    }
                }
                exports.DataConsumer = DataConsumer;
            },
            { './EnhancedEventEmitter': 38, './Logger': 39 },
        ],
        36: [
            function (require, module, exports) {
                'use strict';
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.DataProducer = void 0;
                const Logger_1 = require('./Logger');
                const EnhancedEventEmitter_1 = require('./EnhancedEventEmitter');
                const errors_1 = require('./errors');
                const logger = new Logger_1.Logger('DataProducer');
                class DataProducer extends EnhancedEventEmitter_1.EnhancedEventEmitter {
                    constructor({ id, dataChannel, sctpStreamParameters, appData }) {
                        super();
                        // Closed flag.
                        this._closed = false;
                        // Observer instance.
                        this._observer = new EnhancedEventEmitter_1.EnhancedEventEmitter();
                        logger.debug('constructor()');
                        this._id = id;
                        this._dataChannel = dataChannel;
                        this._sctpStreamParameters = sctpStreamParameters;
                        this._appData = appData || {};
                        this.handleDataChannel();
                    }
                    /**
                     * DataProducer id.
                     */
                    get id() {
                        return this._id;
                    }
                    /**
                     * Whether the DataProducer is closed.
                     */
                    get closed() {
                        return this._closed;
                    }
                    /**
                     * SCTP stream parameters.
                     */
                    get sctpStreamParameters() {
                        return this._sctpStreamParameters;
                    }
                    /**
                     * DataChannel readyState.
                     */
                    get readyState() {
                        return this._dataChannel.readyState;
                    }
                    /**
                     * DataChannel label.
                     */
                    get label() {
                        return this._dataChannel.label;
                    }
                    /**
                     * DataChannel protocol.
                     */
                    get protocol() {
                        return this._dataChannel.protocol;
                    }
                    /**
                     * DataChannel bufferedAmount.
                     */
                    get bufferedAmount() {
                        return this._dataChannel.bufferedAmount;
                    }
                    /**
                     * DataChannel bufferedAmountLowThreshold.
                     */
                    get bufferedAmountLowThreshold() {
                        return this._dataChannel.bufferedAmountLowThreshold;
                    }
                    /**
                     * Set DataChannel bufferedAmountLowThreshold.
                     */
                    set bufferedAmountLowThreshold(bufferedAmountLowThreshold) {
                        this._dataChannel.bufferedAmountLowThreshold = bufferedAmountLowThreshold;
                    }
                    /**
                     * App custom data.
                     */
                    get appData() {
                        return this._appData;
                    }
                    /**
                     * App custom data setter.
                     */
                    set appData(appData) {
                        this._appData = appData;
                    }
                    get observer() {
                        return this._observer;
                    }
                    /**
                     * Closes the DataProducer.
                     */
                    close() {
                        if (this._closed) {
                            return;
                        }
                        logger.debug('close()');
                        this._closed = true;
                        this._dataChannel.close();
                        this.emit('@close');
                        // Emit observer event.
                        this._observer.safeEmit('close');
                    }
                    /**
                     * Transport was closed.
                     */
                    transportClosed() {
                        if (this._closed) {
                            return;
                        }
                        logger.debug('transportClosed()');
                        this._closed = true;
                        this._dataChannel.close();
                        this.safeEmit('transportclose');
                        // Emit observer event.
                        this._observer.safeEmit('close');
                    }
                    /**
                     * Send a message.
                     *
                     * @param {String|Blob|ArrayBuffer|ArrayBufferView} data.
                     */
                    send(data) {
                        logger.debug('send()');
                        if (this._closed) {
                            throw new errors_1.InvalidStateError('closed');
                        }
                        this._dataChannel.send(data);
                    }
                    handleDataChannel() {
                        this._dataChannel.addEventListener('open', () => {
                            if (this._closed) {
                                return;
                            }
                            logger.debug('DataChannel "open" event');
                            this.safeEmit('open');
                        });
                        this._dataChannel.addEventListener('error', (event) => {
                            if (this._closed) {
                                return;
                            }
                            let { error } = event;
                            if (!error) {
                                error = new Error('unknown DataChannel error');
                            }
                            if (error.errorDetail === 'sctp-failure') {
                                logger.error(
                                    'DataChannel SCTP error [sctpCauseCode:%s]: %s',
                                    error.sctpCauseCode,
                                    error.message,
                                );
                            } else {
                                logger.error('DataChannel "error" event: %o', error);
                            }
                            this.safeEmit('error', error);
                        });
                        this._dataChannel.addEventListener('close', () => {
                            if (this._closed) {
                                return;
                            }
                            logger.warn('DataChannel "close" event');
                            this._closed = true;
                            this.emit('@close');
                            this.safeEmit('close');
                            // Emit observer event.
                            this._observer.safeEmit('close');
                        });
                        this._dataChannel.addEventListener('message', () => {
                            if (this._closed) {
                                return;
                            }
                            logger.warn(
                                'DataChannel "message" event in a DataProducer, message discarded',
                            );
                        });
                        this._dataChannel.addEventListener('bufferedamountlow', () => {
                            if (this._closed) {
                                return;
                            }
                            this.safeEmit('bufferedamountlow');
                        });
                    }
                }
                exports.DataProducer = DataProducer;
            },
            { './EnhancedEventEmitter': 38, './Logger': 39, './errors': 44 },
        ],
        37: [
            function (require, module, exports) {
                'use strict';
                var __createBinding =
                    (this && this.__createBinding) ||
                    (Object.create
                        ? function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              var desc = Object.getOwnPropertyDescriptor(m, k);
                              if (
                                  !desc ||
                                  ('get' in desc
                                      ? !m.__esModule
                                      : desc.writable || desc.configurable)
                              ) {
                                  desc = {
                                      enumerable: true,
                                      get: function () {
                                          return m[k];
                                      },
                                  };
                              }
                              Object.defineProperty(o, k2, desc);
                          }
                        : function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              o[k2] = m[k];
                          });
                var __setModuleDefault =
                    (this && this.__setModuleDefault) ||
                    (Object.create
                        ? function (o, v) {
                              Object.defineProperty(o, 'default', { enumerable: true, value: v });
                          }
                        : function (o, v) {
                              o['default'] = v;
                          });
                var __importStar =
                    (this && this.__importStar) ||
                    function (mod) {
                        if (mod && mod.__esModule) return mod;
                        var result = {};
                        if (mod != null)
                            for (var k in mod)
                                if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
                                    __createBinding(result, mod, k);
                        __setModuleDefault(result, mod);
                        return result;
                    };
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.Device = exports.detectDevice = void 0;
                const ua_parser_js_1 = require('ua-parser-js');
                const Logger_1 = require('./Logger');
                const EnhancedEventEmitter_1 = require('./EnhancedEventEmitter');
                const errors_1 = require('./errors');
                const utils = __importStar(require('./utils'));
                const ortc = __importStar(require('./ortc'));
                const Transport_1 = require('./Transport');
                const Chrome111_1 = require('./handlers/Chrome111');
                const Chrome74_1 = require('./handlers/Chrome74');
                const Chrome70_1 = require('./handlers/Chrome70');
                const Chrome67_1 = require('./handlers/Chrome67');
                const Chrome55_1 = require('./handlers/Chrome55');
                const Firefox60_1 = require('./handlers/Firefox60');
                const Safari12_1 = require('./handlers/Safari12');
                const Safari11_1 = require('./handlers/Safari11');
                const Edge11_1 = require('./handlers/Edge11');
                const ReactNativeUnifiedPlan_1 = require('./handlers/ReactNativeUnifiedPlan');
                const ReactNative_1 = require('./handlers/ReactNative');
                const logger = new Logger_1.Logger('Device');
                function detectDevice() {
                    // React-Native.
                    // NOTE: react-native-webrtc >= 1.75.0 is required.
                    // NOTE: react-native-webrtc with Unified Plan requires version >= 106.0.0.
                    if (typeof navigator === 'object' && navigator.product === 'ReactNative') {
                        logger.debug('detectDevice() | React-Native detected');
                        if (typeof RTCPeerConnection === 'undefined') {
                            logger.warn(
                                'detectDevice() | unsupported react-native-webrtc without RTCPeerConnection, forgot to call registerGlobals()?',
                            );
                            return undefined;
                        }
                        if (typeof RTCRtpTransceiver !== 'undefined') {
                            logger.debug('detectDevice() | ReactNative UnifiedPlan handler chosen');
                            return 'ReactNativeUnifiedPlan';
                        } else {
                            logger.debug('detectDevice() | ReactNative PlanB handler chosen');
                            return 'ReactNative';
                        }
                    }
                    // Browser.
                    else if (
                        typeof navigator === 'object' &&
                        typeof navigator.userAgent === 'string'
                    ) {
                        const ua = navigator.userAgent;
                        const uaParser = new ua_parser_js_1.UAParser(ua);
                        logger.debug(
                            'detectDevice() | browser detected [ua:%s, parsed:%o]',
                            ua,
                            uaParser.getResult(),
                        );
                        const browser = uaParser.getBrowser();
                        const browserName = browser.name?.toLowerCase() ?? '';
                        const browserVersion = parseInt(browser.major ?? '0');
                        const engine = uaParser.getEngine();
                        const engineName = engine.name?.toLowerCase() ?? '';
                        const os = uaParser.getOS();
                        const osName = os.name?.toLowerCase() ?? '';
                        const osVersion = parseFloat(os.version ?? '0');
                        const isIOS = osName === 'ios';
                        const isChrome = [
                            'chrome',
                            'chromium',
                            'mobile chrome',
                            'chrome webview',
                            'chrome headless',
                        ].includes(browserName);
                        const isFirefox = ['firefox', 'mobile firefox', 'mobile focus'].includes(
                            browserName,
                        );
                        const isSafari = ['safari', 'mobile safari'].includes(browserName);
                        const isEdge = ['edge'].includes(browserName);
                        // Chrome, Chromium, and Edge.
                        if ((isChrome || isEdge) && !isIOS && browserVersion >= 111) {
                            return 'Chrome111';
                        } else if (
                            (isChrome && !isIOS && browserVersion >= 74) ||
                            (isEdge && !isIOS && browserVersion >= 88)
                        ) {
                            return 'Chrome74';
                        } else if (isChrome && !isIOS && browserVersion >= 70) {
                            return 'Chrome70';
                        } else if (isChrome && !isIOS && browserVersion >= 67) {
                            return 'Chrome67';
                        } else if (isChrome && !isIOS && browserVersion >= 55) {
                            return 'Chrome55';
                        }
                        // Firefox.
                        else if (isFirefox && !isIOS && browserVersion >= 60) {
                            return 'Firefox60';
                        }
                        // Firefox on iOS (so Safari).
                        else if (isFirefox && isIOS && osVersion >= 14.3) {
                            return 'Safari12';
                        }
                        // Safari with Unified-Plan support enabled.
                        else if (
                            isSafari &&
                            browserVersion >= 12 &&
                            typeof RTCRtpTransceiver !== 'undefined' &&
                            RTCRtpTransceiver.prototype.hasOwnProperty('currentDirection')
                        ) {
                            return 'Safari12';
                        }
                        // Safari with Plab-B support.
                        else if (isSafari && browserVersion >= 11) {
                            return 'Safari11';
                        }
                        // Old Edge with ORTC support.
                        else if (isEdge && !isIOS && browserVersion >= 11 && browserVersion <= 18) {
                            return 'Edge11';
                        }
                        // Best effort for WebKit based browsers in iOS.
                        else if (
                            engineName === 'webkit' &&
                            isIOS &&
                            osVersion >= 14.3 &&
                            typeof RTCRtpTransceiver !== 'undefined' &&
                            RTCRtpTransceiver.prototype.hasOwnProperty('currentDirection')
                        ) {
                            return 'Safari12';
                        }
                        // Best effort for Chromium based browsers.
                        else if (engineName === 'blink') {
                            const match = ua.match(/(?:(?:Chrome|Chromium))[ /](\w+)/i);
                            if (match) {
                                const version = Number(match[1]);
                                if (version >= 111) {
                                    return 'Chrome111';
                                } else if (version >= 74) {
                                    return 'Chrome74';
                                } else if (version >= 70) {
                                    return 'Chrome70';
                                } else if (version >= 67) {
                                    return 'Chrome67';
                                } else {
                                    return 'Chrome55';
                                }
                            } else {
                                return 'Chrome111';
                            }
                        }
                        // Unsupported browser.
                        else {
                            logger.warn(
                                'detectDevice() | browser not supported [name:%s, version:%s]',
                                browserName,
                                browserVersion,
                            );
                            return undefined;
                        }
                    }
                    // Unknown device.
                    else {
                        logger.warn('detectDevice() | unknown device');
                        return undefined;
                    }
                }
                exports.detectDevice = detectDevice;
                class Device {
                    /**
                     * Create a new Device to connect to mediasoup server.
                     *
                     * @throws {UnsupportedError} if device is not supported.
                     */
                    constructor({ handlerName, handlerFactory, Handler } = {}) {
                        // Loaded flag.
                        this._loaded = false;
                        // Observer instance.
                        this._observer = new EnhancedEventEmitter_1.EnhancedEventEmitter();
                        logger.debug('constructor()');
                        // Handle deprecated option.
                        if (Handler) {
                            logger.warn(
                                'constructor() | Handler option is DEPRECATED, use handlerName or handlerFactory instead',
                            );
                            if (typeof Handler === 'string') {
                                handlerName = Handler;
                            } else {
                                throw new TypeError(
                                    'non string Handler option no longer supported, use handlerFactory instead',
                                );
                            }
                        }
                        if (handlerName && handlerFactory) {
                            throw new TypeError(
                                'just one of handlerName or handlerInterface can be given',
                            );
                        }
                        if (handlerFactory) {
                            this._handlerFactory = handlerFactory;
                        } else {
                            if (handlerName) {
                                logger.debug('constructor() | handler given: %s', handlerName);
                            } else {
                                handlerName = detectDevice();
                                if (handlerName) {
                                    logger.debug(
                                        'constructor() | detected handler: %s',
                                        handlerName,
                                    );
                                } else {
                                    throw new errors_1.UnsupportedError('device not supported');
                                }
                            }
                            switch (handlerName) {
                                case 'Chrome111':
                                    this._handlerFactory = Chrome111_1.Chrome111.createFactory();
                                    break;
                                case 'Chrome74':
                                    this._handlerFactory = Chrome74_1.Chrome74.createFactory();
                                    break;
                                case 'Chrome70':
                                    this._handlerFactory = Chrome70_1.Chrome70.createFactory();
                                    break;
                                case 'Chrome67':
                                    this._handlerFactory = Chrome67_1.Chrome67.createFactory();
                                    break;
                                case 'Chrome55':
                                    this._handlerFactory = Chrome55_1.Chrome55.createFactory();
                                    break;
                                case 'Firefox60':
                                    this._handlerFactory = Firefox60_1.Firefox60.createFactory();
                                    break;
                                case 'Safari12':
                                    this._handlerFactory = Safari12_1.Safari12.createFactory();
                                    break;
                                case 'Safari11':
                                    this._handlerFactory = Safari11_1.Safari11.createFactory();
                                    break;
                                case 'Edge11':
                                    this._handlerFactory = Edge11_1.Edge11.createFactory();
                                    break;
                                case 'ReactNativeUnifiedPlan':
                                    this._handlerFactory =
                                        ReactNativeUnifiedPlan_1.ReactNativeUnifiedPlan.createFactory();
                                    break;
                                case 'ReactNative':
                                    this._handlerFactory =
                                        ReactNative_1.ReactNative.createFactory();
                                    break;
                                default:
                                    throw new TypeError(`unknown handlerName "${handlerName}"`);
                            }
                        }
                        // Create a temporal handler to get its name.
                        const handler = this._handlerFactory();
                        this._handlerName = handler.name;
                        handler.close();
                        this._extendedRtpCapabilities = undefined;
                        this._recvRtpCapabilities = undefined;
                        this._canProduceByKind = {
                            audio: false,
                            video: false,
                        };
                        this._sctpCapabilities = undefined;
                    }
                    /**
                     * The RTC handler name.
                     */
                    get handlerName() {
                        return this._handlerName;
                    }
                    /**
                     * Whether the Device is loaded.
                     */
                    get loaded() {
                        return this._loaded;
                    }
                    /**
                     * RTP capabilities of the Device for receiving media.
                     *
                     * @throws {InvalidStateError} if not loaded.
                     */
                    get rtpCapabilities() {
                        if (!this._loaded) {
                            throw new errors_1.InvalidStateError('not loaded');
                        }
                        return this._recvRtpCapabilities;
                    }
                    /**
                     * SCTP capabilities of the Device.
                     *
                     * @throws {InvalidStateError} if not loaded.
                     */
                    get sctpCapabilities() {
                        if (!this._loaded) {
                            throw new errors_1.InvalidStateError('not loaded');
                        }
                        return this._sctpCapabilities;
                    }
                    get observer() {
                        return this._observer;
                    }
                    /**
                     * Initialize the Device.
                     */
                    async load({ routerRtpCapabilities }) {
                        logger.debug('load() [routerRtpCapabilities:%o]', routerRtpCapabilities);
                        routerRtpCapabilities = utils.clone(routerRtpCapabilities, undefined);
                        // Temporal handler to get its capabilities.
                        let handler;
                        try {
                            if (this._loaded) {
                                throw new errors_1.InvalidStateError('already loaded');
                            }
                            // This may throw.
                            ortc.validateRtpCapabilities(routerRtpCapabilities);
                            handler = this._handlerFactory();
                            const nativeRtpCapabilities = await handler.getNativeRtpCapabilities();
                            logger.debug(
                                'load() | got native RTP capabilities:%o',
                                nativeRtpCapabilities,
                            );
                            // This may throw.
                            ortc.validateRtpCapabilities(nativeRtpCapabilities);
                            // Get extended RTP capabilities.
                            this._extendedRtpCapabilities = ortc.getExtendedRtpCapabilities(
                                nativeRtpCapabilities,
                                routerRtpCapabilities,
                            );
                            logger.debug(
                                'load() | got extended RTP capabilities:%o',
                                this._extendedRtpCapabilities,
                            );
                            // Check whether we can produce audio/video.
                            this._canProduceByKind.audio = ortc.canSend(
                                'audio',
                                this._extendedRtpCapabilities,
                            );
                            this._canProduceByKind.video = ortc.canSend(
                                'video',
                                this._extendedRtpCapabilities,
                            );
                            // Generate our receiving RTP capabilities for receiving media.
                            this._recvRtpCapabilities = ortc.getRecvRtpCapabilities(
                                this._extendedRtpCapabilities,
                            );
                            // This may throw.
                            ortc.validateRtpCapabilities(this._recvRtpCapabilities);
                            logger.debug(
                                'load() | got receiving RTP capabilities:%o',
                                this._recvRtpCapabilities,
                            );
                            // Generate our SCTP capabilities.
                            this._sctpCapabilities = await handler.getNativeSctpCapabilities();
                            logger.debug(
                                'load() | got native SCTP capabilities:%o',
                                this._sctpCapabilities,
                            );
                            // This may throw.
                            ortc.validateSctpCapabilities(this._sctpCapabilities);
                            logger.debug('load() succeeded');
                            this._loaded = true;
                            handler.close();
                        } catch (error) {
                            if (handler) {
                                handler.close();
                            }
                            throw error;
                        }
                    }
                    /**
                     * Whether we can produce audio/video.
                     *
                     * @throws {InvalidStateError} if not loaded.
                     * @throws {TypeError} if wrong arguments.
                     */
                    canProduce(kind) {
                        if (!this._loaded) {
                            throw new errors_1.InvalidStateError('not loaded');
                        } else if (kind !== 'audio' && kind !== 'video') {
                            throw new TypeError(`invalid kind "${kind}"`);
                        }
                        return this._canProduceByKind[kind];
                    }
                    /**
                     * Creates a Transport for sending media.
                     *
                     * @throws {InvalidStateError} if not loaded.
                     * @throws {TypeError} if wrong arguments.
                     */
                    createSendTransport({
                        id,
                        iceParameters,
                        iceCandidates,
                        dtlsParameters,
                        sctpParameters,
                        iceServers,
                        iceTransportPolicy,
                        additionalSettings,
                        proprietaryConstraints,
                        appData,
                    }) {
                        logger.debug('createSendTransport()');
                        return this.createTransport({
                            direction: 'send',
                            id: id,
                            iceParameters: iceParameters,
                            iceCandidates: iceCandidates,
                            dtlsParameters: dtlsParameters,
                            sctpParameters: sctpParameters,
                            iceServers: iceServers,
                            iceTransportPolicy: iceTransportPolicy,
                            additionalSettings: additionalSettings,
                            proprietaryConstraints: proprietaryConstraints,
                            appData: appData,
                        });
                    }
                    /**
                     * Creates a Transport for receiving media.
                     *
                     * @throws {InvalidStateError} if not loaded.
                     * @throws {TypeError} if wrong arguments.
                     */
                    createRecvTransport({
                        id,
                        iceParameters,
                        iceCandidates,
                        dtlsParameters,
                        sctpParameters,
                        iceServers,
                        iceTransportPolicy,
                        additionalSettings,
                        proprietaryConstraints,
                        appData,
                    }) {
                        logger.debug('createRecvTransport()');
                        return this.createTransport({
                            direction: 'recv',
                            id: id,
                            iceParameters: iceParameters,
                            iceCandidates: iceCandidates,
                            dtlsParameters: dtlsParameters,
                            sctpParameters: sctpParameters,
                            iceServers: iceServers,
                            iceTransportPolicy: iceTransportPolicy,
                            additionalSettings: additionalSettings,
                            proprietaryConstraints: proprietaryConstraints,
                            appData: appData,
                        });
                    }
                    createTransport({
                        direction,
                        id,
                        iceParameters,
                        iceCandidates,
                        dtlsParameters,
                        sctpParameters,
                        iceServers,
                        iceTransportPolicy,
                        additionalSettings,
                        proprietaryConstraints,
                        appData,
                    }) {
                        if (!this._loaded) {
                            throw new errors_1.InvalidStateError('not loaded');
                        } else if (typeof id !== 'string') {
                            throw new TypeError('missing id');
                        } else if (typeof iceParameters !== 'object') {
                            throw new TypeError('missing iceParameters');
                        } else if (!Array.isArray(iceCandidates)) {
                            throw new TypeError('missing iceCandidates');
                        } else if (typeof dtlsParameters !== 'object') {
                            throw new TypeError('missing dtlsParameters');
                        } else if (sctpParameters && typeof sctpParameters !== 'object') {
                            throw new TypeError('wrong sctpParameters');
                        } else if (appData && typeof appData !== 'object') {
                            throw new TypeError('if given, appData must be an object');
                        }
                        // Create a new Transport.
                        const transport = new Transport_1.Transport({
                            direction,
                            id,
                            iceParameters,
                            iceCandidates,
                            dtlsParameters,
                            sctpParameters,
                            iceServers,
                            iceTransportPolicy,
                            additionalSettings,
                            proprietaryConstraints,
                            appData,
                            handlerFactory: this._handlerFactory,
                            extendedRtpCapabilities: this._extendedRtpCapabilities,
                            canProduceByKind: this._canProduceByKind,
                        });
                        // Emit observer event.
                        this._observer.safeEmit('newtransport', transport);
                        return transport;
                    }
                }
                exports.Device = Device;
            },
            {
                './EnhancedEventEmitter': 38,
                './Logger': 39,
                './Transport': 43,
                './errors': 44,
                './handlers/Chrome111': 45,
                './handlers/Chrome55': 46,
                './handlers/Chrome67': 47,
                './handlers/Chrome70': 48,
                './handlers/Chrome74': 49,
                './handlers/Edge11': 50,
                './handlers/Firefox60': 51,
                './handlers/ReactNative': 53,
                './handlers/ReactNativeUnifiedPlan': 54,
                './handlers/Safari11': 55,
                './handlers/Safari12': 56,
                './ortc': 65,
                './utils': 68,
                'ua-parser-js': 85,
            },
        ],
        38: [
            function (require, module, exports) {
                'use strict';
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.EnhancedEventEmitter = void 0;
                const events_1 = require('events');
                const Logger_1 = require('./Logger');
                const logger = new Logger_1.Logger('EnhancedEventEmitter');
                class EnhancedEventEmitter extends events_1.EventEmitter {
                    constructor() {
                        super();
                        this.setMaxListeners(Infinity);
                    }
                    emit(eventName, ...args) {
                        return super.emit(eventName, ...args);
                    }
                    /**
                     * Special addition to the EventEmitter API.
                     */
                    safeEmit(eventName, ...args) {
                        const numListeners = super.listenerCount(eventName);
                        try {
                            return super.emit(eventName, ...args);
                        } catch (error) {
                            logger.error(
                                'safeEmit() | event listener threw an error [eventName:%s]:%o',
                                eventName,
                                error,
                            );
                            return Boolean(numListeners);
                        }
                    }
                    on(eventName, listener) {
                        super.on(eventName, listener);
                        return this;
                    }
                    off(eventName, listener) {
                        super.off(eventName, listener);
                        return this;
                    }
                    addListener(eventName, listener) {
                        super.on(eventName, listener);
                        return this;
                    }
                    prependListener(eventName, listener) {
                        super.prependListener(eventName, listener);
                        return this;
                    }
                    once(eventName, listener) {
                        super.once(eventName, listener);
                        return this;
                    }
                    prependOnceListener(eventName, listener) {
                        super.prependOnceListener(eventName, listener);
                        return this;
                    }
                    removeListener(eventName, listener) {
                        super.off(eventName, listener);
                        return this;
                    }
                    removeAllListeners(eventName) {
                        super.removeAllListeners(eventName);
                        return this;
                    }
                    listenerCount(eventName) {
                        return super.listenerCount(eventName);
                    }
                    listeners(eventName) {
                        return super.listeners(eventName);
                    }
                    rawListeners(eventName) {
                        return super.rawListeners(eventName);
                    }
                }
                exports.EnhancedEventEmitter = EnhancedEventEmitter;
            },
            { './Logger': 39, events: 30 },
        ],
        39: [
            function (require, module, exports) {
                'use strict';
                var __importDefault =
                    (this && this.__importDefault) ||
                    function (mod) {
                        return mod && mod.__esModule ? mod : { default: mod };
                    };
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.Logger = void 0;
                const debug_1 = __importDefault(require('debug'));
                const APP_NAME = 'mediasoup-client';
                class Logger {
                    constructor(prefix) {
                        if (prefix) {
                            this._debug = (0, debug_1.default)(`${APP_NAME}:${prefix}`);
                            this._warn = (0, debug_1.default)(`${APP_NAME}:WARN:${prefix}`);
                            this._error = (0, debug_1.default)(`${APP_NAME}:ERROR:${prefix}`);
                        } else {
                            this._debug = (0, debug_1.default)(APP_NAME);
                            this._warn = (0, debug_1.default)(`${APP_NAME}:WARN`);
                            this._error = (0, debug_1.default)(`${APP_NAME}:ERROR`);
                        }
                        /* eslint-disable no-console */
                        this._debug.log = console.info.bind(console);
                        this._warn.log = console.warn.bind(console);
                        this._error.log = console.error.bind(console);
                        /* eslint-enable no-console */
                    }
                    get debug() {
                        return this._debug;
                    }
                    get warn() {
                        return this._warn;
                    }
                    get error() {
                        return this._error;
                    }
                }
                exports.Logger = Logger;
            },
            { debug: 8 },
        ],
        40: [
            function (require, module, exports) {
                'use strict';
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.Producer = void 0;
                const Logger_1 = require('./Logger');
                const EnhancedEventEmitter_1 = require('./EnhancedEventEmitter');
                const errors_1 = require('./errors');
                const logger = new Logger_1.Logger('Producer');
                class Producer extends EnhancedEventEmitter_1.EnhancedEventEmitter {
                    constructor({
                        id,
                        localId,
                        rtpSender,
                        track,
                        rtpParameters,
                        stopTracks,
                        disableTrackOnPause,
                        zeroRtpOnPause,
                        appData,
                    }) {
                        super();
                        // Closed flag.
                        this._closed = false;
                        // Observer instance.
                        this._observer = new EnhancedEventEmitter_1.EnhancedEventEmitter();
                        logger.debug('constructor()');
                        this._id = id;
                        this._localId = localId;
                        this._rtpSender = rtpSender;
                        this._track = track;
                        this._kind = track.kind;
                        this._rtpParameters = rtpParameters;
                        this._paused = disableTrackOnPause ? !track.enabled : false;
                        this._maxSpatialLayer = undefined;
                        this._stopTracks = stopTracks;
                        this._disableTrackOnPause = disableTrackOnPause;
                        this._zeroRtpOnPause = zeroRtpOnPause;
                        this._appData = appData || {};
                        this.onTrackEnded = this.onTrackEnded.bind(this);
                        // NOTE: Minor issue. If zeroRtpOnPause is true, we cannot emit the
                        // '@replacetrack' event here, so RTCRtpSender.track won't be null.
                        this.handleTrack();
                    }
                    /**
                     * Producer id.
                     */
                    get id() {
                        return this._id;
                    }
                    /**
                     * Local id.
                     */
                    get localId() {
                        return this._localId;
                    }
                    /**
                     * Whether the Producer is closed.
                     */
                    get closed() {
                        return this._closed;
                    }
                    /**
                     * Media kind.
                     */
                    get kind() {
                        return this._kind;
                    }
                    /**
                     * Associated RTCRtpSender.
                     */
                    get rtpSender() {
                        return this._rtpSender;
                    }
                    /**
                     * The associated track.
                     */
                    get track() {
                        return this._track;
                    }
                    /**
                     * RTP parameters.
                     */
                    get rtpParameters() {
                        return this._rtpParameters;
                    }
                    /**
                     * Whether the Producer is paused.
                     */
                    get paused() {
                        return this._paused;
                    }
                    /**
                     * Max spatial layer.
                     *
                     * @type {Number | undefined}
                     */
                    get maxSpatialLayer() {
                        return this._maxSpatialLayer;
                    }
                    /**
                     * App custom data.
                     */
                    get appData() {
                        return this._appData;
                    }
                    /**
                     * App custom data setter.
                     */
                    set appData(appData) {
                        this._appData = appData;
                    }
                    get observer() {
                        return this._observer;
                    }
                    /**
                     * Closes the Producer.
                     */
                    close() {
                        if (this._closed) {
                            return;
                        }
                        logger.debug('close()');
                        this._closed = true;
                        this.destroyTrack();
                        this.emit('@close');
                        // Emit observer event.
                        this._observer.safeEmit('close');
                    }
                    /**
                     * Transport was closed.
                     */
                    transportClosed() {
                        if (this._closed) {
                            return;
                        }
                        logger.debug('transportClosed()');
                        this._closed = true;
                        this.destroyTrack();
                        this.safeEmit('transportclose');
                        // Emit observer event.
                        this._observer.safeEmit('close');
                    }
                    /**
                     * Get associated RTCRtpSender stats.
                     */
                    async getStats() {
                        if (this._closed) {
                            throw new errors_1.InvalidStateError('closed');
                        }
                        return new Promise((resolve, reject) => {
                            this.safeEmit('@getstats', resolve, reject);
                        });
                    }
                    /**
                     * Pauses sending media.
                     */
                    pause() {
                        logger.debug('pause()');
                        if (this._closed) {
                            logger.error('pause() | Producer closed');
                            return;
                        }
                        this._paused = true;
                        if (this._track && this._disableTrackOnPause) {
                            this._track.enabled = false;
                        }
                        if (this._zeroRtpOnPause) {
                            new Promise((resolve, reject) => {
                                this.safeEmit('@pause', resolve, reject);
                            }).catch(() => {});
                        }
                        // Emit observer event.
                        this._observer.safeEmit('pause');
                    }
                    /**
                     * Resumes sending media.
                     */
                    resume() {
                        logger.debug('resume()');
                        if (this._closed) {
                            logger.error('resume() | Producer closed');
                            return;
                        }
                        this._paused = false;
                        if (this._track && this._disableTrackOnPause) {
                            this._track.enabled = true;
                        }
                        if (this._zeroRtpOnPause) {
                            new Promise((resolve, reject) => {
                                this.safeEmit('@resume', resolve, reject);
                            }).catch(() => {});
                        }
                        // Emit observer event.
                        this._observer.safeEmit('resume');
                    }
                    /**
                     * Replaces the current track with a new one or null.
                     */
                    async replaceTrack({ track }) {
                        logger.debug('replaceTrack() [track:%o]', track);
                        if (this._closed) {
                            // This must be done here. Otherwise there is no chance to stop the given
                            // track.
                            if (track && this._stopTracks) {
                                try {
                                    track.stop();
                                } catch (error) {}
                            }
                            throw new errors_1.InvalidStateError('closed');
                        } else if (track && track.readyState === 'ended') {
                            throw new errors_1.InvalidStateError('track ended');
                        }
                        // Do nothing if this is the same track as the current handled one.
                        if (track === this._track) {
                            logger.debug('replaceTrack() | same track, ignored');
                            return;
                        }
                        await new Promise((resolve, reject) => {
                            this.safeEmit('@replacetrack', track, resolve, reject);
                        });
                        // Destroy the previous track.
                        this.destroyTrack();
                        // Set the new track.
                        this._track = track;
                        // If this Producer was paused/resumed and the state of the new
                        // track does not match, fix it.
                        if (this._track && this._disableTrackOnPause) {
                            if (!this._paused) {
                                this._track.enabled = true;
                            } else if (this._paused) {
                                this._track.enabled = false;
                            }
                        }
                        // Handle the effective track.
                        this.handleTrack();
                    }
                    /**
                     * Sets the video max spatial layer to be sent.
                     */
                    async setMaxSpatialLayer(spatialLayer) {
                        if (this._closed) {
                            throw new errors_1.InvalidStateError('closed');
                        } else if (this._kind !== 'video') {
                            throw new errors_1.UnsupportedError('not a video Producer');
                        } else if (typeof spatialLayer !== 'number') {
                            throw new TypeError('invalid spatialLayer');
                        }
                        if (spatialLayer === this._maxSpatialLayer) {
                            return;
                        }
                        await new Promise((resolve, reject) => {
                            this.safeEmit('@setmaxspatiallayer', spatialLayer, resolve, reject);
                        }).catch(() => {});
                        this._maxSpatialLayer = spatialLayer;
                    }
                    async setRtpEncodingParameters(params) {
                        if (this._closed) {
                            throw new errors_1.InvalidStateError('closed');
                        } else if (typeof params !== 'object') {
                            throw new TypeError('invalid params');
                        }
                        await new Promise((resolve, reject) => {
                            this.safeEmit('@setrtpencodingparameters', params, resolve, reject);
                        });
                    }
                    onTrackEnded() {
                        logger.debug('track "ended" event');
                        this.safeEmit('trackended');
                        // Emit observer event.
                        this._observer.safeEmit('trackended');
                    }
                    handleTrack() {
                        if (!this._track) {
                            return;
                        }
                        this._track.addEventListener('ended', this.onTrackEnded);
                    }
                    destroyTrack() {
                        if (!this._track) {
                            return;
                        }
                        try {
                            this._track.removeEventListener('ended', this.onTrackEnded);
                            // Just stop the track unless the app set stopTracks: false.
                            if (this._stopTracks) {
                                this._track.stop();
                            }
                        } catch (error) {}
                    }
                }
                exports.Producer = Producer;
            },
            { './EnhancedEventEmitter': 38, './Logger': 39, './errors': 44 },
        ],
        41: [
            function (require, module, exports) {
                'use strict';
                /**
                 * The RTP capabilities define what mediasoup or an endpoint can receive at
                 * media level.
                 */
                Object.defineProperty(exports, '__esModule', { value: true });
            },
            {},
        ],
        42: [
            function (require, module, exports) {
                'use strict';
                Object.defineProperty(exports, '__esModule', { value: true });
            },
            {},
        ],
        43: [
            function (require, module, exports) {
                'use strict';
                var __createBinding =
                    (this && this.__createBinding) ||
                    (Object.create
                        ? function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              var desc = Object.getOwnPropertyDescriptor(m, k);
                              if (
                                  !desc ||
                                  ('get' in desc
                                      ? !m.__esModule
                                      : desc.writable || desc.configurable)
                              ) {
                                  desc = {
                                      enumerable: true,
                                      get: function () {
                                          return m[k];
                                      },
                                  };
                              }
                              Object.defineProperty(o, k2, desc);
                          }
                        : function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              o[k2] = m[k];
                          });
                var __setModuleDefault =
                    (this && this.__setModuleDefault) ||
                    (Object.create
                        ? function (o, v) {
                              Object.defineProperty(o, 'default', { enumerable: true, value: v });
                          }
                        : function (o, v) {
                              o['default'] = v;
                          });
                var __importStar =
                    (this && this.__importStar) ||
                    function (mod) {
                        if (mod && mod.__esModule) return mod;
                        var result = {};
                        if (mod != null)
                            for (var k in mod)
                                if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
                                    __createBinding(result, mod, k);
                        __setModuleDefault(result, mod);
                        return result;
                    };
                var __importDefault =
                    (this && this.__importDefault) ||
                    function (mod) {
                        return mod && mod.__esModule ? mod : { default: mod };
                    };
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.Transport = void 0;
                const awaitqueue_1 = require('awaitqueue');
                const queue_microtask_1 = __importDefault(require('queue-microtask'));
                const Logger_1 = require('./Logger');
                const EnhancedEventEmitter_1 = require('./EnhancedEventEmitter');
                const errors_1 = require('./errors');
                const utils = __importStar(require('./utils'));
                const ortc = __importStar(require('./ortc'));
                const Producer_1 = require('./Producer');
                const Consumer_1 = require('./Consumer');
                const DataProducer_1 = require('./DataProducer');
                const DataConsumer_1 = require('./DataConsumer');
                const logger = new Logger_1.Logger('Transport');
                class ConsumerCreationTask {
                    constructor(consumerOptions) {
                        this.consumerOptions = consumerOptions;
                        this.promise = new Promise((resolve, reject) => {
                            this.resolve = resolve;
                            this.reject = reject;
                        });
                    }
                }
                class Transport extends EnhancedEventEmitter_1.EnhancedEventEmitter {
                    constructor({
                        direction,
                        id,
                        iceParameters,
                        iceCandidates,
                        dtlsParameters,
                        sctpParameters,
                        iceServers,
                        iceTransportPolicy,
                        additionalSettings,
                        proprietaryConstraints,
                        appData,
                        handlerFactory,
                        extendedRtpCapabilities,
                        canProduceByKind,
                    }) {
                        super();
                        // Closed flag.
                        this._closed = false;
                        // Transport ICE gathering state.
                        this._iceGatheringState = 'new';
                        // Transport connection state.
                        this._connectionState = 'new';
                        // Map of Producers indexed by id.
                        this._producers = new Map();
                        // Map of Consumers indexed by id.
                        this._consumers = new Map();
                        // Map of DataProducers indexed by id.
                        this._dataProducers = new Map();
                        // Map of DataConsumers indexed by id.
                        this._dataConsumers = new Map();
                        // Whether the Consumer for RTP probation has been created.
                        this._probatorConsumerCreated = false;
                        // AwaitQueue instance to make async tasks happen sequentially.
                        this._awaitQueue = new awaitqueue_1.AwaitQueue();
                        // Consumer creation tasks awaiting to be processed.
                        this._pendingConsumerTasks = [];
                        // Consumer creation in progress flag.
                        this._consumerCreationInProgress = false;
                        // Consumers pending to be paused.
                        this._pendingPauseConsumers = new Map();
                        // Consumer pause in progress flag.
                        this._consumerPauseInProgress = false;
                        // Consumers pending to be resumed.
                        this._pendingResumeConsumers = new Map();
                        // Consumer resume in progress flag.
                        this._consumerResumeInProgress = false;
                        // Consumers pending to be closed.
                        this._pendingCloseConsumers = new Map();
                        // Consumer close in progress flag.
                        this._consumerCloseInProgress = false;
                        // Observer instance.
                        this._observer = new EnhancedEventEmitter_1.EnhancedEventEmitter();
                        logger.debug('constructor() [id:%s, direction:%s]', id, direction);
                        this._id = id;
                        this._direction = direction;
                        this._extendedRtpCapabilities = extendedRtpCapabilities;
                        this._canProduceByKind = canProduceByKind;
                        this._maxSctpMessageSize = sctpParameters
                            ? sctpParameters.maxMessageSize
                            : null;
                        // Clone and sanitize additionalSettings.
                        additionalSettings = utils.clone(additionalSettings, {});
                        delete additionalSettings.iceServers;
                        delete additionalSettings.iceTransportPolicy;
                        delete additionalSettings.bundlePolicy;
                        delete additionalSettings.rtcpMuxPolicy;
                        delete additionalSettings.sdpSemantics;
                        this._handler = handlerFactory();
                        this._handler.run({
                            direction,
                            iceParameters,
                            iceCandidates,
                            dtlsParameters,
                            sctpParameters,
                            iceServers,
                            iceTransportPolicy,
                            additionalSettings,
                            proprietaryConstraints,
                            extendedRtpCapabilities,
                        });
                        this._appData = appData || {};
                        this.handleHandler();
                    }
                    /**
                     * Transport id.
                     */
                    get id() {
                        return this._id;
                    }
                    /**
                     * Whether the Transport is closed.
                     */
                    get closed() {
                        return this._closed;
                    }
                    /**
                     * Transport direction.
                     */
                    get direction() {
                        return this._direction;
                    }
                    /**
                     * RTC handler instance.
                     */
                    get handler() {
                        return this._handler;
                    }
                    /**
                     * ICE gathering state.
                     */
                    get iceGatheringState() {
                        return this._iceGatheringState;
                    }
                    /**
                     * Connection state.
                     */
                    get connectionState() {
                        return this._connectionState;
                    }
                    /**
                     * App custom data.
                     */
                    get appData() {
                        return this._appData;
                    }
                    /**
                     * App custom data setter.
                     */
                    set appData(appData) {
                        this._appData = appData;
                    }
                    get observer() {
                        return this._observer;
                    }
                    /**
                     * Close the Transport.
                     */
                    close() {
                        if (this._closed) {
                            return;
                        }
                        logger.debug('close()');
                        this._closed = true;
                        // Stop the AwaitQueue.
                        this._awaitQueue.stop();
                        // Close the handler.
                        this._handler.close();
                        // Change connection state to 'closed' since the handler may not emit
                        // '@connectionstatechange' event.
                        this._connectionState = 'closed';
                        // Close all Producers.
                        for (const producer of this._producers.values()) {
                            producer.transportClosed();
                        }
                        this._producers.clear();
                        // Close all Consumers.
                        for (const consumer of this._consumers.values()) {
                            consumer.transportClosed();
                        }
                        this._consumers.clear();
                        // Close all DataProducers.
                        for (const dataProducer of this._dataProducers.values()) {
                            dataProducer.transportClosed();
                        }
                        this._dataProducers.clear();
                        // Close all DataConsumers.
                        for (const dataConsumer of this._dataConsumers.values()) {
                            dataConsumer.transportClosed();
                        }
                        this._dataConsumers.clear();
                        // Emit observer event.
                        this._observer.safeEmit('close');
                    }
                    /**
                     * Get associated Transport (RTCPeerConnection) stats.
                     *
                     * @returns {RTCStatsReport}
                     */
                    async getStats() {
                        if (this._closed) {
                            throw new errors_1.InvalidStateError('closed');
                        }
                        return this._handler.getTransportStats();
                    }
                    /**
                     * Restart ICE connection.
                     */
                    async restartIce({ iceParameters }) {
                        logger.debug('restartIce()');
                        if (this._closed) {
                            throw new errors_1.InvalidStateError('closed');
                        } else if (!iceParameters) {
                            throw new TypeError('missing iceParameters');
                        }
                        // Enqueue command.
                        return this._awaitQueue.push(
                            async () => await this._handler.restartIce(iceParameters),
                            'transport.restartIce()',
                        );
                    }
                    /**
                     * Update ICE servers.
                     */
                    async updateIceServers({ iceServers } = {}) {
                        logger.debug('updateIceServers()');
                        if (this._closed) {
                            throw new errors_1.InvalidStateError('closed');
                        } else if (!Array.isArray(iceServers)) {
                            throw new TypeError('missing iceServers');
                        }
                        // Enqueue command.
                        return this._awaitQueue.push(
                            async () => this._handler.updateIceServers(iceServers),
                            'transport.updateIceServers()',
                        );
                    }
                    /**
                     * Create a Producer.
                     */
                    async produce({
                        track,
                        encodings,
                        codecOptions,
                        codec,
                        stopTracks = true,
                        disableTrackOnPause = true,
                        zeroRtpOnPause = false,
                        appData = {},
                    } = {}) {
                        logger.debug('produce() [track:%o]', track);
                        if (this._closed) {
                            throw new errors_1.InvalidStateError('closed');
                        } else if (!track) {
                            throw new TypeError('missing track');
                        } else if (this._direction !== 'send') {
                            throw new errors_1.UnsupportedError('not a sending Transport');
                        } else if (!this._canProduceByKind[track.kind]) {
                            throw new errors_1.UnsupportedError(`cannot produce ${track.kind}`);
                        } else if (track.readyState === 'ended') {
                            throw new errors_1.InvalidStateError('track ended');
                        } else if (
                            this.listenerCount('connect') === 0 &&
                            this._connectionState === 'new'
                        ) {
                            throw new TypeError('no "connect" listener set into this transport');
                        } else if (this.listenerCount('produce') === 0) {
                            throw new TypeError('no "produce" listener set into this transport');
                        } else if (appData && typeof appData !== 'object') {
                            throw new TypeError('if given, appData must be an object');
                        }
                        // Enqueue command.
                        return (
                            this._awaitQueue
                                .push(async () => {
                                    let normalizedEncodings;
                                    if (encodings && !Array.isArray(encodings)) {
                                        throw TypeError('encodings must be an array');
                                    } else if (encodings && encodings.length === 0) {
                                        normalizedEncodings = undefined;
                                    } else if (encodings) {
                                        normalizedEncodings = encodings.map((encoding) => {
                                            const normalizedEncoding = { active: true };
                                            if (encoding.active === false) {
                                                normalizedEncoding.active = false;
                                            }
                                            if (typeof encoding.dtx === 'boolean') {
                                                normalizedEncoding.dtx = encoding.dtx;
                                            }
                                            if (typeof encoding.scalabilityMode === 'string') {
                                                normalizedEncoding.scalabilityMode =
                                                    encoding.scalabilityMode;
                                            }
                                            if (
                                                typeof encoding.scaleResolutionDownBy === 'number'
                                            ) {
                                                normalizedEncoding.scaleResolutionDownBy =
                                                    encoding.scaleResolutionDownBy;
                                            }
                                            if (typeof encoding.maxBitrate === 'number') {
                                                normalizedEncoding.maxBitrate = encoding.maxBitrate;
                                            }
                                            if (typeof encoding.maxFramerate === 'number') {
                                                normalizedEncoding.maxFramerate =
                                                    encoding.maxFramerate;
                                            }
                                            if (typeof encoding.adaptivePtime === 'boolean') {
                                                normalizedEncoding.adaptivePtime =
                                                    encoding.adaptivePtime;
                                            }
                                            if (typeof encoding.priority === 'string') {
                                                normalizedEncoding.priority = encoding.priority;
                                            }
                                            if (typeof encoding.networkPriority === 'string') {
                                                normalizedEncoding.networkPriority =
                                                    encoding.networkPriority;
                                            }
                                            return normalizedEncoding;
                                        });
                                    }
                                    const { localId, rtpParameters, rtpSender } =
                                        await this._handler.send({
                                            track,
                                            encodings: normalizedEncodings,
                                            codecOptions,
                                            codec,
                                        });
                                    try {
                                        // This will fill rtpParameters's missing fields with default values.
                                        ortc.validateRtpParameters(rtpParameters);
                                        const { id } = await new Promise((resolve, reject) => {
                                            this.safeEmit(
                                                'produce',
                                                {
                                                    kind: track.kind,
                                                    rtpParameters,
                                                    appData,
                                                },
                                                resolve,
                                                reject,
                                            );
                                        });
                                        const producer = new Producer_1.Producer({
                                            id,
                                            localId,
                                            rtpSender,
                                            track,
                                            rtpParameters,
                                            stopTracks,
                                            disableTrackOnPause,
                                            zeroRtpOnPause,
                                            appData,
                                        });
                                        this._producers.set(producer.id, producer);
                                        this.handleProducer(producer);
                                        // Emit observer event.
                                        this._observer.safeEmit('newproducer', producer);
                                        return producer;
                                    } catch (error) {
                                        this._handler.stopSending(localId).catch(() => {});
                                        throw error;
                                    }
                                }, 'transport.produce()')
                                // This catch is needed to stop the given track if the command above
                                // failed due to closed Transport.
                                .catch((error) => {
                                    if (stopTracks) {
                                        try {
                                            track.stop();
                                        } catch (error2) {}
                                    }
                                    throw error;
                                })
                        );
                    }
                    /**
                     * Create a Consumer to consume a remote Producer.
                     */
                    async consume({ id, producerId, kind, rtpParameters, streamId, appData = {} }) {
                        logger.debug('consume()');
                        rtpParameters = utils.clone(rtpParameters, undefined);
                        if (this._closed) {
                            throw new errors_1.InvalidStateError('closed');
                        } else if (this._direction !== 'recv') {
                            throw new errors_1.UnsupportedError('not a receiving Transport');
                        } else if (typeof id !== 'string') {
                            throw new TypeError('missing id');
                        } else if (typeof producerId !== 'string') {
                            throw new TypeError('missing producerId');
                        } else if (kind !== 'audio' && kind !== 'video') {
                            throw new TypeError(`invalid kind '${kind}'`);
                        } else if (
                            this.listenerCount('connect') === 0 &&
                            this._connectionState === 'new'
                        ) {
                            throw new TypeError('no "connect" listener set into this transport');
                        } else if (appData && typeof appData !== 'object') {
                            throw new TypeError('if given, appData must be an object');
                        }
                        // Ensure the device can consume it.
                        const canConsume = ortc.canReceive(
                            rtpParameters,
                            this._extendedRtpCapabilities,
                        );
                        if (!canConsume) {
                            throw new errors_1.UnsupportedError('cannot consume this Producer');
                        }
                        const consumerCreationTask = new ConsumerCreationTask({
                            id,
                            producerId,
                            kind,
                            rtpParameters,
                            streamId,
                            appData,
                        });
                        // Store the Consumer creation task.
                        this._pendingConsumerTasks.push(consumerCreationTask);
                        // There is no Consumer creation in progress, create it now.
                        (0, queue_microtask_1.default)(() => {
                            if (this._closed) {
                                return;
                            }
                            if (this._consumerCreationInProgress === false) {
                                this.createPendingConsumers();
                            }
                        });
                        return consumerCreationTask.promise;
                    }
                    /**
                     * Create a DataProducer
                     */
                    async produceData({
                        ordered = true,
                        maxPacketLifeTime,
                        maxRetransmits,
                        label = '',
                        protocol = '',
                        appData = {},
                    } = {}) {
                        logger.debug('produceData()');
                        if (this._closed) {
                            throw new errors_1.InvalidStateError('closed');
                        } else if (this._direction !== 'send') {
                            throw new errors_1.UnsupportedError('not a sending Transport');
                        } else if (!this._maxSctpMessageSize) {
                            throw new errors_1.UnsupportedError(
                                'SCTP not enabled by remote Transport',
                            );
                        } else if (
                            this.listenerCount('connect') === 0 &&
                            this._connectionState === 'new'
                        ) {
                            throw new TypeError('no "connect" listener set into this transport');
                        } else if (this.listenerCount('producedata') === 0) {
                            throw new TypeError(
                                'no "producedata" listener set into this transport',
                            );
                        } else if (appData && typeof appData !== 'object') {
                            throw new TypeError('if given, appData must be an object');
                        }
                        if (maxPacketLifeTime || maxRetransmits) {
                            ordered = false;
                        }
                        // Enqueue command.
                        return this._awaitQueue.push(async () => {
                            const { dataChannel, sctpStreamParameters } =
                                await this._handler.sendDataChannel({
                                    ordered,
                                    maxPacketLifeTime,
                                    maxRetransmits,
                                    label,
                                    protocol,
                                });
                            // This will fill sctpStreamParameters's missing fields with default values.
                            ortc.validateSctpStreamParameters(sctpStreamParameters);
                            const { id } = await new Promise((resolve, reject) => {
                                this.safeEmit(
                                    'producedata',
                                    {
                                        sctpStreamParameters,
                                        label,
                                        protocol,
                                        appData,
                                    },
                                    resolve,
                                    reject,
                                );
                            });
                            const dataProducer = new DataProducer_1.DataProducer({
                                id,
                                dataChannel,
                                sctpStreamParameters,
                                appData,
                            });
                            this._dataProducers.set(dataProducer.id, dataProducer);
                            this.handleDataProducer(dataProducer);
                            // Emit observer event.
                            this._observer.safeEmit('newdataproducer', dataProducer);
                            return dataProducer;
                        }, 'transport.produceData()');
                    }
                    /**
                     * Create a DataConsumer
                     */
                    async consumeData({
                        id,
                        dataProducerId,
                        sctpStreamParameters,
                        label = '',
                        protocol = '',
                        appData = {},
                    }) {
                        logger.debug('consumeData()');
                        sctpStreamParameters = utils.clone(sctpStreamParameters, undefined);
                        if (this._closed) {
                            throw new errors_1.InvalidStateError('closed');
                        } else if (this._direction !== 'recv') {
                            throw new errors_1.UnsupportedError('not a receiving Transport');
                        } else if (!this._maxSctpMessageSize) {
                            throw new errors_1.UnsupportedError(
                                'SCTP not enabled by remote Transport',
                            );
                        } else if (typeof id !== 'string') {
                            throw new TypeError('missing id');
                        } else if (typeof dataProducerId !== 'string') {
                            throw new TypeError('missing dataProducerId');
                        } else if (
                            this.listenerCount('connect') === 0 &&
                            this._connectionState === 'new'
                        ) {
                            throw new TypeError('no "connect" listener set into this transport');
                        } else if (appData && typeof appData !== 'object') {
                            throw new TypeError('if given, appData must be an object');
                        }
                        // This may throw.
                        ortc.validateSctpStreamParameters(sctpStreamParameters);
                        // Enqueue command.
                        return this._awaitQueue.push(async () => {
                            const { dataChannel } = await this._handler.receiveDataChannel({
                                sctpStreamParameters,
                                label,
                                protocol,
                            });
                            const dataConsumer = new DataConsumer_1.DataConsumer({
                                id,
                                dataProducerId,
                                dataChannel,
                                sctpStreamParameters,
                                appData,
                            });
                            this._dataConsumers.set(dataConsumer.id, dataConsumer);
                            this.handleDataConsumer(dataConsumer);
                            // Emit observer event.
                            this._observer.safeEmit('newdataconsumer', dataConsumer);
                            return dataConsumer;
                        }, 'transport.consumeData()');
                    }
                    // This method is guaranteed to never throw.
                    async createPendingConsumers() {
                        this._consumerCreationInProgress = true;
                        this._awaitQueue
                            .push(async () => {
                                if (this._pendingConsumerTasks.length === 0) {
                                    logger.debug(
                                        'createPendingConsumers() | there is no Consumer to be created',
                                    );
                                    return;
                                }
                                const pendingConsumerTasks = [...this._pendingConsumerTasks];
                                // Clear pending Consumer tasks.
                                this._pendingConsumerTasks = [];
                                // Video Consumer in order to create the probator.
                                let videoConsumerForProbator = undefined;
                                // Fill options list.
                                const optionsList = [];
                                for (const task of pendingConsumerTasks) {
                                    const { id, kind, rtpParameters, streamId } =
                                        task.consumerOptions;
                                    optionsList.push({
                                        trackId: id,
                                        kind: kind,
                                        rtpParameters,
                                        streamId,
                                    });
                                }
                                try {
                                    const results = await this._handler.receive(optionsList);
                                    for (let idx = 0; idx < results.length; ++idx) {
                                        const task = pendingConsumerTasks[idx];
                                        const result = results[idx];
                                        const { id, producerId, kind, rtpParameters, appData } =
                                            task.consumerOptions;
                                        const { localId, rtpReceiver, track } = result;
                                        const consumer = new Consumer_1.Consumer({
                                            id: id,
                                            localId,
                                            producerId: producerId,
                                            rtpReceiver,
                                            track,
                                            rtpParameters,
                                            appData: appData,
                                        });
                                        this._consumers.set(consumer.id, consumer);
                                        this.handleConsumer(consumer);
                                        // If this is the first video Consumer and the Consumer for RTP probation
                                        // has not yet been created, it's time to create it.
                                        if (
                                            !this._probatorConsumerCreated &&
                                            !videoConsumerForProbator &&
                                            kind === 'video'
                                        ) {
                                            videoConsumerForProbator = consumer;
                                        }
                                        // Emit observer event.
                                        this._observer.safeEmit('newconsumer', consumer);
                                        task.resolve(consumer);
                                    }
                                } catch (error) {
                                    for (const task of pendingConsumerTasks) {
                                        task.reject(error);
                                    }
                                }
                                // If RTP probation must be handled, do it now.
                                if (videoConsumerForProbator) {
                                    try {
                                        const probatorRtpParameters =
                                            ortc.generateProbatorRtpParameters(
                                                videoConsumerForProbator.rtpParameters,
                                            );
                                        await this._handler.receive([
                                            {
                                                trackId: 'probator',
                                                kind: 'video',
                                                rtpParameters: probatorRtpParameters,
                                            },
                                        ]);
                                        logger.debug(
                                            'createPendingConsumers() | Consumer for RTP probation created',
                                        );
                                        this._probatorConsumerCreated = true;
                                    } catch (error) {
                                        logger.error(
                                            'createPendingConsumers() | failed to create Consumer for RTP probation:%o',
                                            error,
                                        );
                                    }
                                }
                            }, 'transport.createPendingConsumers()')
                            .then(() => {
                                this._consumerCreationInProgress = false;
                                // There are pending Consumer tasks, enqueue their creation.
                                if (this._pendingConsumerTasks.length > 0) {
                                    this.createPendingConsumers();
                                }
                            })
                            // NOTE: We only get here when the await queue is closed.
                            .catch(() => {});
                    }
                    pausePendingConsumers() {
                        this._consumerPauseInProgress = true;
                        this._awaitQueue
                            .push(async () => {
                                if (this._pendingPauseConsumers.size === 0) {
                                    logger.debug(
                                        'pausePendingConsumers() | there is no Consumer to be paused',
                                    );
                                    return;
                                }
                                const pendingPauseConsumers = Array.from(
                                    this._pendingPauseConsumers.values(),
                                );
                                // Clear pending pause Consumer map.
                                this._pendingPauseConsumers.clear();
                                try {
                                    const localIds = pendingPauseConsumers.map(
                                        (consumer) => consumer.localId,
                                    );
                                    await this._handler.pauseReceiving(localIds);
                                } catch (error) {
                                    logger.error(
                                        'pausePendingConsumers() | failed to pause Consumers:',
                                        error,
                                    );
                                }
                            }, 'transport.pausePendingConsumers')
                            .then(() => {
                                this._consumerPauseInProgress = false;
                                // There are pending Consumers to be paused, do it.
                                if (this._pendingPauseConsumers.size > 0) {
                                    this.pausePendingConsumers();
                                }
                            })
                            // NOTE: We only get here when the await queue is closed.
                            .catch(() => {});
                    }
                    resumePendingConsumers() {
                        this._consumerResumeInProgress = true;
                        this._awaitQueue
                            .push(async () => {
                                if (this._pendingResumeConsumers.size === 0) {
                                    logger.debug(
                                        'resumePendingConsumers() | there is no Consumer to be resumed',
                                    );
                                    return;
                                }
                                const pendingResumeConsumers = Array.from(
                                    this._pendingResumeConsumers.values(),
                                );
                                // Clear pending resume Consumer map.
                                this._pendingResumeConsumers.clear();
                                try {
                                    const localIds = pendingResumeConsumers.map(
                                        (consumer) => consumer.localId,
                                    );
                                    await this._handler.resumeReceiving(localIds);
                                } catch (error) {
                                    logger.error(
                                        'resumePendingConsumers() | failed to resume Consumers:',
                                        error,
                                    );
                                }
                            }, 'transport.resumePendingConsumers')
                            .then(() => {
                                this._consumerResumeInProgress = false;
                                // There are pending Consumer to be resumed, do it.
                                if (this._pendingResumeConsumers.size > 0) {
                                    this.resumePendingConsumers();
                                }
                            })
                            // NOTE: We only get here when the await queue is closed.
                            .catch(() => {});
                    }
                    closePendingConsumers() {
                        this._consumerCloseInProgress = true;
                        this._awaitQueue
                            .push(async () => {
                                if (this._pendingCloseConsumers.size === 0) {
                                    logger.debug(
                                        'closePendingConsumers() | there is no Consumer to be closed',
                                    );
                                    return;
                                }
                                const pendingCloseConsumers = Array.from(
                                    this._pendingCloseConsumers.values(),
                                );
                                // Clear pending close Consumer map.
                                this._pendingCloseConsumers.clear();
                                try {
                                    await this._handler.stopReceiving(
                                        pendingCloseConsumers.map((consumer) => consumer.localId),
                                    );
                                } catch (error) {
                                    logger.error(
                                        'closePendingConsumers() | failed to close Consumers:',
                                        error,
                                    );
                                }
                            }, 'transport.closePendingConsumers')
                            .then(() => {
                                this._consumerCloseInProgress = false;
                                // There are pending Consumer to be resumed, do it.
                                if (this._pendingCloseConsumers.size > 0) {
                                    this.closePendingConsumers();
                                }
                            })
                            // NOTE: We only get here when the await queue is closed.
                            .catch(() => {});
                    }
                    handleHandler() {
                        const handler = this._handler;
                        handler.on('@connect', ({ dtlsParameters }, callback, errback) => {
                            if (this._closed) {
                                errback(new errors_1.InvalidStateError('closed'));
                                return;
                            }
                            this.safeEmit('connect', { dtlsParameters }, callback, errback);
                        });
                        handler.on('@icegatheringstatechange', (iceGatheringState) => {
                            if (iceGatheringState === this._iceGatheringState) {
                                return;
                            }
                            logger.debug('ICE gathering state changed to %s', iceGatheringState);
                            this._iceGatheringState = iceGatheringState;
                            if (!this._closed) {
                                this.safeEmit('icegatheringstatechange', iceGatheringState);
                            }
                        });
                        handler.on('@connectionstatechange', (connectionState) => {
                            if (connectionState === this._connectionState) {
                                return;
                            }
                            logger.debug('connection state changed to %s', connectionState);
                            this._connectionState = connectionState;
                            if (!this._closed) {
                                this.safeEmit('connectionstatechange', connectionState);
                            }
                        });
                    }
                    handleProducer(producer) {
                        producer.on('@close', () => {
                            this._producers.delete(producer.id);
                            if (this._closed) {
                                return;
                            }
                            this._awaitQueue
                                .push(
                                    async () => await this._handler.stopSending(producer.localId),
                                    'producer @close event',
                                )
                                .catch((error) => logger.warn('producer.close() failed:%o', error));
                        });
                        producer.on('@pause', (callback, errback) => {
                            this._awaitQueue
                                .push(
                                    async () => await this._handler.pauseSending(producer.localId),
                                    'producer @pause event',
                                )
                                .then(callback)
                                .catch(errback);
                        });
                        producer.on('@resume', (callback, errback) => {
                            this._awaitQueue
                                .push(
                                    async () => await this._handler.resumeSending(producer.localId),
                                    'producer @resume event',
                                )
                                .then(callback)
                                .catch(errback);
                        });
                        producer.on('@replacetrack', (track, callback, errback) => {
                            this._awaitQueue
                                .push(
                                    async () =>
                                        await this._handler.replaceTrack(producer.localId, track),
                                    'producer @replacetrack event',
                                )
                                .then(callback)
                                .catch(errback);
                        });
                        producer.on('@setmaxspatiallayer', (spatialLayer, callback, errback) => {
                            this._awaitQueue
                                .push(
                                    async () =>
                                        await this._handler.setMaxSpatialLayer(
                                            producer.localId,
                                            spatialLayer,
                                        ),
                                    'producer @setmaxspatiallayer event',
                                )
                                .then(callback)
                                .catch(errback);
                        });
                        producer.on('@setrtpencodingparameters', (params, callback, errback) => {
                            this._awaitQueue
                                .push(
                                    async () =>
                                        await this._handler.setRtpEncodingParameters(
                                            producer.localId,
                                            params,
                                        ),
                                    'producer @setrtpencodingparameters event',
                                )
                                .then(callback)
                                .catch(errback);
                        });
                        producer.on('@getstats', (callback, errback) => {
                            if (this._closed) {
                                return errback(new errors_1.InvalidStateError('closed'));
                            }
                            this._handler
                                .getSenderStats(producer.localId)
                                .then(callback)
                                .catch(errback);
                        });
                    }
                    handleConsumer(consumer) {
                        consumer.on('@close', () => {
                            this._consumers.delete(consumer.id);
                            this._pendingPauseConsumers.delete(consumer.id);
                            this._pendingResumeConsumers.delete(consumer.id);
                            if (this._closed) {
                                return;
                            }
                            // Store the Consumer into the close list.
                            this._pendingCloseConsumers.set(consumer.id, consumer);
                            // There is no Consumer close in progress, do it now.
                            if (this._consumerCloseInProgress === false) {
                                this.closePendingConsumers();
                            }
                        });
                        consumer.on('@pause', () => {
                            // If Consumer is pending to be resumed, remove from pending resume list.
                            if (this._pendingResumeConsumers.has(consumer.id)) {
                                this._pendingResumeConsumers.delete(consumer.id);
                            }
                            // Store the Consumer into the pending list.
                            this._pendingPauseConsumers.set(consumer.id, consumer);
                            // There is no Consumer pause in progress, do it now.
                            (0, queue_microtask_1.default)(() => {
                                if (this._closed) {
                                    return;
                                }
                                if (this._consumerPauseInProgress === false) {
                                    this.pausePendingConsumers();
                                }
                            });
                        });
                        consumer.on('@resume', () => {
                            // If Consumer is pending to be paused, remove from pending pause list.
                            if (this._pendingPauseConsumers.has(consumer.id)) {
                                this._pendingPauseConsumers.delete(consumer.id);
                            }
                            // Store the Consumer into the pending list.
                            this._pendingResumeConsumers.set(consumer.id, consumer);
                            // There is no Consumer resume in progress, do it now.
                            (0, queue_microtask_1.default)(() => {
                                if (this._closed) {
                                    return;
                                }
                                if (this._consumerResumeInProgress === false) {
                                    this.resumePendingConsumers();
                                }
                            });
                        });
                        consumer.on('@getstats', (callback, errback) => {
                            if (this._closed) {
                                return errback(new errors_1.InvalidStateError('closed'));
                            }
                            this._handler
                                .getReceiverStats(consumer.localId)
                                .then(callback)
                                .catch(errback);
                        });
                    }
                    handleDataProducer(dataProducer) {
                        dataProducer.on('@close', () => {
                            this._dataProducers.delete(dataProducer.id);
                        });
                    }
                    handleDataConsumer(dataConsumer) {
                        dataConsumer.on('@close', () => {
                            this._dataConsumers.delete(dataConsumer.id);
                        });
                    }
                }
                exports.Transport = Transport;
            },
            {
                './Consumer': 34,
                './DataConsumer': 35,
                './DataProducer': 36,
                './EnhancedEventEmitter': 38,
                './Logger': 39,
                './Producer': 40,
                './errors': 44,
                './ortc': 65,
                './utils': 68,
                awaitqueue: 4,
                'queue-microtask': 71,
            },
        ],
        44: [
            function (require, module, exports) {
                'use strict';
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.InvalidStateError = exports.UnsupportedError = void 0;
                /**
                 * Error indicating not support for something.
                 */
                class UnsupportedError extends Error {
                    constructor(message) {
                        super(message);
                        this.name = 'UnsupportedError';
                        if (Error.hasOwnProperty('captureStackTrace')) {
                            // Just in V8.
                            // @ts-ignore
                            Error.captureStackTrace(this, UnsupportedError);
                        } else {
                            this.stack = new Error(message).stack;
                        }
                    }
                }
                exports.UnsupportedError = UnsupportedError;
                /**
                 * Error produced when calling a method in an invalid state.
                 */
                class InvalidStateError extends Error {
                    constructor(message) {
                        super(message);
                        this.name = 'InvalidStateError';
                        if (Error.hasOwnProperty('captureStackTrace')) {
                            // Just in V8.
                            // @ts-ignore
                            Error.captureStackTrace(this, InvalidStateError);
                        } else {
                            this.stack = new Error(message).stack;
                        }
                    }
                }
                exports.InvalidStateError = InvalidStateError;
            },
            {},
        ],
        45: [
            function (require, module, exports) {
                'use strict';
                var __createBinding =
                    (this && this.__createBinding) ||
                    (Object.create
                        ? function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              var desc = Object.getOwnPropertyDescriptor(m, k);
                              if (
                                  !desc ||
                                  ('get' in desc
                                      ? !m.__esModule
                                      : desc.writable || desc.configurable)
                              ) {
                                  desc = {
                                      enumerable: true,
                                      get: function () {
                                          return m[k];
                                      },
                                  };
                              }
                              Object.defineProperty(o, k2, desc);
                          }
                        : function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              o[k2] = m[k];
                          });
                var __setModuleDefault =
                    (this && this.__setModuleDefault) ||
                    (Object.create
                        ? function (o, v) {
                              Object.defineProperty(o, 'default', { enumerable: true, value: v });
                          }
                        : function (o, v) {
                              o['default'] = v;
                          });
                var __importStar =
                    (this && this.__importStar) ||
                    function (mod) {
                        if (mod && mod.__esModule) return mod;
                        var result = {};
                        if (mod != null)
                            for (var k in mod)
                                if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
                                    __createBinding(result, mod, k);
                        __setModuleDefault(result, mod);
                        return result;
                    };
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.Chrome111 = void 0;
                const sdpTransform = __importStar(require('sdp-transform'));
                const Logger_1 = require('../Logger');
                const utils = __importStar(require('../utils'));
                const ortc = __importStar(require('../ortc'));
                const sdpCommonUtils = __importStar(require('./sdp/commonUtils'));
                const sdpUnifiedPlanUtils = __importStar(require('./sdp/unifiedPlanUtils'));
                const ortcUtils = __importStar(require('./ortc/utils'));
                const errors_1 = require('../errors');
                const HandlerInterface_1 = require('./HandlerInterface');
                const RemoteSdp_1 = require('./sdp/RemoteSdp');
                const scalabilityModes_1 = require('../scalabilityModes');
                const logger = new Logger_1.Logger('Chrome111');
                const SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };
                class Chrome111 extends HandlerInterface_1.HandlerInterface {
                    /**
                     * Creates a factory function.
                     */
                    static createFactory() {
                        return () => new Chrome111();
                    }
                    constructor() {
                        super();
                        // Closed flag.
                        this._closed = false;
                        // Map of RTCTransceivers indexed by MID.
                        this._mapMidTransceiver = new Map();
                        // Local stream for sending.
                        this._sendStream = new MediaStream();
                        // Whether a DataChannel m=application section has been created.
                        this._hasDataChannelMediaSection = false;
                        // Sending DataChannel id value counter. Incremented for each new DataChannel.
                        this._nextSendSctpStreamId = 0;
                        // Got transport local and remote parameters.
                        this._transportReady = false;
                    }
                    get name() {
                        return 'Chrome111';
                    }
                    close() {
                        logger.debug('close()');
                        if (this._closed) {
                            return;
                        }
                        this._closed = true;
                        // Close RTCPeerConnection.
                        if (this._pc) {
                            try {
                                this._pc.close();
                            } catch (error) {}
                        }
                        this.emit('@close');
                    }
                    async getNativeRtpCapabilities() {
                        logger.debug('getNativeRtpCapabilities()');
                        const pc = new RTCPeerConnection({
                            iceServers: [],
                            iceTransportPolicy: 'all',
                            bundlePolicy: 'max-bundle',
                            rtcpMuxPolicy: 'require',
                            sdpSemantics: 'unified-plan',
                        });
                        try {
                            pc.addTransceiver('audio');
                            pc.addTransceiver('video');
                            const offer = await pc.createOffer();
                            try {
                                pc.close();
                            } catch (error) {}
                            const sdpObject = sdpTransform.parse(offer.sdp);
                            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({
                                sdpObject,
                            });
                            // libwebrtc supports NACK for OPUS but doesn't announce it.
                            ortcUtils.addNackSuppportForOpus(nativeRtpCapabilities);
                            return nativeRtpCapabilities;
                        } catch (error) {
                            try {
                                pc.close();
                            } catch (error2) {}
                            throw error;
                        }
                    }
                    async getNativeSctpCapabilities() {
                        logger.debug('getNativeSctpCapabilities()');
                        return {
                            numStreams: SCTP_NUM_STREAMS,
                        };
                    }
                    run({
                        direction,
                        iceParameters,
                        iceCandidates,
                        dtlsParameters,
                        sctpParameters,
                        iceServers,
                        iceTransportPolicy,
                        additionalSettings,
                        proprietaryConstraints,
                        extendedRtpCapabilities,
                    }) {
                        this.assertNotClosed();
                        logger.debug('run()');
                        this._direction = direction;
                        this._remoteSdp = new RemoteSdp_1.RemoteSdp({
                            iceParameters,
                            iceCandidates,
                            dtlsParameters,
                            sctpParameters,
                        });
                        this._sendingRtpParametersByKind = {
                            audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
                            video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities),
                        };
                        this._sendingRemoteRtpParametersByKind = {
                            audio: ortc.getSendingRemoteRtpParameters(
                                'audio',
                                extendedRtpCapabilities,
                            ),
                            video: ortc.getSendingRemoteRtpParameters(
                                'video',
                                extendedRtpCapabilities,
                            ),
                        };
                        if (dtlsParameters.role && dtlsParameters.role !== 'auto') {
                            this._forcedLocalDtlsRole =
                                dtlsParameters.role === 'server' ? 'client' : 'server';
                        }
                        this._pc = new RTCPeerConnection(
                            {
                                iceServers: iceServers || [],
                                iceTransportPolicy: iceTransportPolicy || 'all',
                                bundlePolicy: 'max-bundle',
                                rtcpMuxPolicy: 'require',
                                sdpSemantics: 'unified-plan',
                                ...additionalSettings,
                            },
                            proprietaryConstraints,
                        );
                        this._pc.addEventListener('icegatheringstatechange', () => {
                            this.emit('@icegatheringstatechange', this._pc.iceGatheringState);
                        });
                        if (this._pc.connectionState) {
                            this._pc.addEventListener('connectionstatechange', () => {
                                this.emit('@connectionstatechange', this._pc.connectionState);
                            });
                        } else {
                            logger.warn(
                                'run() | pc.connectionState not supported, using pc.iceConnectionState',
                            );
                            this._pc.addEventListener('iceconnectionstatechange', () => {
                                switch (this._pc.iceConnectionState) {
                                    case 'checking':
                                        this.emit('@connectionstatechange', 'connecting');
                                        break;
                                    case 'connected':
                                    case 'completed':
                                        this.emit('@connectionstatechange', 'connected');
                                        break;
                                    case 'failed':
                                        this.emit('@connectionstatechange', 'failed');
                                        break;
                                    case 'disconnected':
                                        this.emit('@connectionstatechange', 'disconnected');
                                        break;
                                    case 'closed':
                                        this.emit('@connectionstatechange', 'closed');
                                        break;
                                }
                            });
                        }
                    }
                    async updateIceServers(iceServers) {
                        this.assertNotClosed();
                        logger.debug('updateIceServers()');
                        const configuration = this._pc.getConfiguration();
                        configuration.iceServers = iceServers;
                        this._pc.setConfiguration(configuration);
                    }
                    async restartIce(iceParameters) {
                        this.assertNotClosed();
                        logger.debug('restartIce()');
                        // Provide the remote SDP handler with new remote ICE parameters.
                        this._remoteSdp.updateIceParameters(iceParameters);
                        if (!this._transportReady) {
                            return;
                        }
                        if (this._direction === 'send') {
                            const offer = await this._pc.createOffer({ iceRestart: true });
                            logger.debug(
                                'restartIce() | calling pc.setLocalDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setLocalDescription(offer);
                            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'restartIce() | calling pc.setRemoteDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setRemoteDescription(answer);
                        } else {
                            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'restartIce() | calling pc.setRemoteDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setRemoteDescription(offer);
                            const answer = await this._pc.createAnswer();
                            logger.debug(
                                'restartIce() | calling pc.setLocalDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setLocalDescription(answer);
                        }
                    }
                    async getTransportStats() {
                        this.assertNotClosed();
                        return this._pc.getStats();
                    }
                    async send({ track, encodings, codecOptions, codec }) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
                        if (encodings && encodings.length > 1) {
                            encodings.forEach((encoding, idx) => {
                                encoding.rid = `r${idx}`;
                            });
                            // Set rid and verify scalabilityMode in each encoding.
                            // NOTE: Even if WebRTC allows different scalabilityMode (different number
                            // of temporal layers) per simulcast stream, we need that those are the
                            // same in all them, so let's pick up the highest value.
                            // NOTE: If scalabilityMode is not given, Chrome will use L1T3.
                            let nextRid = 1;
                            let maxTemporalLayers = 1;
                            for (const encoding of encodings) {
                                const temporalLayers = encoding.scalabilityMode
                                    ? (0, scalabilityModes_1.parse)(encoding.scalabilityMode)
                                          .temporalLayers
                                    : 3;
                                if (temporalLayers > maxTemporalLayers) {
                                    maxTemporalLayers = temporalLayers;
                                }
                            }
                            for (const encoding of encodings) {
                                encoding.rid = `r${nextRid++}`;
                                encoding.scalabilityMode = `L1T${maxTemporalLayers}`;
                            }
                        }
                        const sendingRtpParameters = utils.clone(
                            this._sendingRtpParametersByKind[track.kind],
                            {},
                        );
                        // This may throw.
                        sendingRtpParameters.codecs = ortc.reduceCodecs(
                            sendingRtpParameters.codecs,
                            codec,
                        );
                        const sendingRemoteRtpParameters = utils.clone(
                            this._sendingRemoteRtpParametersByKind[track.kind],
                            {},
                        );
                        // This may throw.
                        sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(
                            sendingRemoteRtpParameters.codecs,
                            codec,
                        );
                        const mediaSectionIdx = this._remoteSdp.getNextMediaSectionIdx();
                        const transceiver = this._pc.addTransceiver(track, {
                            direction: 'sendonly',
                            streams: [this._sendStream],
                            sendEncodings: encodings,
                        });
                        const offer = await this._pc.createOffer();
                        let localSdpObject = sdpTransform.parse(offer.sdp);
                        if (!this._transportReady) {
                            await this.setupTransport({
                                localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                localSdpObject,
                            });
                        }
                        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);
                        await this._pc.setLocalDescription(offer);
                        // We can now get the transceiver.mid.
                        const localId = transceiver.mid;
                        // Set MID.
                        sendingRtpParameters.mid = localId;
                        localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
                        const offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];
                        // Set RTCP CNAME.
                        sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({
                            offerMediaObject,
                        });
                        // Set RTP encodings by parsing the SDP offer if no encodings are given.
                        if (!encodings) {
                            sendingRtpParameters.encodings = sdpUnifiedPlanUtils.getRtpEncodings({
                                offerMediaObject,
                            });
                        }
                        // Set RTP encodings by parsing the SDP offer and complete them with given
                        // one if just a single encoding has been given.
                        else if (encodings.length === 1) {
                            const newEncodings = sdpUnifiedPlanUtils.getRtpEncodings({
                                offerMediaObject,
                            });
                            Object.assign(newEncodings[0], encodings[0]);
                            sendingRtpParameters.encodings = newEncodings;
                        }
                        // Otherwise if more than 1 encoding are given use them verbatim.
                        else {
                            sendingRtpParameters.encodings = encodings;
                        }
                        this._remoteSdp.send({
                            offerMediaObject,
                            reuseMid: mediaSectionIdx.reuseMid,
                            offerRtpParameters: sendingRtpParameters,
                            answerRtpParameters: sendingRemoteRtpParameters,
                            codecOptions,
                            extmapAllowMixed: true,
                        });
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'send() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                        // Store in the map.
                        this._mapMidTransceiver.set(localId, transceiver);
                        return {
                            localId,
                            rtpParameters: sendingRtpParameters,
                            rtpSender: transceiver.sender,
                        };
                    }
                    async stopSending(localId) {
                        this.assertSendDirection();
                        logger.debug('stopSending() [localId:%s]', localId);
                        if (this._closed) {
                            return;
                        }
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        transceiver.sender.replaceTrack(null);
                        this._pc.removeTrack(transceiver.sender);
                        const mediaSectionClosed = this._remoteSdp.closeMediaSection(
                            transceiver.mid,
                        );
                        if (mediaSectionClosed) {
                            try {
                                transceiver.stop();
                            } catch (error) {}
                        }
                        const offer = await this._pc.createOffer();
                        logger.debug(
                            'stopSending() | calling pc.setLocalDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setLocalDescription(offer);
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'stopSending() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                        this._mapMidTransceiver.delete(localId);
                    }
                    async pauseSending(localId) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        logger.debug('pauseSending() [localId:%s]', localId);
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        transceiver.direction = 'inactive';
                        this._remoteSdp.pauseMediaSection(localId);
                        const offer = await this._pc.createOffer();
                        logger.debug(
                            'pauseSending() | calling pc.setLocalDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setLocalDescription(offer);
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'pauseSending() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                    }
                    async resumeSending(localId) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        logger.debug('resumeSending() [localId:%s]', localId);
                        const transceiver = this._mapMidTransceiver.get(localId);
                        this._remoteSdp.resumeSendingMediaSection(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        transceiver.direction = 'sendonly';
                        const offer = await this._pc.createOffer();
                        logger.debug(
                            'resumeSending() | calling pc.setLocalDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setLocalDescription(offer);
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'resumeSending() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                    }
                    async replaceTrack(localId, track) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        if (track) {
                            logger.debug(
                                'replaceTrack() [localId:%s, track.id:%s]',
                                localId,
                                track.id,
                            );
                        } else {
                            logger.debug('replaceTrack() [localId:%s, no track]', localId);
                        }
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        await transceiver.sender.replaceTrack(track);
                    }
                    async setMaxSpatialLayer(localId, spatialLayer) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        logger.debug(
                            'setMaxSpatialLayer() [localId:%s, spatialLayer:%s]',
                            localId,
                            spatialLayer,
                        );
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        const parameters = transceiver.sender.getParameters();
                        parameters.encodings.forEach((encoding, idx) => {
                            if (idx <= spatialLayer) {
                                encoding.active = true;
                            } else {
                                encoding.active = false;
                            }
                        });
                        await transceiver.sender.setParameters(parameters);
                        this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);
                        const offer = await this._pc.createOffer();
                        logger.debug(
                            'setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setLocalDescription(offer);
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                    }
                    async setRtpEncodingParameters(localId, params) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        logger.debug(
                            'setRtpEncodingParameters() [localId:%s, params:%o]',
                            localId,
                            params,
                        );
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        const parameters = transceiver.sender.getParameters();
                        parameters.encodings.forEach((encoding, idx) => {
                            parameters.encodings[idx] = { ...encoding, ...params };
                        });
                        await transceiver.sender.setParameters(parameters);
                        this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);
                        const offer = await this._pc.createOffer();
                        logger.debug(
                            'setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setLocalDescription(offer);
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                    }
                    async getSenderStats(localId) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        return transceiver.sender.getStats();
                    }
                    async sendDataChannel({
                        ordered,
                        maxPacketLifeTime,
                        maxRetransmits,
                        label,
                        protocol,
                    }) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        const options = {
                            negotiated: true,
                            id: this._nextSendSctpStreamId,
                            ordered,
                            maxPacketLifeTime,
                            maxRetransmits,
                            protocol,
                        };
                        logger.debug('sendDataChannel() [options:%o]', options);
                        const dataChannel = this._pc.createDataChannel(label, options);
                        // Increase next id.
                        this._nextSendSctpStreamId =
                            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;
                        // If this is the first DataChannel we need to create the SDP answer with
                        // m=application section.
                        if (!this._hasDataChannelMediaSection) {
                            const offer = await this._pc.createOffer();
                            const localSdpObject = sdpTransform.parse(offer.sdp);
                            const offerMediaObject = localSdpObject.media.find(
                                (m) => m.type === 'application',
                            );
                            if (!this._transportReady) {
                                await this.setupTransport({
                                    localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                    localSdpObject,
                                });
                            }
                            logger.debug(
                                'sendDataChannel() | calling pc.setLocalDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setLocalDescription(offer);
                            this._remoteSdp.sendSctpAssociation({ offerMediaObject });
                            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setRemoteDescription(answer);
                            this._hasDataChannelMediaSection = true;
                        }
                        const sctpStreamParameters = {
                            streamId: options.id,
                            ordered: options.ordered,
                            maxPacketLifeTime: options.maxPacketLifeTime,
                            maxRetransmits: options.maxRetransmits,
                        };
                        return { dataChannel, sctpStreamParameters };
                    }
                    async receive(optionsList) {
                        this.assertNotClosed();
                        this.assertRecvDirection();
                        const results = [];
                        const mapLocalId = new Map();
                        for (const options of optionsList) {
                            const { trackId, kind, rtpParameters, streamId } = options;
                            logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
                            const localId =
                                rtpParameters.mid || String(this._mapMidTransceiver.size);
                            mapLocalId.set(trackId, localId);
                            this._remoteSdp.receive({
                                mid: localId,
                                kind,
                                offerRtpParameters: rtpParameters,
                                streamId: streamId || rtpParameters.rtcp.cname,
                                trackId,
                            });
                        }
                        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'receive() | calling pc.setRemoteDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setRemoteDescription(offer);
                        let answer = await this._pc.createAnswer();
                        const localSdpObject = sdpTransform.parse(answer.sdp);
                        for (const options of optionsList) {
                            const { trackId, rtpParameters } = options;
                            const localId = mapLocalId.get(trackId);
                            const answerMediaObject = localSdpObject.media.find(
                                (m) => String(m.mid) === localId,
                            );
                            // May need to modify codec parameters in the answer based on codec
                            // parameters in the offer.
                            sdpCommonUtils.applyCodecParameters({
                                offerRtpParameters: rtpParameters,
                                answerMediaObject,
                            });
                        }
                        answer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };
                        if (!this._transportReady) {
                            await this.setupTransport({
                                localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                localSdpObject,
                            });
                        }
                        logger.debug(
                            'receive() | calling pc.setLocalDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setLocalDescription(answer);
                        for (const options of optionsList) {
                            const { trackId } = options;
                            const localId = mapLocalId.get(trackId);
                            const transceiver = this._pc
                                .getTransceivers()
                                .find((t) => t.mid === localId);
                            if (!transceiver) {
                                throw new Error('new RTCRtpTransceiver not found');
                            } else {
                                // Store in the map.
                                this._mapMidTransceiver.set(localId, transceiver);
                                results.push({
                                    localId,
                                    track: transceiver.receiver.track,
                                    rtpReceiver: transceiver.receiver,
                                });
                            }
                        }
                        return results;
                    }
                    async stopReceiving(localIds) {
                        this.assertRecvDirection();
                        if (this._closed) {
                            return;
                        }
                        for (const localId of localIds) {
                            logger.debug('stopReceiving() [localId:%s]', localId);
                            const transceiver = this._mapMidTransceiver.get(localId);
                            if (!transceiver) {
                                throw new Error('associated RTCRtpTransceiver not found');
                            }
                            this._remoteSdp.closeMediaSection(transceiver.mid);
                        }
                        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'stopReceiving() | calling pc.setRemoteDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setRemoteDescription(offer);
                        const answer = await this._pc.createAnswer();
                        logger.debug(
                            'stopReceiving() | calling pc.setLocalDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setLocalDescription(answer);
                        for (const localId of localIds) {
                            this._mapMidTransceiver.delete(localId);
                        }
                    }
                    async pauseReceiving(localIds) {
                        this.assertNotClosed();
                        this.assertRecvDirection();
                        for (const localId of localIds) {
                            logger.debug('pauseReceiving() [localId:%s]', localId);
                            const transceiver = this._mapMidTransceiver.get(localId);
                            if (!transceiver) {
                                throw new Error('associated RTCRtpTransceiver not found');
                            }
                            transceiver.direction = 'inactive';
                            this._remoteSdp.pauseMediaSection(localId);
                        }
                        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setRemoteDescription(offer);
                        const answer = await this._pc.createAnswer();
                        logger.debug(
                            'pauseReceiving() | calling pc.setLocalDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setLocalDescription(answer);
                    }
                    async resumeReceiving(localIds) {
                        this.assertNotClosed();
                        this.assertRecvDirection();
                        for (const localId of localIds) {
                            logger.debug('resumeReceiving() [localId:%s]', localId);
                            const transceiver = this._mapMidTransceiver.get(localId);
                            if (!transceiver) {
                                throw new Error('associated RTCRtpTransceiver not found');
                            }
                            transceiver.direction = 'recvonly';
                            this._remoteSdp.resumeReceivingMediaSection(localId);
                        }
                        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setRemoteDescription(offer);
                        const answer = await this._pc.createAnswer();
                        logger.debug(
                            'resumeReceiving() | calling pc.setLocalDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setLocalDescription(answer);
                    }
                    async getReceiverStats(localId) {
                        this.assertNotClosed();
                        this.assertRecvDirection();
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        return transceiver.receiver.getStats();
                    }
                    async receiveDataChannel({ sctpStreamParameters, label, protocol }) {
                        this.assertNotClosed();
                        this.assertRecvDirection();
                        const { streamId, ordered, maxPacketLifeTime, maxRetransmits } =
                            sctpStreamParameters;
                        const options = {
                            negotiated: true,
                            id: streamId,
                            ordered,
                            maxPacketLifeTime,
                            maxRetransmits,
                            protocol,
                        };
                        logger.debug('receiveDataChannel() [options:%o]', options);
                        const dataChannel = this._pc.createDataChannel(label, options);
                        // If this is the first DataChannel we need to create the SDP offer with
                        // m=application section.
                        if (!this._hasDataChannelMediaSection) {
                            this._remoteSdp.receiveSctpAssociation();
                            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setRemoteDescription(offer);
                            const answer = await this._pc.createAnswer();
                            if (!this._transportReady) {
                                const localSdpObject = sdpTransform.parse(answer.sdp);
                                await this.setupTransport({
                                    localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                    localSdpObject,
                                });
                            }
                            logger.debug(
                                'receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setLocalDescription(answer);
                            this._hasDataChannelMediaSection = true;
                        }
                        return { dataChannel };
                    }
                    async setupTransport({ localDtlsRole, localSdpObject }) {
                        if (!localSdpObject) {
                            localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
                        }
                        // Get our local DTLS parameters.
                        const dtlsParameters = sdpCommonUtils.extractDtlsParameters({
                            sdpObject: localSdpObject,
                        });
                        // Set our DTLS role.
                        dtlsParameters.role = localDtlsRole;
                        // Update the remote DTLS role in the SDP.
                        this._remoteSdp.updateDtlsRole(
                            localDtlsRole === 'client' ? 'server' : 'client',
                        );
                        // Need to tell the remote transport about our parameters.
                        await new Promise((resolve, reject) => {
                            this.safeEmit('@connect', { dtlsParameters }, resolve, reject);
                        });
                        this._transportReady = true;
                    }
                    assertNotClosed() {
                        if (this._closed) {
                            throw new errors_1.InvalidStateError(
                                'method called in a closed handler',
                            );
                        }
                    }
                    assertSendDirection() {
                        if (this._direction !== 'send') {
                            throw new Error(
                                'method can just be called for handlers with "send" direction',
                            );
                        }
                    }
                    assertRecvDirection() {
                        if (this._direction !== 'recv') {
                            throw new Error(
                                'method can just be called for handlers with "recv" direction',
                            );
                        }
                    }
                }
                exports.Chrome111 = Chrome111;
            },
            {
                '../Logger': 39,
                '../errors': 44,
                '../ortc': 65,
                '../scalabilityModes': 66,
                '../utils': 68,
                './HandlerInterface': 52,
                './ortc/utils': 58,
                './sdp/RemoteSdp': 60,
                './sdp/commonUtils': 61,
                './sdp/unifiedPlanUtils': 63,
                'sdp-transform': 73,
            },
        ],
        46: [
            function (require, module, exports) {
                'use strict';
                var __createBinding =
                    (this && this.__createBinding) ||
                    (Object.create
                        ? function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              var desc = Object.getOwnPropertyDescriptor(m, k);
                              if (
                                  !desc ||
                                  ('get' in desc
                                      ? !m.__esModule
                                      : desc.writable || desc.configurable)
                              ) {
                                  desc = {
                                      enumerable: true,
                                      get: function () {
                                          return m[k];
                                      },
                                  };
                              }
                              Object.defineProperty(o, k2, desc);
                          }
                        : function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              o[k2] = m[k];
                          });
                var __setModuleDefault =
                    (this && this.__setModuleDefault) ||
                    (Object.create
                        ? function (o, v) {
                              Object.defineProperty(o, 'default', { enumerable: true, value: v });
                          }
                        : function (o, v) {
                              o['default'] = v;
                          });
                var __importStar =
                    (this && this.__importStar) ||
                    function (mod) {
                        if (mod && mod.__esModule) return mod;
                        var result = {};
                        if (mod != null)
                            for (var k in mod)
                                if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
                                    __createBinding(result, mod, k);
                        __setModuleDefault(result, mod);
                        return result;
                    };
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.Chrome55 = void 0;
                const sdpTransform = __importStar(require('sdp-transform'));
                const Logger_1 = require('../Logger');
                const errors_1 = require('../errors');
                const utils = __importStar(require('../utils'));
                const ortc = __importStar(require('../ortc'));
                const sdpCommonUtils = __importStar(require('./sdp/commonUtils'));
                const sdpPlanBUtils = __importStar(require('./sdp/planBUtils'));
                const HandlerInterface_1 = require('./HandlerInterface');
                const RemoteSdp_1 = require('./sdp/RemoteSdp');
                const logger = new Logger_1.Logger('Chrome55');
                const SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };
                class Chrome55 extends HandlerInterface_1.HandlerInterface {
                    /**
                     * Creates a factory function.
                     */
                    static createFactory() {
                        return () => new Chrome55();
                    }
                    constructor() {
                        super();
                        // Local stream for sending.
                        this._sendStream = new MediaStream();
                        // Map of sending MediaStreamTracks indexed by localId.
                        this._mapSendLocalIdTrack = new Map();
                        // Next sending localId.
                        this._nextSendLocalId = 0;
                        // Map of MID, RTP parameters and RTCRtpReceiver indexed by local id.
                        // Value is an Object with mid, rtpParameters and rtpReceiver.
                        this._mapRecvLocalIdInfo = new Map();
                        // Whether a DataChannel m=application section has been created.
                        this._hasDataChannelMediaSection = false;
                        // Sending DataChannel id value counter. Incremented for each new DataChannel.
                        this._nextSendSctpStreamId = 0;
                        // Got transport local and remote parameters.
                        this._transportReady = false;
                    }
                    get name() {
                        return 'Chrome55';
                    }
                    close() {
                        logger.debug('close()');
                        // Close RTCPeerConnection.
                        if (this._pc) {
                            try {
                                this._pc.close();
                            } catch (error) {}
                        }
                        this.emit('@close');
                    }
                    async getNativeRtpCapabilities() {
                        logger.debug('getNativeRtpCapabilities()');
                        const pc = new RTCPeerConnection({
                            iceServers: [],
                            iceTransportPolicy: 'all',
                            bundlePolicy: 'max-bundle',
                            rtcpMuxPolicy: 'require',
                            sdpSemantics: 'plan-b',
                        });
                        try {
                            const offer = await pc.createOffer({
                                offerToReceiveAudio: true,
                                offerToReceiveVideo: true,
                            });
                            try {
                                pc.close();
                            } catch (error) {}
                            const sdpObject = sdpTransform.parse(offer.sdp);
                            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({
                                sdpObject,
                            });
                            return nativeRtpCapabilities;
                        } catch (error) {
                            try {
                                pc.close();
                            } catch (error2) {}
                            throw error;
                        }
                    }
                    async getNativeSctpCapabilities() {
                        logger.debug('getNativeSctpCapabilities()');
                        return {
                            numStreams: SCTP_NUM_STREAMS,
                        };
                    }
                    run({
                        direction,
                        iceParameters,
                        iceCandidates,
                        dtlsParameters,
                        sctpParameters,
                        iceServers,
                        iceTransportPolicy,
                        additionalSettings,
                        proprietaryConstraints,
                        extendedRtpCapabilities,
                    }) {
                        logger.debug('run()');
                        this._direction = direction;
                        this._remoteSdp = new RemoteSdp_1.RemoteSdp({
                            iceParameters,
                            iceCandidates,
                            dtlsParameters,
                            sctpParameters,
                            planB: true,
                        });
                        this._sendingRtpParametersByKind = {
                            audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
                            video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities),
                        };
                        this._sendingRemoteRtpParametersByKind = {
                            audio: ortc.getSendingRemoteRtpParameters(
                                'audio',
                                extendedRtpCapabilities,
                            ),
                            video: ortc.getSendingRemoteRtpParameters(
                                'video',
                                extendedRtpCapabilities,
                            ),
                        };
                        if (dtlsParameters.role && dtlsParameters.role !== 'auto') {
                            this._forcedLocalDtlsRole =
                                dtlsParameters.role === 'server' ? 'client' : 'server';
                        }
                        this._pc = new RTCPeerConnection(
                            {
                                iceServers: iceServers || [],
                                iceTransportPolicy: iceTransportPolicy || 'all',
                                bundlePolicy: 'max-bundle',
                                rtcpMuxPolicy: 'require',
                                sdpSemantics: 'plan-b',
                                ...additionalSettings,
                            },
                            proprietaryConstraints,
                        );
                        this._pc.addEventListener('icegatheringstatechange', () => {
                            this.emit('@icegatheringstatechange', this._pc.iceGatheringState);
                        });
                        if (this._pc.connectionState) {
                            this._pc.addEventListener('connectionstatechange', () => {
                                this.emit('@connectionstatechange', this._pc.connectionState);
                            });
                        } else {
                            this._pc.addEventListener('iceconnectionstatechange', () => {
                                logger.warn(
                                    'run() | pc.connectionState not supported, using pc.iceConnectionState',
                                );
                                switch (this._pc.iceConnectionState) {
                                    case 'checking':
                                        this.emit('@connectionstatechange', 'connecting');
                                        break;
                                    case 'connected':
                                    case 'completed':
                                        this.emit('@connectionstatechange', 'connected');
                                        break;
                                    case 'failed':
                                        this.emit('@connectionstatechange', 'failed');
                                        break;
                                    case 'disconnected':
                                        this.emit('@connectionstatechange', 'disconnected');
                                        break;
                                    case 'closed':
                                        this.emit('@connectionstatechange', 'closed');
                                        break;
                                }
                            });
                        }
                    }
                    async updateIceServers(iceServers) {
                        logger.debug('updateIceServers()');
                        const configuration = this._pc.getConfiguration();
                        configuration.iceServers = iceServers;
                        this._pc.setConfiguration(configuration);
                    }
                    async restartIce(iceParameters) {
                        logger.debug('restartIce()');
                        // Provide the remote SDP handler with new remote ICE parameters.
                        this._remoteSdp.updateIceParameters(iceParameters);
                        if (!this._transportReady) {
                            return;
                        }
                        if (this._direction === 'send') {
                            const offer = await this._pc.createOffer({ iceRestart: true });
                            logger.debug(
                                'restartIce() | calling pc.setLocalDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setLocalDescription(offer);
                            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'restartIce() | calling pc.setRemoteDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setRemoteDescription(answer);
                        } else {
                            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'restartIce() | calling pc.setRemoteDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setRemoteDescription(offer);
                            const answer = await this._pc.createAnswer();
                            logger.debug(
                                'restartIce() | calling pc.setLocalDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setLocalDescription(answer);
                        }
                    }
                    async getTransportStats() {
                        return this._pc.getStats();
                    }
                    async send({ track, encodings, codecOptions, codec }) {
                        this.assertSendDirection();
                        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
                        if (codec) {
                            logger.warn(
                                'send() | codec selection is not available in %s handler',
                                this.name,
                            );
                        }
                        this._sendStream.addTrack(track);
                        this._pc.addStream(this._sendStream);
                        let offer = await this._pc.createOffer();
                        let localSdpObject = sdpTransform.parse(offer.sdp);
                        let offerMediaObject;
                        const sendingRtpParameters = utils.clone(
                            this._sendingRtpParametersByKind[track.kind],
                            {},
                        );
                        sendingRtpParameters.codecs = ortc.reduceCodecs(
                            sendingRtpParameters.codecs,
                        );
                        const sendingRemoteRtpParameters = utils.clone(
                            this._sendingRemoteRtpParametersByKind[track.kind],
                            {},
                        );
                        sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(
                            sendingRemoteRtpParameters.codecs,
                        );
                        if (!this._transportReady) {
                            await this.setupTransport({
                                localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                localSdpObject,
                            });
                        }
                        if (track.kind === 'video' && encodings && encodings.length > 1) {
                            logger.debug('send() | enabling simulcast');
                            localSdpObject = sdpTransform.parse(offer.sdp);
                            offerMediaObject = localSdpObject.media.find((m) => m.type === 'video');
                            sdpPlanBUtils.addLegacySimulcast({
                                offerMediaObject,
                                track,
                                numStreams: encodings.length,
                            });
                            offer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };
                        }
                        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);
                        await this._pc.setLocalDescription(offer);
                        localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
                        offerMediaObject = localSdpObject.media.find((m) => m.type === track.kind);
                        // Set RTCP CNAME.
                        sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({
                            offerMediaObject,
                        });
                        // Set RTP encodings.
                        sendingRtpParameters.encodings = sdpPlanBUtils.getRtpEncodings({
                            offerMediaObject,
                            track,
                        });
                        // Complete encodings with given values.
                        if (encodings) {
                            for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {
                                if (encodings[idx]) {
                                    Object.assign(
                                        sendingRtpParameters.encodings[idx],
                                        encodings[idx],
                                    );
                                }
                            }
                        }
                        // If VP8 and there is effective simulcast, add scalabilityMode to each
                        // encoding.
                        if (
                            sendingRtpParameters.encodings.length > 1 &&
                            sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8'
                        ) {
                            for (const encoding of sendingRtpParameters.encodings) {
                                encoding.scalabilityMode = 'L1T3';
                            }
                        }
                        this._remoteSdp.send({
                            offerMediaObject,
                            offerRtpParameters: sendingRtpParameters,
                            answerRtpParameters: sendingRemoteRtpParameters,
                            codecOptions,
                        });
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'send() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                        const localId = String(this._nextSendLocalId);
                        this._nextSendLocalId++;
                        // Insert into the map.
                        this._mapSendLocalIdTrack.set(localId, track);
                        return {
                            localId: localId,
                            rtpParameters: sendingRtpParameters,
                        };
                    }
                    async stopSending(localId) {
                        this.assertSendDirection();
                        logger.debug('stopSending() [localId:%s]', localId);
                        const track = this._mapSendLocalIdTrack.get(localId);
                        if (!track) {
                            throw new Error('track not found');
                        }
                        this._mapSendLocalIdTrack.delete(localId);
                        this._sendStream.removeTrack(track);
                        this._pc.addStream(this._sendStream);
                        const offer = await this._pc.createOffer();
                        logger.debug(
                            'stopSending() | calling pc.setLocalDescription() [offer:%o]',
                            offer,
                        );
                        try {
                            await this._pc.setLocalDescription(offer);
                        } catch (error) {
                            // NOTE: If there are no sending tracks, setLocalDescription() will fail with
                            // "Failed to create channels". If so, ignore it.
                            if (this._sendStream.getTracks().length === 0) {
                                logger.warn(
                                    'stopSending() | ignoring expected error due no sending tracks: %s',
                                    error.toString(),
                                );
                                return;
                            }
                            throw error;
                        }
                        if (this._pc.signalingState === 'stable') {
                            return;
                        }
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'stopSending() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                    }
                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    async pauseSending(localId) {
                        // Unimplemented.
                    }
                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    async resumeSending(localId) {
                        // Unimplemented.
                    }
                    async replaceTrack(
                        // eslint-disable-next-line @typescript-eslint/no-unused-vars
                        localId,
                        track,
                    ) {
                        throw new errors_1.UnsupportedError('not implemented');
                    }
                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    async setMaxSpatialLayer(localId, spatialLayer) {
                        throw new errors_1.UnsupportedError(' not implemented');
                    }
                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    async setRtpEncodingParameters(localId, params) {
                        throw new errors_1.UnsupportedError('not supported');
                    }
                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    async getSenderStats(localId) {
                        throw new errors_1.UnsupportedError('not implemented');
                    }
                    async sendDataChannel({
                        ordered,
                        maxPacketLifeTime,
                        maxRetransmits,
                        label,
                        protocol,
                    }) {
                        this.assertSendDirection();
                        const options = {
                            negotiated: true,
                            id: this._nextSendSctpStreamId,
                            ordered,
                            maxPacketLifeTime,
                            maxRetransmitTime: maxPacketLifeTime,
                            maxRetransmits,
                            protocol,
                        };
                        logger.debug('sendDataChannel() [options:%o]', options);
                        const dataChannel = this._pc.createDataChannel(label, options);
                        // Increase next id.
                        this._nextSendSctpStreamId =
                            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;
                        // If this is the first DataChannel we need to create the SDP answer with
                        // m=application section.
                        if (!this._hasDataChannelMediaSection) {
                            const offer = await this._pc.createOffer();
                            const localSdpObject = sdpTransform.parse(offer.sdp);
                            const offerMediaObject = localSdpObject.media.find(
                                (m) => m.type === 'application',
                            );
                            if (!this._transportReady) {
                                await this.setupTransport({
                                    localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                    localSdpObject,
                                });
                            }
                            logger.debug(
                                'sendDataChannel() | calling pc.setLocalDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setLocalDescription(offer);
                            this._remoteSdp.sendSctpAssociation({ offerMediaObject });
                            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setRemoteDescription(answer);
                            this._hasDataChannelMediaSection = true;
                        }
                        const sctpStreamParameters = {
                            streamId: options.id,
                            ordered: options.ordered,
                            maxPacketLifeTime: options.maxPacketLifeTime,
                            maxRetransmits: options.maxRetransmits,
                        };
                        return { dataChannel, sctpStreamParameters };
                    }
                    async receive(optionsList) {
                        this.assertRecvDirection();
                        const results = [];
                        for (const options of optionsList) {
                            const { trackId, kind, rtpParameters, streamId } = options;
                            logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
                            const mid = kind;
                            this._remoteSdp.receive({
                                mid,
                                kind,
                                offerRtpParameters: rtpParameters,
                                streamId: streamId || rtpParameters.rtcp.cname,
                                trackId,
                            });
                        }
                        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'receive() | calling pc.setRemoteDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setRemoteDescription(offer);
                        let answer = await this._pc.createAnswer();
                        const localSdpObject = sdpTransform.parse(answer.sdp);
                        for (const options of optionsList) {
                            const { kind, rtpParameters } = options;
                            const mid = kind;
                            const answerMediaObject = localSdpObject.media.find(
                                (m) => String(m.mid) === mid,
                            );
                            // May need to modify codec parameters in the answer based on codec
                            // parameters in the offer.
                            sdpCommonUtils.applyCodecParameters({
                                offerRtpParameters: rtpParameters,
                                answerMediaObject,
                            });
                        }
                        answer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };
                        if (!this._transportReady) {
                            await this.setupTransport({
                                localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                localSdpObject,
                            });
                        }
                        logger.debug(
                            'receive() | calling pc.setLocalDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setLocalDescription(answer);
                        for (const options of optionsList) {
                            const { kind, trackId, rtpParameters } = options;
                            const mid = kind;
                            const localId = trackId;
                            const streamId = options.streamId || rtpParameters.rtcp.cname;
                            const stream = this._pc
                                .getRemoteStreams()
                                .find((s) => s.id === streamId);
                            const track = stream.getTrackById(localId);
                            if (!track) {
                                throw new Error('remote track not found');
                            }
                            // Insert into the map.
                            this._mapRecvLocalIdInfo.set(localId, { mid, rtpParameters });
                            results.push({ localId, track });
                        }
                        return results;
                    }
                    async stopReceiving(localIds) {
                        this.assertRecvDirection();
                        for (const localId of localIds) {
                            logger.debug('stopReceiving() [localId:%s]', localId);
                            const { mid, rtpParameters } =
                                this._mapRecvLocalIdInfo.get(localId) || {};
                            // Remove from the map.
                            this._mapRecvLocalIdInfo.delete(localId);
                            this._remoteSdp.planBStopReceiving({
                                mid: mid,
                                offerRtpParameters: rtpParameters,
                            });
                        }
                        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'stopReceiving() | calling pc.setRemoteDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setRemoteDescription(offer);
                        const answer = await this._pc.createAnswer();
                        logger.debug(
                            'stopReceiving() | calling pc.setLocalDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setLocalDescription(answer);
                    }
                    async pauseReceiving(
                        // eslint-disable-next-line @typescript-eslint/no-unused-vars
                        localIds,
                    ) {
                        // Unimplemented.
                    }
                    async resumeReceiving(
                        // eslint-disable-next-line @typescript-eslint/no-unused-vars
                        localIds,
                    ) {
                        // Unimplemented.
                    }
                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    async getReceiverStats(localId) {
                        throw new errors_1.UnsupportedError('not implemented');
                    }
                    async receiveDataChannel({ sctpStreamParameters, label, protocol }) {
                        this.assertRecvDirection();
                        const { streamId, ordered, maxPacketLifeTime, maxRetransmits } =
                            sctpStreamParameters;
                        const options = {
                            negotiated: true,
                            id: streamId,
                            ordered,
                            maxPacketLifeTime,
                            maxRetransmitTime: maxPacketLifeTime,
                            maxRetransmits,
                            protocol,
                        };
                        logger.debug('receiveDataChannel() [options:%o]', options);
                        const dataChannel = this._pc.createDataChannel(label, options);
                        // If this is the first DataChannel we need to create the SDP offer with
                        // m=application section.
                        if (!this._hasDataChannelMediaSection) {
                            this._remoteSdp.receiveSctpAssociation({ oldDataChannelSpec: true });
                            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setRemoteDescription(offer);
                            const answer = await this._pc.createAnswer();
                            if (!this._transportReady) {
                                const localSdpObject = sdpTransform.parse(answer.sdp);
                                await this.setupTransport({
                                    localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                    localSdpObject,
                                });
                            }
                            logger.debug(
                                'receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setLocalDescription(answer);
                            this._hasDataChannelMediaSection = true;
                        }
                        return { dataChannel };
                    }
                    async setupTransport({ localDtlsRole, localSdpObject }) {
                        if (!localSdpObject) {
                            localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
                        }
                        // Get our local DTLS parameters.
                        const dtlsParameters = sdpCommonUtils.extractDtlsParameters({
                            sdpObject: localSdpObject,
                        });
                        // Set our DTLS role.
                        dtlsParameters.role = localDtlsRole;
                        // Update the remote DTLS role in the SDP.
                        this._remoteSdp.updateDtlsRole(
                            localDtlsRole === 'client' ? 'server' : 'client',
                        );
                        // Need to tell the remote transport about our parameters.
                        await new Promise((resolve, reject) => {
                            this.safeEmit('@connect', { dtlsParameters }, resolve, reject);
                        });
                        this._transportReady = true;
                    }
                    assertSendDirection() {
                        if (this._direction !== 'send') {
                            throw new Error(
                                'method can just be called for handlers with "send" direction',
                            );
                        }
                    }
                    assertRecvDirection() {
                        if (this._direction !== 'recv') {
                            throw new Error(
                                'method can just be called for handlers with "recv" direction',
                            );
                        }
                    }
                }
                exports.Chrome55 = Chrome55;
            },
            {
                '../Logger': 39,
                '../errors': 44,
                '../ortc': 65,
                '../utils': 68,
                './HandlerInterface': 52,
                './sdp/RemoteSdp': 60,
                './sdp/commonUtils': 61,
                './sdp/planBUtils': 62,
                'sdp-transform': 73,
            },
        ],
        47: [
            function (require, module, exports) {
                'use strict';
                var __createBinding =
                    (this && this.__createBinding) ||
                    (Object.create
                        ? function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              var desc = Object.getOwnPropertyDescriptor(m, k);
                              if (
                                  !desc ||
                                  ('get' in desc
                                      ? !m.__esModule
                                      : desc.writable || desc.configurable)
                              ) {
                                  desc = {
                                      enumerable: true,
                                      get: function () {
                                          return m[k];
                                      },
                                  };
                              }
                              Object.defineProperty(o, k2, desc);
                          }
                        : function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              o[k2] = m[k];
                          });
                var __setModuleDefault =
                    (this && this.__setModuleDefault) ||
                    (Object.create
                        ? function (o, v) {
                              Object.defineProperty(o, 'default', { enumerable: true, value: v });
                          }
                        : function (o, v) {
                              o['default'] = v;
                          });
                var __importStar =
                    (this && this.__importStar) ||
                    function (mod) {
                        if (mod && mod.__esModule) return mod;
                        var result = {};
                        if (mod != null)
                            for (var k in mod)
                                if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
                                    __createBinding(result, mod, k);
                        __setModuleDefault(result, mod);
                        return result;
                    };
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.Chrome67 = void 0;
                const sdpTransform = __importStar(require('sdp-transform'));
                const Logger_1 = require('../Logger');
                const utils = __importStar(require('../utils'));
                const ortc = __importStar(require('../ortc'));
                const sdpCommonUtils = __importStar(require('./sdp/commonUtils'));
                const sdpPlanBUtils = __importStar(require('./sdp/planBUtils'));
                const HandlerInterface_1 = require('./HandlerInterface');
                const RemoteSdp_1 = require('./sdp/RemoteSdp');
                const logger = new Logger_1.Logger('Chrome67');
                const SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };
                class Chrome67 extends HandlerInterface_1.HandlerInterface {
                    /**
                     * Creates a factory function.
                     */
                    static createFactory() {
                        return () => new Chrome67();
                    }
                    constructor() {
                        super();
                        // Local stream for sending.
                        this._sendStream = new MediaStream();
                        // Map of RTCRtpSender indexed by localId.
                        this._mapSendLocalIdRtpSender = new Map();
                        // Next sending localId.
                        this._nextSendLocalId = 0;
                        // Map of MID, RTP parameters and RTCRtpReceiver indexed by local id.
                        // Value is an Object with mid, rtpParameters and rtpReceiver.
                        this._mapRecvLocalIdInfo = new Map();
                        // Whether a DataChannel m=application section has been created.
                        this._hasDataChannelMediaSection = false;
                        // Sending DataChannel id value counter. Incremented for each new DataChannel.
                        this._nextSendSctpStreamId = 0;
                        // Got transport local and remote parameters.
                        this._transportReady = false;
                    }
                    get name() {
                        return 'Chrome67';
                    }
                    close() {
                        logger.debug('close()');
                        // Close RTCPeerConnection.
                        if (this._pc) {
                            try {
                                this._pc.close();
                            } catch (error) {}
                        }
                        this.emit('@close');
                    }
                    async getNativeRtpCapabilities() {
                        logger.debug('getNativeRtpCapabilities()');
                        const pc = new RTCPeerConnection({
                            iceServers: [],
                            iceTransportPolicy: 'all',
                            bundlePolicy: 'max-bundle',
                            rtcpMuxPolicy: 'require',
                            sdpSemantics: 'plan-b',
                        });
                        try {
                            const offer = await pc.createOffer({
                                offerToReceiveAudio: true,
                                offerToReceiveVideo: true,
                            });
                            try {
                                pc.close();
                            } catch (error) {}
                            const sdpObject = sdpTransform.parse(offer.sdp);
                            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({
                                sdpObject,
                            });
                            return nativeRtpCapabilities;
                        } catch (error) {
                            try {
                                pc.close();
                            } catch (error2) {}
                            throw error;
                        }
                    }
                    async getNativeSctpCapabilities() {
                        logger.debug('getNativeSctpCapabilities()');
                        return {
                            numStreams: SCTP_NUM_STREAMS,
                        };
                    }
                    run({
                        direction,
                        iceParameters,
                        iceCandidates,
                        dtlsParameters,
                        sctpParameters,
                        iceServers,
                        iceTransportPolicy,
                        additionalSettings,
                        proprietaryConstraints,
                        extendedRtpCapabilities,
                    }) {
                        logger.debug('run()');
                        this._direction = direction;
                        this._remoteSdp = new RemoteSdp_1.RemoteSdp({
                            iceParameters,
                            iceCandidates,
                            dtlsParameters,
                            sctpParameters,
                            planB: true,
                        });
                        this._sendingRtpParametersByKind = {
                            audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
                            video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities),
                        };
                        this._sendingRemoteRtpParametersByKind = {
                            audio: ortc.getSendingRemoteRtpParameters(
                                'audio',
                                extendedRtpCapabilities,
                            ),
                            video: ortc.getSendingRemoteRtpParameters(
                                'video',
                                extendedRtpCapabilities,
                            ),
                        };
                        if (dtlsParameters.role && dtlsParameters.role !== 'auto') {
                            this._forcedLocalDtlsRole =
                                dtlsParameters.role === 'server' ? 'client' : 'server';
                        }
                        this._pc = new RTCPeerConnection(
                            {
                                iceServers: iceServers || [],
                                iceTransportPolicy: iceTransportPolicy || 'all',
                                bundlePolicy: 'max-bundle',
                                rtcpMuxPolicy: 'require',
                                sdpSemantics: 'plan-b',
                                ...additionalSettings,
                            },
                            proprietaryConstraints,
                        );
                        this._pc.addEventListener('icegatheringstatechange', () => {
                            this.emit('@icegatheringstatechange', this._pc.iceGatheringState);
                        });
                        if (this._pc.connectionState) {
                            this._pc.addEventListener('connectionstatechange', () => {
                                this.emit('@connectionstatechange', this._pc.connectionState);
                            });
                        } else {
                            this._pc.addEventListener('iceconnectionstatechange', () => {
                                logger.warn(
                                    'run() | pc.connectionState not supported, using pc.iceConnectionState',
                                );
                                switch (this._pc.iceConnectionState) {
                                    case 'checking':
                                        this.emit('@connectionstatechange', 'connecting');
                                        break;
                                    case 'connected':
                                    case 'completed':
                                        this.emit('@connectionstatechange', 'connected');
                                        break;
                                    case 'failed':
                                        this.emit('@connectionstatechange', 'failed');
                                        break;
                                    case 'disconnected':
                                        this.emit('@connectionstatechange', 'disconnected');
                                        break;
                                    case 'closed':
                                        this.emit('@connectionstatechange', 'closed');
                                        break;
                                }
                            });
                        }
                    }
                    async updateIceServers(iceServers) {
                        logger.debug('updateIceServers()');
                        const configuration = this._pc.getConfiguration();
                        configuration.iceServers = iceServers;
                        this._pc.setConfiguration(configuration);
                    }
                    async restartIce(iceParameters) {
                        logger.debug('restartIce()');
                        // Provide the remote SDP handler with new remote ICE parameters.
                        this._remoteSdp.updateIceParameters(iceParameters);
                        if (!this._transportReady) {
                            return;
                        }
                        if (this._direction === 'send') {
                            const offer = await this._pc.createOffer({ iceRestart: true });
                            logger.debug(
                                'restartIce() | calling pc.setLocalDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setLocalDescription(offer);
                            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'restartIce() | calling pc.setRemoteDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setRemoteDescription(answer);
                        } else {
                            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'restartIce() | calling pc.setRemoteDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setRemoteDescription(offer);
                            const answer = await this._pc.createAnswer();
                            logger.debug(
                                'restartIce() | calling pc.setLocalDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setLocalDescription(answer);
                        }
                    }
                    async getTransportStats() {
                        return this._pc.getStats();
                    }
                    async send({ track, encodings, codecOptions, codec }) {
                        this.assertSendDirection();
                        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
                        if (codec) {
                            logger.warn(
                                'send() | codec selection is not available in %s handler',
                                this.name,
                            );
                        }
                        this._sendStream.addTrack(track);
                        this._pc.addTrack(track, this._sendStream);
                        let offer = await this._pc.createOffer();
                        let localSdpObject = sdpTransform.parse(offer.sdp);
                        let offerMediaObject;
                        const sendingRtpParameters = utils.clone(
                            this._sendingRtpParametersByKind[track.kind],
                            {},
                        );
                        sendingRtpParameters.codecs = ortc.reduceCodecs(
                            sendingRtpParameters.codecs,
                        );
                        const sendingRemoteRtpParameters = utils.clone(
                            this._sendingRemoteRtpParametersByKind[track.kind],
                            {},
                        );
                        sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(
                            sendingRemoteRtpParameters.codecs,
                        );
                        if (!this._transportReady) {
                            await this.setupTransport({
                                localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                localSdpObject,
                            });
                        }
                        if (track.kind === 'video' && encodings && encodings.length > 1) {
                            logger.debug('send() | enabling simulcast');
                            localSdpObject = sdpTransform.parse(offer.sdp);
                            offerMediaObject = localSdpObject.media.find((m) => m.type === 'video');
                            sdpPlanBUtils.addLegacySimulcast({
                                offerMediaObject,
                                track,
                                numStreams: encodings.length,
                            });
                            offer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };
                        }
                        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);
                        await this._pc.setLocalDescription(offer);
                        localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
                        offerMediaObject = localSdpObject.media.find((m) => m.type === track.kind);
                        // Set RTCP CNAME.
                        sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({
                            offerMediaObject,
                        });
                        // Set RTP encodings.
                        sendingRtpParameters.encodings = sdpPlanBUtils.getRtpEncodings({
                            offerMediaObject,
                            track,
                        });
                        // Complete encodings with given values.
                        if (encodings) {
                            for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {
                                if (encodings[idx]) {
                                    Object.assign(
                                        sendingRtpParameters.encodings[idx],
                                        encodings[idx],
                                    );
                                }
                            }
                        }
                        // If VP8 and there is effective simulcast, add scalabilityMode to each
                        // encoding.
                        if (
                            sendingRtpParameters.encodings.length > 1 &&
                            sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8'
                        ) {
                            for (const encoding of sendingRtpParameters.encodings) {
                                encoding.scalabilityMode = 'L1T3';
                            }
                        }
                        this._remoteSdp.send({
                            offerMediaObject,
                            offerRtpParameters: sendingRtpParameters,
                            answerRtpParameters: sendingRemoteRtpParameters,
                            codecOptions,
                        });
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'send() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                        const localId = String(this._nextSendLocalId);
                        this._nextSendLocalId++;
                        const rtpSender = this._pc.getSenders().find((s) => s.track === track);
                        // Insert into the map.
                        this._mapSendLocalIdRtpSender.set(localId, rtpSender);
                        return {
                            localId: localId,
                            rtpParameters: sendingRtpParameters,
                            rtpSender,
                        };
                    }
                    async stopSending(localId) {
                        this.assertSendDirection();
                        logger.debug('stopSending() [localId:%s]', localId);
                        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
                        if (!rtpSender) {
                            throw new Error('associated RTCRtpSender not found');
                        }
                        this._pc.removeTrack(rtpSender);
                        if (rtpSender.track) {
                            this._sendStream.removeTrack(rtpSender.track);
                        }
                        this._mapSendLocalIdRtpSender.delete(localId);
                        const offer = await this._pc.createOffer();
                        logger.debug(
                            'stopSending() | calling pc.setLocalDescription() [offer:%o]',
                            offer,
                        );
                        try {
                            await this._pc.setLocalDescription(offer);
                        } catch (error) {
                            // NOTE: If there are no sending tracks, setLocalDescription() will fail with
                            // "Failed to create channels". If so, ignore it.
                            if (this._sendStream.getTracks().length === 0) {
                                logger.warn(
                                    'stopSending() | ignoring expected error due no sending tracks: %s',
                                    error.toString(),
                                );
                                return;
                            }
                            throw error;
                        }
                        if (this._pc.signalingState === 'stable') {
                            return;
                        }
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'stopSending() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                    }
                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    async pauseSending(localId) {
                        // Unimplemented.
                    }
                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    async resumeSending(localId) {
                        // Unimplemented.
                    }
                    async replaceTrack(localId, track) {
                        this.assertSendDirection();
                        if (track) {
                            logger.debug(
                                'replaceTrack() [localId:%s, track.id:%s]',
                                localId,
                                track.id,
                            );
                        } else {
                            logger.debug('replaceTrack() [localId:%s, no track]', localId);
                        }
                        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
                        if (!rtpSender) {
                            throw new Error('associated RTCRtpSender not found');
                        }
                        const oldTrack = rtpSender.track;
                        await rtpSender.replaceTrack(track);
                        // Remove the old track from the local stream.
                        if (oldTrack) {
                            this._sendStream.removeTrack(oldTrack);
                        }
                        // Add the new track to the local stream.
                        if (track) {
                            this._sendStream.addTrack(track);
                        }
                    }
                    async setMaxSpatialLayer(localId, spatialLayer) {
                        this.assertSendDirection();
                        logger.debug(
                            'setMaxSpatialLayer() [localId:%s, spatialLayer:%s]',
                            localId,
                            spatialLayer,
                        );
                        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
                        if (!rtpSender) {
                            throw new Error('associated RTCRtpSender not found');
                        }
                        const parameters = rtpSender.getParameters();
                        parameters.encodings.forEach((encoding, idx) => {
                            if (idx <= spatialLayer) {
                                encoding.active = true;
                            } else {
                                encoding.active = false;
                            }
                        });
                        await rtpSender.setParameters(parameters);
                    }
                    async setRtpEncodingParameters(localId, params) {
                        this.assertSendDirection();
                        logger.debug(
                            'setRtpEncodingParameters() [localId:%s, params:%o]',
                            localId,
                            params,
                        );
                        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
                        if (!rtpSender) {
                            throw new Error('associated RTCRtpSender not found');
                        }
                        const parameters = rtpSender.getParameters();
                        parameters.encodings.forEach((encoding, idx) => {
                            parameters.encodings[idx] = { ...encoding, ...params };
                        });
                        await rtpSender.setParameters(parameters);
                    }
                    async getSenderStats(localId) {
                        this.assertSendDirection();
                        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
                        if (!rtpSender) {
                            throw new Error('associated RTCRtpSender not found');
                        }
                        return rtpSender.getStats();
                    }
                    async sendDataChannel({
                        ordered,
                        maxPacketLifeTime,
                        maxRetransmits,
                        label,
                        protocol,
                    }) {
                        this.assertSendDirection();
                        const options = {
                            negotiated: true,
                            id: this._nextSendSctpStreamId,
                            ordered,
                            maxPacketLifeTime,
                            maxRetransmitTime: maxPacketLifeTime,
                            maxRetransmits,
                            protocol,
                        };
                        logger.debug('sendDataChannel() [options:%o]', options);
                        const dataChannel = this._pc.createDataChannel(label, options);
                        // Increase next id.
                        this._nextSendSctpStreamId =
                            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;
                        // If this is the first DataChannel we need to create the SDP answer with
                        // m=application section.
                        if (!this._hasDataChannelMediaSection) {
                            const offer = await this._pc.createOffer();
                            const localSdpObject = sdpTransform.parse(offer.sdp);
                            const offerMediaObject = localSdpObject.media.find(
                                (m) => m.type === 'application',
                            );
                            if (!this._transportReady) {
                                await this.setupTransport({
                                    localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                    localSdpObject,
                                });
                            }
                            logger.debug(
                                'sendDataChannel() | calling pc.setLocalDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setLocalDescription(offer);
                            this._remoteSdp.sendSctpAssociation({ offerMediaObject });
                            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setRemoteDescription(answer);
                            this._hasDataChannelMediaSection = true;
                        }
                        const sctpStreamParameters = {
                            streamId: options.id,
                            ordered: options.ordered,
                            maxPacketLifeTime: options.maxPacketLifeTime,
                            maxRetransmits: options.maxRetransmits,
                        };
                        return { dataChannel, sctpStreamParameters };
                    }
                    async receive(optionsList) {
                        this.assertRecvDirection();
                        const results = [];
                        for (const options of optionsList) {
                            const { trackId, kind, rtpParameters, streamId } = options;
                            logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
                            const mid = kind;
                            this._remoteSdp.receive({
                                mid,
                                kind,
                                offerRtpParameters: rtpParameters,
                                streamId: streamId || rtpParameters.rtcp.cname,
                                trackId,
                            });
                        }
                        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'receive() | calling pc.setRemoteDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setRemoteDescription(offer);
                        let answer = await this._pc.createAnswer();
                        const localSdpObject = sdpTransform.parse(answer.sdp);
                        for (const options of optionsList) {
                            const { kind, rtpParameters } = options;
                            const mid = kind;
                            const answerMediaObject = localSdpObject.media.find(
                                (m) => String(m.mid) === mid,
                            );
                            // May need to modify codec parameters in the answer based on codec
                            // parameters in the offer.
                            sdpCommonUtils.applyCodecParameters({
                                offerRtpParameters: rtpParameters,
                                answerMediaObject,
                            });
                        }
                        answer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };
                        if (!this._transportReady) {
                            await this.setupTransport({
                                localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                localSdpObject,
                            });
                        }
                        logger.debug(
                            'receive() | calling pc.setLocalDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setLocalDescription(answer);
                        for (const options of optionsList) {
                            const { kind, trackId, rtpParameters } = options;
                            const localId = trackId;
                            const mid = kind;
                            const rtpReceiver = this._pc
                                .getReceivers()
                                .find((r) => r.track && r.track.id === localId);
                            if (!rtpReceiver) {
                                throw new Error('new RTCRtpReceiver not');
                            }
                            // Insert into the map.
                            this._mapRecvLocalIdInfo.set(localId, {
                                mid,
                                rtpParameters,
                                rtpReceiver,
                            });
                            results.push({
                                localId,
                                track: rtpReceiver.track,
                                rtpReceiver,
                            });
                        }
                        return results;
                    }
                    async stopReceiving(localIds) {
                        this.assertRecvDirection();
                        for (const localId of localIds) {
                            logger.debug('stopReceiving() [localId:%s]', localId);
                            const { mid, rtpParameters } =
                                this._mapRecvLocalIdInfo.get(localId) || {};
                            // Remove from the map.
                            this._mapRecvLocalIdInfo.delete(localId);
                            this._remoteSdp.planBStopReceiving({
                                mid: mid,
                                offerRtpParameters: rtpParameters,
                            });
                        }
                        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'stopReceiving() | calling pc.setRemoteDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setRemoteDescription(offer);
                        const answer = await this._pc.createAnswer();
                        logger.debug(
                            'stopReceiving() | calling pc.setLocalDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setLocalDescription(answer);
                    }
                    async pauseReceiving(
                        // eslint-disable-next-line @typescript-eslint/no-unused-vars
                        localIds,
                    ) {
                        // Unimplemented.
                    }
                    async resumeReceiving(
                        // eslint-disable-next-line @typescript-eslint/no-unused-vars
                        localIds,
                    ) {
                        // Unimplemented.
                    }
                    async getReceiverStats(localId) {
                        this.assertRecvDirection();
                        const { rtpReceiver } = this._mapRecvLocalIdInfo.get(localId) || {};
                        if (!rtpReceiver) {
                            throw new Error('associated RTCRtpReceiver not found');
                        }
                        return rtpReceiver.getStats();
                    }
                    async receiveDataChannel({ sctpStreamParameters, label, protocol }) {
                        this.assertRecvDirection();
                        const { streamId, ordered, maxPacketLifeTime, maxRetransmits } =
                            sctpStreamParameters;
                        const options = {
                            negotiated: true,
                            id: streamId,
                            ordered,
                            maxPacketLifeTime,
                            maxRetransmitTime: maxPacketLifeTime,
                            maxRetransmits,
                            protocol,
                        };
                        logger.debug('receiveDataChannel() [options:%o]', options);
                        const dataChannel = this._pc.createDataChannel(label, options);
                        // If this is the first DataChannel we need to create the SDP offer with
                        // m=application section.
                        if (!this._hasDataChannelMediaSection) {
                            this._remoteSdp.receiveSctpAssociation({ oldDataChannelSpec: true });
                            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setRemoteDescription(offer);
                            const answer = await this._pc.createAnswer();
                            if (!this._transportReady) {
                                const localSdpObject = sdpTransform.parse(answer.sdp);
                                await this.setupTransport({
                                    localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                    localSdpObject,
                                });
                            }
                            logger.debug(
                                'receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setLocalDescription(answer);
                            this._hasDataChannelMediaSection = true;
                        }
                        return { dataChannel };
                    }
                    async setupTransport({ localDtlsRole, localSdpObject }) {
                        if (!localSdpObject) {
                            localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
                        }
                        // Get our local DTLS parameters.
                        const dtlsParameters = sdpCommonUtils.extractDtlsParameters({
                            sdpObject: localSdpObject,
                        });
                        // Set our DTLS role.
                        dtlsParameters.role = localDtlsRole;
                        // Update the remote DTLS role in the SDP.
                        this._remoteSdp.updateDtlsRole(
                            localDtlsRole === 'client' ? 'server' : 'client',
                        );
                        // Need to tell the remote transport about our parameters.
                        await new Promise((resolve, reject) => {
                            this.safeEmit('@connect', { dtlsParameters }, resolve, reject);
                        });
                        this._transportReady = true;
                    }
                    assertSendDirection() {
                        if (this._direction !== 'send') {
                            throw new Error(
                                'method can just be called for handlers with "send" direction',
                            );
                        }
                    }
                    assertRecvDirection() {
                        if (this._direction !== 'recv') {
                            throw new Error(
                                'method can just be called for handlers with "recv" direction',
                            );
                        }
                    }
                }
                exports.Chrome67 = Chrome67;
            },
            {
                '../Logger': 39,
                '../ortc': 65,
                '../utils': 68,
                './HandlerInterface': 52,
                './sdp/RemoteSdp': 60,
                './sdp/commonUtils': 61,
                './sdp/planBUtils': 62,
                'sdp-transform': 73,
            },
        ],
        48: [
            function (require, module, exports) {
                'use strict';
                var __createBinding =
                    (this && this.__createBinding) ||
                    (Object.create
                        ? function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              var desc = Object.getOwnPropertyDescriptor(m, k);
                              if (
                                  !desc ||
                                  ('get' in desc
                                      ? !m.__esModule
                                      : desc.writable || desc.configurable)
                              ) {
                                  desc = {
                                      enumerable: true,
                                      get: function () {
                                          return m[k];
                                      },
                                  };
                              }
                              Object.defineProperty(o, k2, desc);
                          }
                        : function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              o[k2] = m[k];
                          });
                var __setModuleDefault =
                    (this && this.__setModuleDefault) ||
                    (Object.create
                        ? function (o, v) {
                              Object.defineProperty(o, 'default', { enumerable: true, value: v });
                          }
                        : function (o, v) {
                              o['default'] = v;
                          });
                var __importStar =
                    (this && this.__importStar) ||
                    function (mod) {
                        if (mod && mod.__esModule) return mod;
                        var result = {};
                        if (mod != null)
                            for (var k in mod)
                                if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
                                    __createBinding(result, mod, k);
                        __setModuleDefault(result, mod);
                        return result;
                    };
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.Chrome70 = void 0;
                const sdpTransform = __importStar(require('sdp-transform'));
                const Logger_1 = require('../Logger');
                const utils = __importStar(require('../utils'));
                const ortc = __importStar(require('../ortc'));
                const sdpCommonUtils = __importStar(require('./sdp/commonUtils'));
                const sdpUnifiedPlanUtils = __importStar(require('./sdp/unifiedPlanUtils'));
                const HandlerInterface_1 = require('./HandlerInterface');
                const RemoteSdp_1 = require('./sdp/RemoteSdp');
                const scalabilityModes_1 = require('../scalabilityModes');
                const logger = new Logger_1.Logger('Chrome70');
                const SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };
                class Chrome70 extends HandlerInterface_1.HandlerInterface {
                    /**
                     * Creates a factory function.
                     */
                    static createFactory() {
                        return () => new Chrome70();
                    }
                    constructor() {
                        super();
                        // Map of RTCTransceivers indexed by MID.
                        this._mapMidTransceiver = new Map();
                        // Local stream for sending.
                        this._sendStream = new MediaStream();
                        // Whether a DataChannel m=application section has been created.
                        this._hasDataChannelMediaSection = false;
                        // Sending DataChannel id value counter. Incremented for each new DataChannel.
                        this._nextSendSctpStreamId = 0;
                        // Got transport local and remote parameters.
                        this._transportReady = false;
                    }
                    get name() {
                        return 'Chrome70';
                    }
                    close() {
                        logger.debug('close()');
                        // Close RTCPeerConnection.
                        if (this._pc) {
                            try {
                                this._pc.close();
                            } catch (error) {}
                        }
                        this.emit('@close');
                    }
                    async getNativeRtpCapabilities() {
                        logger.debug('getNativeRtpCapabilities()');
                        const pc = new RTCPeerConnection({
                            iceServers: [],
                            iceTransportPolicy: 'all',
                            bundlePolicy: 'max-bundle',
                            rtcpMuxPolicy: 'require',
                            sdpSemantics: 'unified-plan',
                        });
                        try {
                            pc.addTransceiver('audio');
                            pc.addTransceiver('video');
                            const offer = await pc.createOffer();
                            try {
                                pc.close();
                            } catch (error) {}
                            const sdpObject = sdpTransform.parse(offer.sdp);
                            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({
                                sdpObject,
                            });
                            return nativeRtpCapabilities;
                        } catch (error) {
                            try {
                                pc.close();
                            } catch (error2) {}
                            throw error;
                        }
                    }
                    async getNativeSctpCapabilities() {
                        logger.debug('getNativeSctpCapabilities()');
                        return {
                            numStreams: SCTP_NUM_STREAMS,
                        };
                    }
                    run({
                        direction,
                        iceParameters,
                        iceCandidates,
                        dtlsParameters,
                        sctpParameters,
                        iceServers,
                        iceTransportPolicy,
                        additionalSettings,
                        proprietaryConstraints,
                        extendedRtpCapabilities,
                    }) {
                        logger.debug('run()');
                        this._direction = direction;
                        this._remoteSdp = new RemoteSdp_1.RemoteSdp({
                            iceParameters,
                            iceCandidates,
                            dtlsParameters,
                            sctpParameters,
                        });
                        this._sendingRtpParametersByKind = {
                            audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
                            video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities),
                        };
                        this._sendingRemoteRtpParametersByKind = {
                            audio: ortc.getSendingRemoteRtpParameters(
                                'audio',
                                extendedRtpCapabilities,
                            ),
                            video: ortc.getSendingRemoteRtpParameters(
                                'video',
                                extendedRtpCapabilities,
                            ),
                        };
                        if (dtlsParameters.role && dtlsParameters.role !== 'auto') {
                            this._forcedLocalDtlsRole =
                                dtlsParameters.role === 'server' ? 'client' : 'server';
                        }
                        this._pc = new RTCPeerConnection(
                            {
                                iceServers: iceServers || [],
                                iceTransportPolicy: iceTransportPolicy || 'all',
                                bundlePolicy: 'max-bundle',
                                rtcpMuxPolicy: 'require',
                                sdpSemantics: 'unified-plan',
                                ...additionalSettings,
                            },
                            proprietaryConstraints,
                        );
                        this._pc.addEventListener('icegatheringstatechange', () => {
                            this.emit('@icegatheringstatechange', this._pc.iceGatheringState);
                        });
                        if (this._pc.connectionState) {
                            this._pc.addEventListener('connectionstatechange', () => {
                                this.emit('@connectionstatechange', this._pc.connectionState);
                            });
                        } else {
                            this._pc.addEventListener('iceconnectionstatechange', () => {
                                logger.warn(
                                    'run() | pc.connectionState not supported, using pc.iceConnectionState',
                                );
                                switch (this._pc.iceConnectionState) {
                                    case 'checking':
                                        this.emit('@connectionstatechange', 'connecting');
                                        break;
                                    case 'connected':
                                    case 'completed':
                                        this.emit('@connectionstatechange', 'connected');
                                        break;
                                    case 'failed':
                                        this.emit('@connectionstatechange', 'failed');
                                        break;
                                    case 'disconnected':
                                        this.emit('@connectionstatechange', 'disconnected');
                                        break;
                                    case 'closed':
                                        this.emit('@connectionstatechange', 'closed');
                                        break;
                                }
                            });
                        }
                    }
                    async updateIceServers(iceServers) {
                        logger.debug('updateIceServers()');
                        const configuration = this._pc.getConfiguration();
                        configuration.iceServers = iceServers;
                        this._pc.setConfiguration(configuration);
                    }
                    async restartIce(iceParameters) {
                        logger.debug('restartIce()');
                        // Provide the remote SDP handler with new remote ICE parameters.
                        this._remoteSdp.updateIceParameters(iceParameters);
                        if (!this._transportReady) {
                            return;
                        }
                        if (this._direction === 'send') {
                            const offer = await this._pc.createOffer({ iceRestart: true });
                            logger.debug(
                                'restartIce() | calling pc.setLocalDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setLocalDescription(offer);
                            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'restartIce() | calling pc.setRemoteDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setRemoteDescription(answer);
                        } else {
                            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'restartIce() | calling pc.setRemoteDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setRemoteDescription(offer);
                            const answer = await this._pc.createAnswer();
                            logger.debug(
                                'restartIce() | calling pc.setLocalDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setLocalDescription(answer);
                        }
                    }
                    async getTransportStats() {
                        return this._pc.getStats();
                    }
                    async send({ track, encodings, codecOptions, codec }) {
                        this.assertSendDirection();
                        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
                        const sendingRtpParameters = utils.clone(
                            this._sendingRtpParametersByKind[track.kind],
                            {},
                        );
                        // This may throw.
                        sendingRtpParameters.codecs = ortc.reduceCodecs(
                            sendingRtpParameters.codecs,
                            codec,
                        );
                        const sendingRemoteRtpParameters = utils.clone(
                            this._sendingRemoteRtpParametersByKind[track.kind],
                            {},
                        );
                        // This may throw.
                        sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(
                            sendingRemoteRtpParameters.codecs,
                            codec,
                        );
                        const mediaSectionIdx = this._remoteSdp.getNextMediaSectionIdx();
                        const transceiver = this._pc.addTransceiver(track, {
                            direction: 'sendonly',
                            streams: [this._sendStream],
                        });
                        let offer = await this._pc.createOffer();
                        let localSdpObject = sdpTransform.parse(offer.sdp);
                        let offerMediaObject;
                        if (!this._transportReady) {
                            await this.setupTransport({
                                localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                localSdpObject,
                            });
                        }
                        if (encodings && encodings.length > 1) {
                            logger.debug('send() | enabling legacy simulcast');
                            localSdpObject = sdpTransform.parse(offer.sdp);
                            offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];
                            sdpUnifiedPlanUtils.addLegacySimulcast({
                                offerMediaObject,
                                numStreams: encodings.length,
                            });
                            offer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };
                        }
                        // Special case for VP9 with SVC.
                        let hackVp9Svc = false;
                        const layers = (0, scalabilityModes_1.parse)(
                            (encodings || [{}])[0].scalabilityMode,
                        );
                        if (
                            encodings &&
                            encodings.length === 1 &&
                            layers.spatialLayers > 1 &&
                            sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp9'
                        ) {
                            logger.debug('send() | enabling legacy simulcast for VP9 SVC');
                            hackVp9Svc = true;
                            localSdpObject = sdpTransform.parse(offer.sdp);
                            offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];
                            sdpUnifiedPlanUtils.addLegacySimulcast({
                                offerMediaObject,
                                numStreams: layers.spatialLayers,
                            });
                            offer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };
                        }
                        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);
                        await this._pc.setLocalDescription(offer);
                        // If encodings are given, apply them now.
                        if (encodings) {
                            logger.debug('send() | applying given encodings');
                            const parameters = transceiver.sender.getParameters();
                            for (let idx = 0; idx < (parameters.encodings || []).length; ++idx) {
                                const encoding = parameters.encodings[idx];
                                const desiredEncoding = encodings[idx];
                                // Should not happen but just in case.
                                if (!desiredEncoding) {
                                    break;
                                }
                                parameters.encodings[idx] = Object.assign(
                                    encoding,
                                    desiredEncoding,
                                );
                            }
                            await transceiver.sender.setParameters(parameters);
                        }
                        // We can now get the transceiver.mid.
                        const localId = transceiver.mid;
                        // Set MID.
                        sendingRtpParameters.mid = localId;
                        localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
                        offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];
                        // Set RTCP CNAME.
                        sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({
                            offerMediaObject,
                        });
                        // Set RTP encodings.
                        sendingRtpParameters.encodings = sdpUnifiedPlanUtils.getRtpEncodings({
                            offerMediaObject,
                        });
                        // Complete encodings with given values.
                        if (encodings) {
                            for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {
                                if (encodings[idx]) {
                                    Object.assign(
                                        sendingRtpParameters.encodings[idx],
                                        encodings[idx],
                                    );
                                }
                            }
                        }
                        // Hack for VP9 SVC.
                        if (hackVp9Svc) {
                            sendingRtpParameters.encodings = [sendingRtpParameters.encodings[0]];
                        }
                        // If VP8 or H264 and there is effective simulcast, add scalabilityMode to
                        // each encoding.
                        if (
                            sendingRtpParameters.encodings.length > 1 &&
                            (sendingRtpParameters.codecs[0].mimeType.toLowerCase() ===
                                'video/vp8' ||
                                sendingRtpParameters.codecs[0].mimeType.toLowerCase() ===
                                    'video/h264')
                        ) {
                            for (const encoding of sendingRtpParameters.encodings) {
                                encoding.scalabilityMode = 'L1T3';
                            }
                        }
                        this._remoteSdp.send({
                            offerMediaObject,
                            reuseMid: mediaSectionIdx.reuseMid,
                            offerRtpParameters: sendingRtpParameters,
                            answerRtpParameters: sendingRemoteRtpParameters,
                            codecOptions,
                        });
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'send() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                        // Store in the map.
                        this._mapMidTransceiver.set(localId, transceiver);
                        return {
                            localId,
                            rtpParameters: sendingRtpParameters,
                            rtpSender: transceiver.sender,
                        };
                    }
                    async stopSending(localId) {
                        this.assertSendDirection();
                        logger.debug('stopSending() [localId:%s]', localId);
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        transceiver.sender.replaceTrack(null);
                        this._pc.removeTrack(transceiver.sender);
                        const mediaSectionClosed = this._remoteSdp.closeMediaSection(
                            transceiver.mid,
                        );
                        if (mediaSectionClosed) {
                            try {
                                transceiver.stop();
                            } catch (error) {}
                        }
                        const offer = await this._pc.createOffer();
                        logger.debug(
                            'stopSending() | calling pc.setLocalDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setLocalDescription(offer);
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'stopSending() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                        this._mapMidTransceiver.delete(localId);
                    }
                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    async pauseSending(localId) {
                        // Unimplemented.
                    }
                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    async resumeSending(localId) {
                        // Unimplemented.
                    }
                    async replaceTrack(localId, track) {
                        this.assertSendDirection();
                        if (track) {
                            logger.debug(
                                'replaceTrack() [localId:%s, track.id:%s]',
                                localId,
                                track.id,
                            );
                        } else {
                            logger.debug('replaceTrack() [localId:%s, no track]', localId);
                        }
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        await transceiver.sender.replaceTrack(track);
                    }
                    async setMaxSpatialLayer(localId, spatialLayer) {
                        this.assertSendDirection();
                        logger.debug(
                            'setMaxSpatialLayer() [localId:%s, spatialLayer:%s]',
                            localId,
                            spatialLayer,
                        );
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        const parameters = transceiver.sender.getParameters();
                        parameters.encodings.forEach((encoding, idx) => {
                            if (idx <= spatialLayer) {
                                encoding.active = true;
                            } else {
                                encoding.active = false;
                            }
                        });
                        await transceiver.sender.setParameters(parameters);
                        this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);
                        const offer = await this._pc.createOffer();
                        logger.debug(
                            'setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setLocalDescription(offer);
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                    }
                    async setRtpEncodingParameters(localId, params) {
                        this.assertSendDirection();
                        logger.debug(
                            'setRtpEncodingParameters() [localId:%s, params:%o]',
                            localId,
                            params,
                        );
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        const parameters = transceiver.sender.getParameters();
                        parameters.encodings.forEach((encoding, idx) => {
                            parameters.encodings[idx] = { ...encoding, ...params };
                        });
                        await transceiver.sender.setParameters(parameters);
                        this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);
                        const offer = await this._pc.createOffer();
                        logger.debug(
                            'setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setLocalDescription(offer);
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                    }
                    async getSenderStats(localId) {
                        this.assertSendDirection();
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        return transceiver.sender.getStats();
                    }
                    async sendDataChannel({
                        ordered,
                        maxPacketLifeTime,
                        maxRetransmits,
                        label,
                        protocol,
                    }) {
                        this.assertSendDirection();
                        const options = {
                            negotiated: true,
                            id: this._nextSendSctpStreamId,
                            ordered,
                            maxPacketLifeTime,
                            maxRetransmitTime: maxPacketLifeTime,
                            maxRetransmits,
                            protocol,
                        };
                        logger.debug('sendDataChannel() [options:%o]', options);
                        const dataChannel = this._pc.createDataChannel(label, options);
                        // Increase next id.
                        this._nextSendSctpStreamId =
                            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;
                        // If this is the first DataChannel we need to create the SDP answer with
                        // m=application section.
                        if (!this._hasDataChannelMediaSection) {
                            const offer = await this._pc.createOffer();
                            const localSdpObject = sdpTransform.parse(offer.sdp);
                            const offerMediaObject = localSdpObject.media.find(
                                (m) => m.type === 'application',
                            );
                            if (!this._transportReady) {
                                await this.setupTransport({
                                    localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                    localSdpObject,
                                });
                            }
                            logger.debug(
                                'sendDataChannel() | calling pc.setLocalDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setLocalDescription(offer);
                            this._remoteSdp.sendSctpAssociation({ offerMediaObject });
                            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setRemoteDescription(answer);
                            this._hasDataChannelMediaSection = true;
                        }
                        const sctpStreamParameters = {
                            streamId: options.id,
                            ordered: options.ordered,
                            maxPacketLifeTime: options.maxPacketLifeTime,
                            maxRetransmits: options.maxRetransmits,
                        };
                        return { dataChannel, sctpStreamParameters };
                    }
                    async receive(optionsList) {
                        this.assertRecvDirection();
                        const results = [];
                        const mapLocalId = new Map();
                        for (const options of optionsList) {
                            const { trackId, kind, rtpParameters, streamId } = options;
                            logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
                            const localId =
                                rtpParameters.mid || String(this._mapMidTransceiver.size);
                            mapLocalId.set(trackId, localId);
                            this._remoteSdp.receive({
                                mid: localId,
                                kind,
                                offerRtpParameters: rtpParameters,
                                streamId: streamId || rtpParameters.rtcp.cname,
                                trackId,
                            });
                        }
                        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'receive() | calling pc.setRemoteDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setRemoteDescription(offer);
                        let answer = await this._pc.createAnswer();
                        const localSdpObject = sdpTransform.parse(answer.sdp);
                        for (const options of optionsList) {
                            const { trackId, rtpParameters } = options;
                            const localId = mapLocalId.get(trackId);
                            const answerMediaObject = localSdpObject.media.find(
                                (m) => String(m.mid) === localId,
                            );
                            // May need to modify codec parameters in the answer based on codec
                            // parameters in the offer.
                            sdpCommonUtils.applyCodecParameters({
                                offerRtpParameters: rtpParameters,
                                answerMediaObject,
                            });
                        }
                        answer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };
                        if (!this._transportReady) {
                            await this.setupTransport({
                                localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                localSdpObject,
                            });
                        }
                        logger.debug(
                            'receive() | calling pc.setLocalDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setLocalDescription(answer);
                        for (const options of optionsList) {
                            const { trackId } = options;
                            const localId = mapLocalId.get(trackId);
                            const transceiver = this._pc
                                .getTransceivers()
                                .find((t) => t.mid === localId);
                            if (!transceiver) {
                                throw new Error('new RTCRtpTransceiver not found');
                            }
                            // Store in the map.
                            this._mapMidTransceiver.set(localId, transceiver);
                            results.push({
                                localId,
                                track: transceiver.receiver.track,
                                rtpReceiver: transceiver.receiver,
                            });
                        }
                        return results;
                    }
                    async stopReceiving(localIds) {
                        this.assertRecvDirection();
                        for (const localId of localIds) {
                            logger.debug('stopReceiving() [localId:%s]', localId);
                            const transceiver = this._mapMidTransceiver.get(localId);
                            if (!transceiver) {
                                throw new Error('associated RTCRtpTransceiver not found');
                            }
                            this._remoteSdp.closeMediaSection(transceiver.mid);
                        }
                        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'stopReceiving() | calling pc.setRemoteDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setRemoteDescription(offer);
                        const answer = await this._pc.createAnswer();
                        logger.debug(
                            'stopReceiving() | calling pc.setLocalDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setLocalDescription(answer);
                        for (const localId of localIds) {
                            this._mapMidTransceiver.delete(localId);
                        }
                    }
                    async pauseReceiving(
                        // eslint-disable-next-line @typescript-eslint/no-unused-vars
                        localIds,
                    ) {
                        // Unimplemented.
                    }
                    async resumeReceiving(
                        // eslint-disable-next-line @typescript-eslint/no-unused-vars
                        localIds,
                    ) {
                        // Unimplemented.
                    }
                    async getReceiverStats(localId) {
                        this.assertRecvDirection();
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        return transceiver.receiver.getStats();
                    }
                    async receiveDataChannel({ sctpStreamParameters, label, protocol }) {
                        this.assertRecvDirection();
                        const { streamId, ordered, maxPacketLifeTime, maxRetransmits } =
                            sctpStreamParameters;
                        const options = {
                            negotiated: true,
                            id: streamId,
                            ordered,
                            maxPacketLifeTime,
                            maxRetransmitTime: maxPacketLifeTime,
                            maxRetransmits,
                            protocol,
                        };
                        logger.debug('receiveDataChannel() [options:%o]', options);
                        const dataChannel = this._pc.createDataChannel(label, options);
                        // If this is the first DataChannel we need to create the SDP offer with
                        // m=application section.
                        if (!this._hasDataChannelMediaSection) {
                            this._remoteSdp.receiveSctpAssociation();
                            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setRemoteDescription(offer);
                            const answer = await this._pc.createAnswer();
                            if (!this._transportReady) {
                                const localSdpObject = sdpTransform.parse(answer.sdp);
                                await this.setupTransport({
                                    localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                    localSdpObject,
                                });
                            }
                            logger.debug(
                                'receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setLocalDescription(answer);
                            this._hasDataChannelMediaSection = true;
                        }
                        return { dataChannel };
                    }
                    async setupTransport({ localDtlsRole, localSdpObject }) {
                        if (!localSdpObject) {
                            localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
                        }
                        // Get our local DTLS parameters.
                        const dtlsParameters = sdpCommonUtils.extractDtlsParameters({
                            sdpObject: localSdpObject,
                        });
                        // Set our DTLS role.
                        dtlsParameters.role = localDtlsRole;
                        // Update the remote DTLS role in the SDP.
                        this._remoteSdp.updateDtlsRole(
                            localDtlsRole === 'client' ? 'server' : 'client',
                        );
                        // Need to tell the remote transport about our parameters.
                        await new Promise((resolve, reject) => {
                            this.safeEmit('@connect', { dtlsParameters }, resolve, reject);
                        });
                        this._transportReady = true;
                    }
                    assertSendDirection() {
                        if (this._direction !== 'send') {
                            throw new Error(
                                'method can just be called for handlers with "send" direction',
                            );
                        }
                    }
                    assertRecvDirection() {
                        if (this._direction !== 'recv') {
                            throw new Error(
                                'method can just be called for handlers with "recv" direction',
                            );
                        }
                    }
                }
                exports.Chrome70 = Chrome70;
            },
            {
                '../Logger': 39,
                '../ortc': 65,
                '../scalabilityModes': 66,
                '../utils': 68,
                './HandlerInterface': 52,
                './sdp/RemoteSdp': 60,
                './sdp/commonUtils': 61,
                './sdp/unifiedPlanUtils': 63,
                'sdp-transform': 73,
            },
        ],
        49: [
            function (require, module, exports) {
                'use strict';
                var __createBinding =
                    (this && this.__createBinding) ||
                    (Object.create
                        ? function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              var desc = Object.getOwnPropertyDescriptor(m, k);
                              if (
                                  !desc ||
                                  ('get' in desc
                                      ? !m.__esModule
                                      : desc.writable || desc.configurable)
                              ) {
                                  desc = {
                                      enumerable: true,
                                      get: function () {
                                          return m[k];
                                      },
                                  };
                              }
                              Object.defineProperty(o, k2, desc);
                          }
                        : function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              o[k2] = m[k];
                          });
                var __setModuleDefault =
                    (this && this.__setModuleDefault) ||
                    (Object.create
                        ? function (o, v) {
                              Object.defineProperty(o, 'default', { enumerable: true, value: v });
                          }
                        : function (o, v) {
                              o['default'] = v;
                          });
                var __importStar =
                    (this && this.__importStar) ||
                    function (mod) {
                        if (mod && mod.__esModule) return mod;
                        var result = {};
                        if (mod != null)
                            for (var k in mod)
                                if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
                                    __createBinding(result, mod, k);
                        __setModuleDefault(result, mod);
                        return result;
                    };
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.Chrome74 = void 0;
                const sdpTransform = __importStar(require('sdp-transform'));
                const Logger_1 = require('../Logger');
                const utils = __importStar(require('../utils'));
                const ortc = __importStar(require('../ortc'));
                const sdpCommonUtils = __importStar(require('./sdp/commonUtils'));
                const sdpUnifiedPlanUtils = __importStar(require('./sdp/unifiedPlanUtils'));
                const ortcUtils = __importStar(require('./ortc/utils'));
                const errors_1 = require('../errors');
                const HandlerInterface_1 = require('./HandlerInterface');
                const RemoteSdp_1 = require('./sdp/RemoteSdp');
                const scalabilityModes_1 = require('../scalabilityModes');
                const logger = new Logger_1.Logger('Chrome74');
                const SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };
                class Chrome74 extends HandlerInterface_1.HandlerInterface {
                    /**
                     * Creates a factory function.
                     */
                    static createFactory() {
                        return () => new Chrome74();
                    }
                    constructor() {
                        super();
                        // Closed flag.
                        this._closed = false;
                        // Map of RTCTransceivers indexed by MID.
                        this._mapMidTransceiver = new Map();
                        // Local stream for sending.
                        this._sendStream = new MediaStream();
                        // Whether a DataChannel m=application section has been created.
                        this._hasDataChannelMediaSection = false;
                        // Sending DataChannel id value counter. Incremented for each new DataChannel.
                        this._nextSendSctpStreamId = 0;
                        // Got transport local and remote parameters.
                        this._transportReady = false;
                    }
                    get name() {
                        return 'Chrome74';
                    }
                    close() {
                        logger.debug('close()');
                        if (this._closed) {
                            return;
                        }
                        this._closed = true;
                        // Close RTCPeerConnection.
                        if (this._pc) {
                            try {
                                this._pc.close();
                            } catch (error) {}
                        }
                        this.emit('@close');
                    }
                    async getNativeRtpCapabilities() {
                        logger.debug('getNativeRtpCapabilities()');
                        const pc = new RTCPeerConnection({
                            iceServers: [],
                            iceTransportPolicy: 'all',
                            bundlePolicy: 'max-bundle',
                            rtcpMuxPolicy: 'require',
                            sdpSemantics: 'unified-plan',
                        });
                        try {
                            pc.addTransceiver('audio');
                            pc.addTransceiver('video');
                            const offer = await pc.createOffer();
                            try {
                                pc.close();
                            } catch (error) {}
                            const sdpObject = sdpTransform.parse(offer.sdp);
                            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({
                                sdpObject,
                            });
                            // libwebrtc supports NACK for OPUS but doesn't announce it.
                            ortcUtils.addNackSuppportForOpus(nativeRtpCapabilities);
                            return nativeRtpCapabilities;
                        } catch (error) {
                            try {
                                pc.close();
                            } catch (error2) {}
                            throw error;
                        }
                    }
                    async getNativeSctpCapabilities() {
                        logger.debug('getNativeSctpCapabilities()');
                        return {
                            numStreams: SCTP_NUM_STREAMS,
                        };
                    }
                    run({
                        direction,
                        iceParameters,
                        iceCandidates,
                        dtlsParameters,
                        sctpParameters,
                        iceServers,
                        iceTransportPolicy,
                        additionalSettings,
                        proprietaryConstraints,
                        extendedRtpCapabilities,
                    }) {
                        logger.debug('run()');
                        this._direction = direction;
                        this._remoteSdp = new RemoteSdp_1.RemoteSdp({
                            iceParameters,
                            iceCandidates,
                            dtlsParameters,
                            sctpParameters,
                        });
                        this._sendingRtpParametersByKind = {
                            audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
                            video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities),
                        };
                        this._sendingRemoteRtpParametersByKind = {
                            audio: ortc.getSendingRemoteRtpParameters(
                                'audio',
                                extendedRtpCapabilities,
                            ),
                            video: ortc.getSendingRemoteRtpParameters(
                                'video',
                                extendedRtpCapabilities,
                            ),
                        };
                        if (dtlsParameters.role && dtlsParameters.role !== 'auto') {
                            this._forcedLocalDtlsRole =
                                dtlsParameters.role === 'server' ? 'client' : 'server';
                        }
                        this._pc = new RTCPeerConnection(
                            {
                                iceServers: iceServers || [],
                                iceTransportPolicy: iceTransportPolicy || 'all',
                                bundlePolicy: 'max-bundle',
                                rtcpMuxPolicy: 'require',
                                sdpSemantics: 'unified-plan',
                                ...additionalSettings,
                            },
                            proprietaryConstraints,
                        );
                        this._pc.addEventListener('icegatheringstatechange', () => {
                            this.emit('@icegatheringstatechange', this._pc.iceGatheringState);
                        });
                        if (this._pc.connectionState) {
                            this._pc.addEventListener('connectionstatechange', () => {
                                this.emit('@connectionstatechange', this._pc.connectionState);
                            });
                        } else {
                            logger.warn(
                                'run() | pc.connectionState not supported, using pc.iceConnectionState',
                            );
                            this._pc.addEventListener('iceconnectionstatechange', () => {
                                switch (this._pc.iceConnectionState) {
                                    case 'checking':
                                        this.emit('@connectionstatechange', 'connecting');
                                        break;
                                    case 'connected':
                                    case 'completed':
                                        this.emit('@connectionstatechange', 'connected');
                                        break;
                                    case 'failed':
                                        this.emit('@connectionstatechange', 'failed');
                                        break;
                                    case 'disconnected':
                                        this.emit('@connectionstatechange', 'disconnected');
                                        break;
                                    case 'closed':
                                        this.emit('@connectionstatechange', 'closed');
                                        break;
                                }
                            });
                        }
                    }
                    async updateIceServers(iceServers) {
                        this.assertNotClosed();
                        logger.debug('updateIceServers()');
                        const configuration = this._pc.getConfiguration();
                        configuration.iceServers = iceServers;
                        this._pc.setConfiguration(configuration);
                    }
                    async restartIce(iceParameters) {
                        this.assertNotClosed();
                        logger.debug('restartIce()');
                        // Provide the remote SDP handler with new remote ICE parameters.
                        this._remoteSdp.updateIceParameters(iceParameters);
                        if (!this._transportReady) {
                            return;
                        }
                        if (this._direction === 'send') {
                            const offer = await this._pc.createOffer({ iceRestart: true });
                            logger.debug(
                                'restartIce() | calling pc.setLocalDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setLocalDescription(offer);
                            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'restartIce() | calling pc.setRemoteDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setRemoteDescription(answer);
                        } else {
                            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'restartIce() | calling pc.setRemoteDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setRemoteDescription(offer);
                            const answer = await this._pc.createAnswer();
                            logger.debug(
                                'restartIce() | calling pc.setLocalDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setLocalDescription(answer);
                        }
                    }
                    async getTransportStats() {
                        this.assertNotClosed();
                        return this._pc.getStats();
                    }
                    async send({ track, encodings, codecOptions, codec }) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
                        if (encodings && encodings.length > 1) {
                            encodings.forEach((encoding, idx) => {
                                encoding.rid = `r${idx}`;
                            });
                        }
                        const sendingRtpParameters = utils.clone(
                            this._sendingRtpParametersByKind[track.kind],
                            {},
                        );
                        // This may throw.
                        sendingRtpParameters.codecs = ortc.reduceCodecs(
                            sendingRtpParameters.codecs,
                            codec,
                        );
                        const sendingRemoteRtpParameters = utils.clone(
                            this._sendingRemoteRtpParametersByKind[track.kind],
                            {},
                        );
                        // This may throw.
                        sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(
                            sendingRemoteRtpParameters.codecs,
                            codec,
                        );
                        const mediaSectionIdx = this._remoteSdp.getNextMediaSectionIdx();
                        const transceiver = this._pc.addTransceiver(track, {
                            direction: 'sendonly',
                            streams: [this._sendStream],
                            sendEncodings: encodings,
                        });
                        let offer = await this._pc.createOffer();
                        let localSdpObject = sdpTransform.parse(offer.sdp);
                        let offerMediaObject;
                        if (!this._transportReady) {
                            await this.setupTransport({
                                localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                localSdpObject,
                            });
                        }
                        // Special case for VP9 with SVC.
                        let hackVp9Svc = false;
                        const layers = (0, scalabilityModes_1.parse)(
                            (encodings || [{}])[0].scalabilityMode,
                        );
                        if (
                            encodings &&
                            encodings.length === 1 &&
                            layers.spatialLayers > 1 &&
                            sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp9'
                        ) {
                            logger.debug('send() | enabling legacy simulcast for VP9 SVC');
                            hackVp9Svc = true;
                            localSdpObject = sdpTransform.parse(offer.sdp);
                            offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];
                            sdpUnifiedPlanUtils.addLegacySimulcast({
                                offerMediaObject,
                                numStreams: layers.spatialLayers,
                            });
                            offer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };
                        }
                        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);
                        await this._pc.setLocalDescription(offer);
                        // We can now get the transceiver.mid.
                        const localId = transceiver.mid;
                        // Set MID.
                        sendingRtpParameters.mid = localId;
                        localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
                        offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];
                        // Set RTCP CNAME.
                        sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({
                            offerMediaObject,
                        });
                        // Set RTP encodings by parsing the SDP offer if no encodings are given.
                        if (!encodings) {
                            sendingRtpParameters.encodings = sdpUnifiedPlanUtils.getRtpEncodings({
                                offerMediaObject,
                            });
                        }
                        // Set RTP encodings by parsing the SDP offer and complete them with given
                        // one if just a single encoding has been given.
                        else if (encodings.length === 1) {
                            let newEncodings = sdpUnifiedPlanUtils.getRtpEncodings({
                                offerMediaObject,
                            });
                            Object.assign(newEncodings[0], encodings[0]);
                            // Hack for VP9 SVC.
                            if (hackVp9Svc) {
                                newEncodings = [newEncodings[0]];
                            }
                            sendingRtpParameters.encodings = newEncodings;
                        }
                        // Otherwise if more than 1 encoding are given use them verbatim.
                        else {
                            sendingRtpParameters.encodings = encodings;
                        }
                        // If VP8 or H264 and there is effective simulcast, add scalabilityMode to
                        // each encoding.
                        if (
                            sendingRtpParameters.encodings.length > 1 &&
                            (sendingRtpParameters.codecs[0].mimeType.toLowerCase() ===
                                'video/vp8' ||
                                sendingRtpParameters.codecs[0].mimeType.toLowerCase() ===
                                    'video/h264')
                        ) {
                            for (const encoding of sendingRtpParameters.encodings) {
                                if (encoding.scalabilityMode) {
                                    encoding.scalabilityMode = `L1T${layers.temporalLayers}`;
                                } else {
                                    encoding.scalabilityMode = 'L1T3';
                                }
                            }
                        }
                        this._remoteSdp.send({
                            offerMediaObject,
                            reuseMid: mediaSectionIdx.reuseMid,
                            offerRtpParameters: sendingRtpParameters,
                            answerRtpParameters: sendingRemoteRtpParameters,
                            codecOptions,
                            extmapAllowMixed: true,
                        });
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'send() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                        // Store in the map.
                        this._mapMidTransceiver.set(localId, transceiver);
                        return {
                            localId,
                            rtpParameters: sendingRtpParameters,
                            rtpSender: transceiver.sender,
                        };
                    }
                    async stopSending(localId) {
                        this.assertSendDirection();
                        logger.debug('stopSending() [localId:%s]', localId);
                        if (this._closed) {
                            return;
                        }
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        transceiver.sender.replaceTrack(null);
                        this._pc.removeTrack(transceiver.sender);
                        const mediaSectionClosed = this._remoteSdp.closeMediaSection(
                            transceiver.mid,
                        );
                        if (mediaSectionClosed) {
                            try {
                                transceiver.stop();
                            } catch (error) {}
                        }
                        const offer = await this._pc.createOffer();
                        logger.debug(
                            'stopSending() | calling pc.setLocalDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setLocalDescription(offer);
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'stopSending() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                        this._mapMidTransceiver.delete(localId);
                    }
                    async pauseSending(localId) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        logger.debug('pauseSending() [localId:%s]', localId);
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        transceiver.direction = 'inactive';
                        this._remoteSdp.pauseMediaSection(localId);
                        const offer = await this._pc.createOffer();
                        logger.debug(
                            'pauseSending() | calling pc.setLocalDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setLocalDescription(offer);
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'pauseSending() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                    }
                    async resumeSending(localId) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        logger.debug('resumeSending() [localId:%s]', localId);
                        const transceiver = this._mapMidTransceiver.get(localId);
                        this._remoteSdp.resumeSendingMediaSection(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        transceiver.direction = 'sendonly';
                        const offer = await this._pc.createOffer();
                        logger.debug(
                            'resumeSending() | calling pc.setLocalDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setLocalDescription(offer);
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'resumeSending() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                    }
                    async replaceTrack(localId, track) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        if (track) {
                            logger.debug(
                                'replaceTrack() [localId:%s, track.id:%s]',
                                localId,
                                track.id,
                            );
                        } else {
                            logger.debug('replaceTrack() [localId:%s, no track]', localId);
                        }
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        await transceiver.sender.replaceTrack(track);
                    }
                    async setMaxSpatialLayer(localId, spatialLayer) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        logger.debug(
                            'setMaxSpatialLayer() [localId:%s, spatialLayer:%s]',
                            localId,
                            spatialLayer,
                        );
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        const parameters = transceiver.sender.getParameters();
                        parameters.encodings.forEach((encoding, idx) => {
                            if (idx <= spatialLayer) {
                                encoding.active = true;
                            } else {
                                encoding.active = false;
                            }
                        });
                        await transceiver.sender.setParameters(parameters);
                        this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);
                        const offer = await this._pc.createOffer();
                        logger.debug(
                            'setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setLocalDescription(offer);
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                    }
                    async setRtpEncodingParameters(localId, params) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        logger.debug(
                            'setRtpEncodingParameters() [localId:%s, params:%o]',
                            localId,
                            params,
                        );
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        const parameters = transceiver.sender.getParameters();
                        parameters.encodings.forEach((encoding, idx) => {
                            parameters.encodings[idx] = { ...encoding, ...params };
                        });
                        await transceiver.sender.setParameters(parameters);
                        this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);
                        const offer = await this._pc.createOffer();
                        logger.debug(
                            'setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setLocalDescription(offer);
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                    }
                    async getSenderStats(localId) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        return transceiver.sender.getStats();
                    }
                    async sendDataChannel({
                        ordered,
                        maxPacketLifeTime,
                        maxRetransmits,
                        label,
                        protocol,
                    }) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        const options = {
                            negotiated: true,
                            id: this._nextSendSctpStreamId,
                            ordered,
                            maxPacketLifeTime,
                            maxRetransmits,
                            protocol,
                        };
                        logger.debug('sendDataChannel() [options:%o]', options);
                        const dataChannel = this._pc.createDataChannel(label, options);
                        // Increase next id.
                        this._nextSendSctpStreamId =
                            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;
                        // If this is the first DataChannel we need to create the SDP answer with
                        // m=application section.
                        if (!this._hasDataChannelMediaSection) {
                            const offer = await this._pc.createOffer();
                            const localSdpObject = sdpTransform.parse(offer.sdp);
                            const offerMediaObject = localSdpObject.media.find(
                                (m) => m.type === 'application',
                            );
                            if (!this._transportReady) {
                                await this.setupTransport({
                                    localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                    localSdpObject,
                                });
                            }
                            logger.debug(
                                'sendDataChannel() | calling pc.setLocalDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setLocalDescription(offer);
                            this._remoteSdp.sendSctpAssociation({ offerMediaObject });
                            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setRemoteDescription(answer);
                            this._hasDataChannelMediaSection = true;
                        }
                        const sctpStreamParameters = {
                            streamId: options.id,
                            ordered: options.ordered,
                            maxPacketLifeTime: options.maxPacketLifeTime,
                            maxRetransmits: options.maxRetransmits,
                        };
                        return { dataChannel, sctpStreamParameters };
                    }
                    async receive(optionsList) {
                        this.assertNotClosed();
                        this.assertRecvDirection();
                        const results = [];
                        const mapLocalId = new Map();
                        for (const options of optionsList) {
                            const { trackId, kind, rtpParameters, streamId } = options;
                            logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
                            const localId =
                                rtpParameters.mid || String(this._mapMidTransceiver.size);
                            mapLocalId.set(trackId, localId);
                            this._remoteSdp.receive({
                                mid: localId,
                                kind,
                                offerRtpParameters: rtpParameters,
                                streamId: streamId || rtpParameters.rtcp.cname,
                                trackId,
                            });
                        }
                        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'receive() | calling pc.setRemoteDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setRemoteDescription(offer);
                        let answer = await this._pc.createAnswer();
                        const localSdpObject = sdpTransform.parse(answer.sdp);
                        for (const options of optionsList) {
                            const { trackId, rtpParameters } = options;
                            const localId = mapLocalId.get(trackId);
                            const answerMediaObject = localSdpObject.media.find(
                                (m) => String(m.mid) === localId,
                            );
                            // May need to modify codec parameters in the answer based on codec
                            // parameters in the offer.
                            sdpCommonUtils.applyCodecParameters({
                                offerRtpParameters: rtpParameters,
                                answerMediaObject,
                            });
                        }
                        answer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };
                        if (!this._transportReady) {
                            await this.setupTransport({
                                localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                localSdpObject,
                            });
                        }
                        logger.debug(
                            'receive() | calling pc.setLocalDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setLocalDescription(answer);
                        for (const options of optionsList) {
                            const { trackId } = options;
                            const localId = mapLocalId.get(trackId);
                            const transceiver = this._pc
                                .getTransceivers()
                                .find((t) => t.mid === localId);
                            if (!transceiver) {
                                throw new Error('new RTCRtpTransceiver not found');
                            } else {
                                // Store in the map.
                                this._mapMidTransceiver.set(localId, transceiver);
                                results.push({
                                    localId,
                                    track: transceiver.receiver.track,
                                    rtpReceiver: transceiver.receiver,
                                });
                            }
                        }
                        return results;
                    }
                    async stopReceiving(localIds) {
                        this.assertRecvDirection();
                        if (this._closed) {
                            return;
                        }
                        for (const localId of localIds) {
                            logger.debug('stopReceiving() [localId:%s]', localId);
                            const transceiver = this._mapMidTransceiver.get(localId);
                            if (!transceiver) {
                                throw new Error('associated RTCRtpTransceiver not found');
                            }
                            this._remoteSdp.closeMediaSection(transceiver.mid);
                        }
                        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'stopReceiving() | calling pc.setRemoteDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setRemoteDescription(offer);
                        const answer = await this._pc.createAnswer();
                        logger.debug(
                            'stopReceiving() | calling pc.setLocalDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setLocalDescription(answer);
                        for (const localId of localIds) {
                            this._mapMidTransceiver.delete(localId);
                        }
                    }
                    async pauseReceiving(localIds) {
                        this.assertNotClosed();
                        this.assertRecvDirection();
                        for (const localId of localIds) {
                            logger.debug('pauseReceiving() [localId:%s]', localId);
                            const transceiver = this._mapMidTransceiver.get(localId);
                            if (!transceiver) {
                                throw new Error('associated RTCRtpTransceiver not found');
                            }
                            transceiver.direction = 'inactive';
                            this._remoteSdp.pauseMediaSection(localId);
                        }
                        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setRemoteDescription(offer);
                        const answer = await this._pc.createAnswer();
                        logger.debug(
                            'pauseReceiving() | calling pc.setLocalDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setLocalDescription(answer);
                    }
                    async resumeReceiving(localIds) {
                        this.assertNotClosed();
                        this.assertRecvDirection();
                        for (const localId of localIds) {
                            logger.debug('resumeReceiving() [localId:%s]', localId);
                            const transceiver = this._mapMidTransceiver.get(localId);
                            if (!transceiver) {
                                throw new Error('associated RTCRtpTransceiver not found');
                            }
                            transceiver.direction = 'recvonly';
                            this._remoteSdp.resumeReceivingMediaSection(localId);
                        }
                        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setRemoteDescription(offer);
                        const answer = await this._pc.createAnswer();
                        logger.debug(
                            'resumeReceiving() | calling pc.setLocalDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setLocalDescription(answer);
                    }
                    async getReceiverStats(localId) {
                        this.assertNotClosed();
                        this.assertRecvDirection();
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        return transceiver.receiver.getStats();
                    }
                    async receiveDataChannel({ sctpStreamParameters, label, protocol }) {
                        this.assertNotClosed();
                        this.assertRecvDirection();
                        const { streamId, ordered, maxPacketLifeTime, maxRetransmits } =
                            sctpStreamParameters;
                        const options = {
                            negotiated: true,
                            id: streamId,
                            ordered,
                            maxPacketLifeTime,
                            maxRetransmits,
                            protocol,
                        };
                        logger.debug('receiveDataChannel() [options:%o]', options);
                        const dataChannel = this._pc.createDataChannel(label, options);
                        // If this is the first DataChannel we need to create the SDP offer with
                        // m=application section.
                        if (!this._hasDataChannelMediaSection) {
                            this._remoteSdp.receiveSctpAssociation();
                            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setRemoteDescription(offer);
                            const answer = await this._pc.createAnswer();
                            if (!this._transportReady) {
                                const localSdpObject = sdpTransform.parse(answer.sdp);
                                await this.setupTransport({
                                    localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                    localSdpObject,
                                });
                            }
                            logger.debug(
                                'receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setLocalDescription(answer);
                            this._hasDataChannelMediaSection = true;
                        }
                        return { dataChannel };
                    }
                    async setupTransport({ localDtlsRole, localSdpObject }) {
                        if (!localSdpObject) {
                            localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
                        }
                        // Get our local DTLS parameters.
                        const dtlsParameters = sdpCommonUtils.extractDtlsParameters({
                            sdpObject: localSdpObject,
                        });
                        // Set our DTLS role.
                        dtlsParameters.role = localDtlsRole;
                        // Update the remote DTLS role in the SDP.
                        this._remoteSdp.updateDtlsRole(
                            localDtlsRole === 'client' ? 'server' : 'client',
                        );
                        // Need to tell the remote transport about our parameters.
                        await new Promise((resolve, reject) => {
                            this.safeEmit('@connect', { dtlsParameters }, resolve, reject);
                        });
                        this._transportReady = true;
                    }
                    assertNotClosed() {
                        if (this._closed) {
                            throw new errors_1.InvalidStateError(
                                'method called in a closed handler',
                            );
                        }
                    }
                    assertSendDirection() {
                        if (this._direction !== 'send') {
                            throw new Error(
                                'method can just be called for handlers with "send" direction',
                            );
                        }
                    }
                    assertRecvDirection() {
                        if (this._direction !== 'recv') {
                            throw new Error(
                                'method can just be called for handlers with "recv" direction',
                            );
                        }
                    }
                }
                exports.Chrome74 = Chrome74;
            },
            {
                '../Logger': 39,
                '../errors': 44,
                '../ortc': 65,
                '../scalabilityModes': 66,
                '../utils': 68,
                './HandlerInterface': 52,
                './ortc/utils': 58,
                './sdp/RemoteSdp': 60,
                './sdp/commonUtils': 61,
                './sdp/unifiedPlanUtils': 63,
                'sdp-transform': 73,
            },
        ],
        50: [
            function (require, module, exports) {
                'use strict';
                var __createBinding =
                    (this && this.__createBinding) ||
                    (Object.create
                        ? function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              var desc = Object.getOwnPropertyDescriptor(m, k);
                              if (
                                  !desc ||
                                  ('get' in desc
                                      ? !m.__esModule
                                      : desc.writable || desc.configurable)
                              ) {
                                  desc = {
                                      enumerable: true,
                                      get: function () {
                                          return m[k];
                                      },
                                  };
                              }
                              Object.defineProperty(o, k2, desc);
                          }
                        : function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              o[k2] = m[k];
                          });
                var __setModuleDefault =
                    (this && this.__setModuleDefault) ||
                    (Object.create
                        ? function (o, v) {
                              Object.defineProperty(o, 'default', { enumerable: true, value: v });
                          }
                        : function (o, v) {
                              o['default'] = v;
                          });
                var __importStar =
                    (this && this.__importStar) ||
                    function (mod) {
                        if (mod && mod.__esModule) return mod;
                        var result = {};
                        if (mod != null)
                            for (var k in mod)
                                if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
                                    __createBinding(result, mod, k);
                        __setModuleDefault(result, mod);
                        return result;
                    };
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.Edge11 = void 0;
                const Logger_1 = require('../Logger');
                const errors_1 = require('../errors');
                const utils = __importStar(require('../utils'));
                const ortc = __importStar(require('../ortc'));
                const edgeUtils = __importStar(require('./ortc/edgeUtils'));
                const HandlerInterface_1 = require('./HandlerInterface');
                const logger = new Logger_1.Logger('Edge11');
                class Edge11 extends HandlerInterface_1.HandlerInterface {
                    /**
                     * Creates a factory function.
                     */
                    static createFactory() {
                        return () => new Edge11();
                    }
                    constructor() {
                        super();
                        // Map of RTCRtpSenders indexed by id.
                        this._rtpSenders = new Map();
                        // Map of RTCRtpReceivers indexed by id.
                        this._rtpReceivers = new Map();
                        // Next localId for sending tracks.
                        this._nextSendLocalId = 0;
                        // Got transport local and remote parameters.
                        this._transportReady = false;
                    }
                    get name() {
                        return 'Edge11';
                    }
                    close() {
                        logger.debug('close()');
                        // Close the ICE gatherer.
                        // NOTE: Not yet implemented by Edge.
                        try {
                            this._iceGatherer.close();
                        } catch (error) {}
                        // Close the ICE transport.
                        try {
                            this._iceTransport.stop();
                        } catch (error) {}
                        // Close the DTLS transport.
                        try {
                            this._dtlsTransport.stop();
                        } catch (error) {}
                        // Close RTCRtpSenders.
                        for (const rtpSender of this._rtpSenders.values()) {
                            try {
                                rtpSender.stop();
                            } catch (error) {}
                        }
                        // Close RTCRtpReceivers.
                        for (const rtpReceiver of this._rtpReceivers.values()) {
                            try {
                                rtpReceiver.stop();
                            } catch (error) {}
                        }
                        this.emit('@close');
                    }
                    async getNativeRtpCapabilities() {
                        logger.debug('getNativeRtpCapabilities()');
                        return edgeUtils.getCapabilities();
                    }
                    async getNativeSctpCapabilities() {
                        logger.debug('getNativeSctpCapabilities()');
                        return {
                            numStreams: { OS: 0, MIS: 0 },
                        };
                    }
                    run({
                        direction, // eslint-disable-line @typescript-eslint/no-unused-vars
                        iceParameters,
                        iceCandidates,
                        dtlsParameters,
                        sctpParameters, // eslint-disable-line @typescript-eslint/no-unused-vars
                        iceServers,
                        iceTransportPolicy,
                        additionalSettings, // eslint-disable-line @typescript-eslint/no-unused-vars
                        proprietaryConstraints, // eslint-disable-line @typescript-eslint/no-unused-vars
                        extendedRtpCapabilities,
                    }) {
                        logger.debug('run()');
                        this._sendingRtpParametersByKind = {
                            audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
                            video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities),
                        };
                        this._remoteIceParameters = iceParameters;
                        this._remoteIceCandidates = iceCandidates;
                        this._remoteDtlsParameters = dtlsParameters;
                        this._cname = `CNAME-${utils.generateRandomNumber()}`;
                        this.setIceGatherer({ iceServers, iceTransportPolicy });
                        this.setIceTransport();
                        this.setDtlsTransport();
                    }
                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    async updateIceServers(iceServers) {
                        // NOTE: Edge 11 does not implement iceGatherer.gater().
                        throw new errors_1.UnsupportedError('not supported');
                    }
                    async restartIce(iceParameters) {
                        logger.debug('restartIce()');
                        this._remoteIceParameters = iceParameters;
                        if (!this._transportReady) {
                            return;
                        }
                        logger.debug('restartIce() | calling iceTransport.start()');
                        this._iceTransport.start(this._iceGatherer, iceParameters, 'controlling');
                        for (const candidate of this._remoteIceCandidates) {
                            this._iceTransport.addRemoteCandidate(candidate);
                        }
                        this._iceTransport.addRemoteCandidate({});
                    }
                    async getTransportStats() {
                        return this._iceTransport.getStats();
                    }
                    async send(
                        // eslint-disable-next-line @typescript-eslint/no-unused-vars
                        { track, encodings, codecOptions, codec },
                    ) {
                        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
                        if (!this._transportReady) {
                            await this.setupTransport({ localDtlsRole: 'server' });
                        }
                        logger.debug('send() | calling new RTCRtpSender()');
                        const rtpSender = new RTCRtpSender(track, this._dtlsTransport);
                        const rtpParameters = utils.clone(
                            this._sendingRtpParametersByKind[track.kind],
                            {},
                        );
                        rtpParameters.codecs = ortc.reduceCodecs(rtpParameters.codecs, codec);
                        const useRtx = rtpParameters.codecs.some((_codec) =>
                            /.+\/rtx$/i.test(_codec.mimeType),
                        );
                        if (!encodings) {
                            encodings = [{}];
                        }
                        for (const encoding of encodings) {
                            encoding.ssrc = utils.generateRandomNumber();
                            if (useRtx) {
                                encoding.rtx = { ssrc: utils.generateRandomNumber() };
                            }
                        }
                        rtpParameters.encodings = encodings;
                        // Fill RTCRtpParameters.rtcp.
                        rtpParameters.rtcp = {
                            cname: this._cname,
                            reducedSize: true,
                            mux: true,
                        };
                        // NOTE: Convert our standard RTCRtpParameters into those that Edge
                        // expects.
                        const edgeRtpParameters = edgeUtils.mangleRtpParameters(rtpParameters);
                        logger.debug(
                            'send() | calling rtpSender.send() [params:%o]',
                            edgeRtpParameters,
                        );
                        await rtpSender.send(edgeRtpParameters);
                        const localId = String(this._nextSendLocalId);
                        this._nextSendLocalId++;
                        // Store it.
                        this._rtpSenders.set(localId, rtpSender);
                        return { localId, rtpParameters, rtpSender };
                    }
                    async stopSending(localId) {
                        logger.debug('stopSending() [localId:%s]', localId);
                        const rtpSender = this._rtpSenders.get(localId);
                        if (!rtpSender) {
                            throw new Error('RTCRtpSender not found');
                        }
                        this._rtpSenders.delete(localId);
                        try {
                            logger.debug('stopSending() | calling rtpSender.stop()');
                            rtpSender.stop();
                        } catch (error) {
                            logger.warn('stopSending() | rtpSender.stop() failed:%o', error);
                            throw error;
                        }
                    }
                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    async pauseSending(localId) {
                        // Unimplemented.
                    }
                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    async resumeSending(localId) {
                        // Unimplemented.
                    }
                    async replaceTrack(localId, track) {
                        if (track) {
                            logger.debug(
                                'replaceTrack() [localId:%s, track.id:%s]',
                                localId,
                                track.id,
                            );
                        } else {
                            logger.debug('replaceTrack() [localId:%s, no track]', localId);
                        }
                        const rtpSender = this._rtpSenders.get(localId);
                        if (!rtpSender) {
                            throw new Error('RTCRtpSender not found');
                        }
                        rtpSender.setTrack(track);
                    }
                    async setMaxSpatialLayer(localId, spatialLayer) {
                        logger.debug(
                            'setMaxSpatialLayer() [localId:%s, spatialLayer:%s]',
                            localId,
                            spatialLayer,
                        );
                        const rtpSender = this._rtpSenders.get(localId);
                        if (!rtpSender) {
                            throw new Error('RTCRtpSender not found');
                        }
                        const parameters = rtpSender.getParameters();
                        parameters.encodings.forEach((encoding, idx) => {
                            if (idx <= spatialLayer) {
                                encoding.active = true;
                            } else {
                                encoding.active = false;
                            }
                        });
                        await rtpSender.setParameters(parameters);
                    }
                    async setRtpEncodingParameters(localId, params) {
                        logger.debug(
                            'setRtpEncodingParameters() [localId:%s, params:%o]',
                            localId,
                            params,
                        );
                        const rtpSender = this._rtpSenders.get(localId);
                        if (!rtpSender) {
                            throw new Error('RTCRtpSender not found');
                        }
                        const parameters = rtpSender.getParameters();
                        parameters.encodings.forEach((encoding, idx) => {
                            parameters.encodings[idx] = { ...encoding, ...params };
                        });
                        await rtpSender.setParameters(parameters);
                    }
                    async getSenderStats(localId) {
                        const rtpSender = this._rtpSenders.get(localId);
                        if (!rtpSender) {
                            throw new Error('RTCRtpSender not found');
                        }
                        return rtpSender.getStats();
                    }
                    async sendDataChannel(
                        // eslint-disable-next-line @typescript-eslint/no-unused-vars
                        options,
                    ) {
                        throw new errors_1.UnsupportedError('not implemented');
                    }
                    async receive(optionsList) {
                        const results = [];
                        for (const options of optionsList) {
                            const { trackId, kind } = options;
                            logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
                        }
                        if (!this._transportReady) {
                            await this.setupTransport({ localDtlsRole: 'server' });
                        }
                        for (const options of optionsList) {
                            const { trackId, kind, rtpParameters } = options;
                            logger.debug('receive() | calling new RTCRtpReceiver()');
                            const rtpReceiver = new RTCRtpReceiver(this._dtlsTransport, kind);
                            rtpReceiver.addEventListener('error', (event) => {
                                logger.error('rtpReceiver "error" event [event:%o]', event);
                            });
                            // NOTE: Convert our standard RTCRtpParameters into those that Edge
                            // expects.
                            const edgeRtpParameters = edgeUtils.mangleRtpParameters(rtpParameters);
                            logger.debug(
                                'receive() | calling rtpReceiver.receive() [params:%o]',
                                edgeRtpParameters,
                            );
                            await rtpReceiver.receive(edgeRtpParameters);
                            const localId = trackId;
                            // Store it.
                            this._rtpReceivers.set(localId, rtpReceiver);
                            results.push({
                                localId,
                                track: rtpReceiver.track,
                                rtpReceiver,
                            });
                        }
                        return results;
                    }
                    async stopReceiving(localIds) {
                        for (const localId of localIds) {
                            logger.debug('stopReceiving() [localId:%s]', localId);
                            const rtpReceiver = this._rtpReceivers.get(localId);
                            if (!rtpReceiver) {
                                throw new Error('RTCRtpReceiver not found');
                            }
                            this._rtpReceivers.delete(localId);
                            try {
                                logger.debug('stopReceiving() | calling rtpReceiver.stop()');
                                rtpReceiver.stop();
                            } catch (error) {
                                logger.warn(
                                    'stopReceiving() | rtpReceiver.stop() failed:%o',
                                    error,
                                );
                            }
                        }
                    }
                    async pauseReceiving(
                        // eslint-disable-next-line @typescript-eslint/no-unused-vars
                        localIds,
                    ) {
                        // Unimplemented.
                    }
                    async resumeReceiving(
                        // eslint-disable-next-line @typescript-eslint/no-unused-vars
                        localIds,
                    ) {
                        // Unimplemented.
                    }
                    async getReceiverStats(localId) {
                        const rtpReceiver = this._rtpReceivers.get(localId);
                        if (!rtpReceiver) {
                            throw new Error('RTCRtpReceiver not found');
                        }
                        return rtpReceiver.getStats();
                    }
                    async receiveDataChannel(
                        // eslint-disable-next-line @typescript-eslint/no-unused-vars
                        options,
                    ) {
                        throw new errors_1.UnsupportedError('not implemented');
                    }
                    setIceGatherer({ iceServers, iceTransportPolicy }) {
                        // @ts-ignore
                        const iceGatherer = new RTCIceGatherer({
                            iceServers: iceServers || [],
                            gatherPolicy: iceTransportPolicy || 'all',
                        });
                        iceGatherer.addEventListener('error', (event) => {
                            logger.error('iceGatherer "error" event [event:%o]', event);
                        });
                        // NOTE: Not yet implemented by Edge, which starts gathering automatically.
                        try {
                            iceGatherer.gather();
                        } catch (error) {
                            logger.debug(
                                'setIceGatherer() | iceGatherer.gather() failed: %s',
                                error.toString(),
                            );
                        }
                        this._iceGatherer = iceGatherer;
                    }
                    setIceTransport() {
                        const iceTransport = new RTCIceTransport(this._iceGatherer);
                        // NOTE: Not yet implemented by Edge.
                        iceTransport.addEventListener('statechange', () => {
                            switch (iceTransport.state) {
                                case 'checking':
                                    this.emit('@connectionstatechange', 'connecting');
                                    break;
                                case 'connected':
                                case 'completed':
                                    this.emit('@connectionstatechange', 'connected');
                                    break;
                                case 'failed':
                                    this.emit('@connectionstatechange', 'failed');
                                    break;
                                case 'disconnected':
                                    this.emit('@connectionstatechange', 'disconnected');
                                    break;
                                case 'closed':
                                    this.emit('@connectionstatechange', 'closed');
                                    break;
                            }
                        });
                        // NOTE: Not standard, but implemented by Edge.
                        iceTransport.addEventListener('icestatechange', () => {
                            switch (iceTransport.state) {
                                case 'checking':
                                    this.emit('@connectionstatechange', 'connecting');
                                    break;
                                case 'connected':
                                case 'completed':
                                    this.emit('@connectionstatechange', 'connected');
                                    break;
                                case 'failed':
                                    this.emit('@connectionstatechange', 'failed');
                                    break;
                                case 'disconnected':
                                    this.emit('@connectionstatechange', 'disconnected');
                                    break;
                                case 'closed':
                                    this.emit('@connectionstatechange', 'closed');
                                    break;
                            }
                        });
                        iceTransport.addEventListener('candidatepairchange', (event) => {
                            logger.debug(
                                'iceTransport "candidatepairchange" event [pair:%o]',
                                event.pair,
                            );
                        });
                        this._iceTransport = iceTransport;
                    }
                    setDtlsTransport() {
                        const dtlsTransport = new RTCDtlsTransport(this._iceTransport);
                        // NOTE: Not yet implemented by Edge.
                        dtlsTransport.addEventListener('statechange', () => {
                            logger.debug(
                                'dtlsTransport "statechange" event [state:%s]',
                                dtlsTransport.state,
                            );
                        });
                        // NOTE: Not standard, but implemented by Edge.
                        dtlsTransport.addEventListener('dtlsstatechange', () => {
                            logger.debug(
                                'dtlsTransport "dtlsstatechange" event [state:%s]',
                                dtlsTransport.state,
                            );
                            if (dtlsTransport.state === 'closed') {
                                this.emit('@connectionstatechange', 'closed');
                            }
                        });
                        dtlsTransport.addEventListener('error', (event) => {
                            logger.error('dtlsTransport "error" event [event:%o]', event);
                        });
                        this._dtlsTransport = dtlsTransport;
                    }
                    async setupTransport({ localDtlsRole }) {
                        logger.debug('setupTransport()');
                        // Get our local DTLS parameters.
                        const dtlsParameters = this._dtlsTransport.getLocalParameters();
                        dtlsParameters.role = localDtlsRole;
                        // Need to tell the remote transport about our parameters.
                        await new Promise((resolve, reject) => {
                            this.safeEmit('@connect', { dtlsParameters }, resolve, reject);
                        });
                        // Start the RTCIceTransport.
                        this._iceTransport.start(
                            this._iceGatherer,
                            this._remoteIceParameters,
                            'controlling',
                        );
                        // Add remote ICE candidates.
                        for (const candidate of this._remoteIceCandidates) {
                            this._iceTransport.addRemoteCandidate(candidate);
                        }
                        // Also signal a 'complete' candidate as per spec.
                        // NOTE: It should be {complete: true} but Edge prefers {}.
                        // NOTE: If we don't signal end of candidates, the Edge RTCIceTransport
                        // won't enter the 'completed' state.
                        this._iceTransport.addRemoteCandidate({});
                        // NOTE: Edge does not like SHA less than 256.
                        this._remoteDtlsParameters.fingerprints =
                            this._remoteDtlsParameters.fingerprints.filter((fingerprint) => {
                                return (
                                    fingerprint.algorithm === 'sha-256' ||
                                    fingerprint.algorithm === 'sha-384' ||
                                    fingerprint.algorithm === 'sha-512'
                                );
                            });
                        // Start the RTCDtlsTransport.
                        this._dtlsTransport.start(this._remoteDtlsParameters);
                        this._transportReady = true;
                    }
                }
                exports.Edge11 = Edge11;
            },
            {
                '../Logger': 39,
                '../errors': 44,
                '../ortc': 65,
                '../utils': 68,
                './HandlerInterface': 52,
                './ortc/edgeUtils': 57,
            },
        ],
        51: [
            function (require, module, exports) {
                'use strict';
                var __createBinding =
                    (this && this.__createBinding) ||
                    (Object.create
                        ? function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              var desc = Object.getOwnPropertyDescriptor(m, k);
                              if (
                                  !desc ||
                                  ('get' in desc
                                      ? !m.__esModule
                                      : desc.writable || desc.configurable)
                              ) {
                                  desc = {
                                      enumerable: true,
                                      get: function () {
                                          return m[k];
                                      },
                                  };
                              }
                              Object.defineProperty(o, k2, desc);
                          }
                        : function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              o[k2] = m[k];
                          });
                var __setModuleDefault =
                    (this && this.__setModuleDefault) ||
                    (Object.create
                        ? function (o, v) {
                              Object.defineProperty(o, 'default', { enumerable: true, value: v });
                          }
                        : function (o, v) {
                              o['default'] = v;
                          });
                var __importStar =
                    (this && this.__importStar) ||
                    function (mod) {
                        if (mod && mod.__esModule) return mod;
                        var result = {};
                        if (mod != null)
                            for (var k in mod)
                                if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
                                    __createBinding(result, mod, k);
                        __setModuleDefault(result, mod);
                        return result;
                    };
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.Firefox60 = void 0;
                const sdpTransform = __importStar(require('sdp-transform'));
                const Logger_1 = require('../Logger');
                const errors_1 = require('../errors');
                const utils = __importStar(require('../utils'));
                const ortc = __importStar(require('../ortc'));
                const sdpCommonUtils = __importStar(require('./sdp/commonUtils'));
                const sdpUnifiedPlanUtils = __importStar(require('./sdp/unifiedPlanUtils'));
                const HandlerInterface_1 = require('./HandlerInterface');
                const RemoteSdp_1 = require('./sdp/RemoteSdp');
                const scalabilityModes_1 = require('../scalabilityModes');
                const logger = new Logger_1.Logger('Firefox60');
                const SCTP_NUM_STREAMS = { OS: 16, MIS: 2048 };
                class Firefox60 extends HandlerInterface_1.HandlerInterface {
                    /**
                     * Creates a factory function.
                     */
                    static createFactory() {
                        return () => new Firefox60();
                    }
                    constructor() {
                        super();
                        // Closed flag.
                        this._closed = false;
                        // Map of RTCTransceivers indexed by MID.
                        this._mapMidTransceiver = new Map();
                        // Local stream for sending.
                        this._sendStream = new MediaStream();
                        // Whether a DataChannel m=application section has been created.
                        this._hasDataChannelMediaSection = false;
                        // Sending DataChannel id value counter. Incremented for each new DataChannel.
                        this._nextSendSctpStreamId = 0;
                        // Got transport local and remote parameters.
                        this._transportReady = false;
                    }
                    get name() {
                        return 'Firefox60';
                    }
                    close() {
                        logger.debug('close()');
                        if (this._closed) {
                            return;
                        }
                        this._closed = true;
                        // Close RTCPeerConnection.
                        if (this._pc) {
                            try {
                                this._pc.close();
                            } catch (error) {}
                        }
                        this.emit('@close');
                    }
                    async getNativeRtpCapabilities() {
                        logger.debug('getNativeRtpCapabilities()');
                        const pc = new RTCPeerConnection({
                            iceServers: [],
                            iceTransportPolicy: 'all',
                            bundlePolicy: 'max-bundle',
                            rtcpMuxPolicy: 'require',
                        });
                        // NOTE: We need to add a real video track to get the RID extension mapping.
                        const canvas = document.createElement('canvas');
                        // NOTE: Otherwise Firefox fails in next line.
                        canvas.getContext('2d');
                        const fakeStream = canvas.captureStream();
                        const fakeVideoTrack = fakeStream.getVideoTracks()[0];
                        try {
                            pc.addTransceiver('audio', { direction: 'sendrecv' });
                            const videoTransceiver = pc.addTransceiver(fakeVideoTrack, {
                                direction: 'sendrecv',
                            });
                            const parameters = videoTransceiver.sender.getParameters();
                            const encodings = [
                                { rid: 'r0', maxBitrate: 100000 },
                                { rid: 'r1', maxBitrate: 500000 },
                            ];
                            parameters.encodings = encodings;
                            await videoTransceiver.sender.setParameters(parameters);
                            const offer = await pc.createOffer();
                            try {
                                canvas.remove();
                            } catch (error) {}
                            try {
                                fakeVideoTrack.stop();
                            } catch (error) {}
                            try {
                                pc.close();
                            } catch (error) {}
                            const sdpObject = sdpTransform.parse(offer.sdp);
                            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({
                                sdpObject,
                            });
                            return nativeRtpCapabilities;
                        } catch (error) {
                            try {
                                canvas.remove();
                            } catch (error2) {}
                            try {
                                fakeVideoTrack.stop();
                            } catch (error2) {}
                            try {
                                pc.close();
                            } catch (error2) {}
                            throw error;
                        }
                    }
                    async getNativeSctpCapabilities() {
                        logger.debug('getNativeSctpCapabilities()');
                        return {
                            numStreams: SCTP_NUM_STREAMS,
                        };
                    }
                    run({
                        direction,
                        iceParameters,
                        iceCandidates,
                        dtlsParameters,
                        sctpParameters,
                        iceServers,
                        iceTransportPolicy,
                        additionalSettings,
                        proprietaryConstraints,
                        extendedRtpCapabilities,
                    }) {
                        this.assertNotClosed();
                        logger.debug('run()');
                        this._direction = direction;
                        this._remoteSdp = new RemoteSdp_1.RemoteSdp({
                            iceParameters,
                            iceCandidates,
                            dtlsParameters,
                            sctpParameters,
                        });
                        this._sendingRtpParametersByKind = {
                            audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
                            video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities),
                        };
                        this._sendingRemoteRtpParametersByKind = {
                            audio: ortc.getSendingRemoteRtpParameters(
                                'audio',
                                extendedRtpCapabilities,
                            ),
                            video: ortc.getSendingRemoteRtpParameters(
                                'video',
                                extendedRtpCapabilities,
                            ),
                        };
                        this._pc = new RTCPeerConnection(
                            {
                                iceServers: iceServers || [],
                                iceTransportPolicy: iceTransportPolicy || 'all',
                                bundlePolicy: 'max-bundle',
                                rtcpMuxPolicy: 'require',
                                ...additionalSettings,
                            },
                            proprietaryConstraints,
                        );
                        this._pc.addEventListener('icegatheringstatechange', () => {
                            this.emit('@icegatheringstatechange', this._pc.iceGatheringState);
                        });
                        if (this._pc.connectionState) {
                            this._pc.addEventListener('connectionstatechange', () => {
                                this.emit('@connectionstatechange', this._pc.connectionState);
                            });
                        } else {
                            this._pc.addEventListener('iceconnectionstatechange', () => {
                                logger.warn(
                                    'run() | pc.connectionState not supported, using pc.iceConnectionState',
                                );
                                switch (this._pc.iceConnectionState) {
                                    case 'checking':
                                        this.emit('@connectionstatechange', 'connecting');
                                        break;
                                    case 'connected':
                                    case 'completed':
                                        this.emit('@connectionstatechange', 'connected');
                                        break;
                                    case 'failed':
                                        this.emit('@connectionstatechange', 'failed');
                                        break;
                                    case 'disconnected':
                                        this.emit('@connectionstatechange', 'disconnected');
                                        break;
                                    case 'closed':
                                        this.emit('@connectionstatechange', 'closed');
                                        break;
                                }
                            });
                        }
                    }
                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    async updateIceServers(iceServers) {
                        this.assertNotClosed();
                        // NOTE: Firefox does not implement pc.setConfiguration().
                        throw new errors_1.UnsupportedError('not supported');
                    }
                    async restartIce(iceParameters) {
                        this.assertNotClosed();
                        logger.debug('restartIce()');
                        // Provide the remote SDP handler with new remote ICE parameters.
                        this._remoteSdp.updateIceParameters(iceParameters);
                        if (!this._transportReady) {
                            return;
                        }
                        if (this._direction === 'send') {
                            const offer = await this._pc.createOffer({ iceRestart: true });
                            logger.debug(
                                'restartIce() | calling pc.setLocalDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setLocalDescription(offer);
                            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'restartIce() | calling pc.setRemoteDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setRemoteDescription(answer);
                        } else {
                            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'restartIce() | calling pc.setRemoteDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setRemoteDescription(offer);
                            const answer = await this._pc.createAnswer();
                            logger.debug(
                                'restartIce() | calling pc.setLocalDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setLocalDescription(answer);
                        }
                    }
                    async getTransportStats() {
                        this.assertNotClosed();
                        return this._pc.getStats();
                    }
                    async send({ track, encodings, codecOptions, codec }) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
                        if (encodings) {
                            encodings = utils.clone(encodings, []);
                            if (encodings.length > 1) {
                                encodings.forEach((encoding, idx) => {
                                    encoding.rid = `r${idx}`;
                                });
                                // Clone the encodings and reverse them because Firefox likes them
                                // from high to low.
                                encodings.reverse();
                            }
                        }
                        const sendingRtpParameters = utils.clone(
                            this._sendingRtpParametersByKind[track.kind],
                            {},
                        );
                        // This may throw.
                        sendingRtpParameters.codecs = ortc.reduceCodecs(
                            sendingRtpParameters.codecs,
                            codec,
                        );
                        const sendingRemoteRtpParameters = utils.clone(
                            this._sendingRemoteRtpParametersByKind[track.kind],
                            {},
                        );
                        // This may throw.
                        sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(
                            sendingRemoteRtpParameters.codecs,
                            codec,
                        );
                        // NOTE: Firefox fails sometimes to properly anticipate the closed media
                        // section that it should use, so don't reuse closed media sections.
                        //   https://github.com/versatica/mediasoup-client/issues/104
                        //
                        // const mediaSectionIdx = this._remoteSdp!.getNextMediaSectionIdx();
                        const transceiver = this._pc.addTransceiver(track, {
                            direction: 'sendonly',
                            streams: [this._sendStream],
                        });
                        // NOTE: This is not spec compliants. Encodings should be given in addTransceiver
                        // second argument, but Firefox does not support it.
                        if (encodings) {
                            const parameters = transceiver.sender.getParameters();
                            parameters.encodings = encodings;
                            await transceiver.sender.setParameters(parameters);
                        }
                        const offer = await this._pc.createOffer();
                        let localSdpObject = sdpTransform.parse(offer.sdp);
                        // In Firefox use DTLS role client even if we are the "offerer" since
                        // Firefox does not respect ICE-Lite.
                        if (!this._transportReady) {
                            await this.setupTransport({ localDtlsRole: 'client', localSdpObject });
                        }
                        const layers = (0, scalabilityModes_1.parse)(
                            (encodings || [{}])[0].scalabilityMode,
                        );
                        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);
                        await this._pc.setLocalDescription(offer);
                        // We can now get the transceiver.mid.
                        const localId = transceiver.mid;
                        // Set MID.
                        sendingRtpParameters.mid = localId;
                        localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
                        const offerMediaObject =
                            localSdpObject.media[localSdpObject.media.length - 1];
                        // Set RTCP CNAME.
                        sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({
                            offerMediaObject,
                        });
                        // Set RTP encodings by parsing the SDP offer if no encodings are given.
                        if (!encodings) {
                            sendingRtpParameters.encodings = sdpUnifiedPlanUtils.getRtpEncodings({
                                offerMediaObject,
                            });
                        }
                        // Set RTP encodings by parsing the SDP offer and complete them with given
                        // one if just a single encoding has been given.
                        else if (encodings.length === 1) {
                            const newEncodings = sdpUnifiedPlanUtils.getRtpEncodings({
                                offerMediaObject,
                            });
                            Object.assign(newEncodings[0], encodings[0]);
                            sendingRtpParameters.encodings = newEncodings;
                        }
                        // Otherwise if more than 1 encoding are given use them verbatim (but
                        // reverse them back since we reversed them above to satisfy Firefox).
                        else {
                            sendingRtpParameters.encodings = encodings.reverse();
                        }
                        // If VP8 or H264 and there is effective simulcast, add scalabilityMode to
                        // each encoding.
                        if (
                            sendingRtpParameters.encodings.length > 1 &&
                            (sendingRtpParameters.codecs[0].mimeType.toLowerCase() ===
                                'video/vp8' ||
                                sendingRtpParameters.codecs[0].mimeType.toLowerCase() ===
                                    'video/h264')
                        ) {
                            for (const encoding of sendingRtpParameters.encodings) {
                                if (encoding.scalabilityMode) {
                                    encoding.scalabilityMode = `L1T${layers.temporalLayers}`;
                                } else {
                                    encoding.scalabilityMode = 'L1T3';
                                }
                            }
                        }
                        this._remoteSdp.send({
                            offerMediaObject,
                            offerRtpParameters: sendingRtpParameters,
                            answerRtpParameters: sendingRemoteRtpParameters,
                            codecOptions,
                            extmapAllowMixed: true,
                        });
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'send() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                        // Store in the map.
                        this._mapMidTransceiver.set(localId, transceiver);
                        return {
                            localId,
                            rtpParameters: sendingRtpParameters,
                            rtpSender: transceiver.sender,
                        };
                    }
                    async stopSending(localId) {
                        this.assertSendDirection();
                        logger.debug('stopSending() [localId:%s]', localId);
                        if (this._closed) {
                            return;
                        }
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated transceiver not found');
                        }
                        transceiver.sender.replaceTrack(null);
                        // NOTE: Cannot use stop() the transceiver due to the the note above in
                        // send() method.
                        // try
                        // {
                        // 	transceiver.stop();
                        // }
                        // catch (error)
                        // {}
                        this._pc.removeTrack(transceiver.sender);
                        // NOTE: Cannot use closeMediaSection() due to the the note above in send()
                        // method.
                        // this._remoteSdp!.closeMediaSection(transceiver.mid);
                        this._remoteSdp.disableMediaSection(transceiver.mid);
                        const offer = await this._pc.createOffer();
                        logger.debug(
                            'stopSending() | calling pc.setLocalDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setLocalDescription(offer);
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'stopSending() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                        this._mapMidTransceiver.delete(localId);
                    }
                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    async pauseSending(localId) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        logger.debug('pauseSending() [localId:%s]', localId);
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        transceiver.direction = 'inactive';
                        this._remoteSdp.pauseMediaSection(localId);
                        const offer = await this._pc.createOffer();
                        logger.debug(
                            'pauseSending() | calling pc.setLocalDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setLocalDescription(offer);
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'pauseSending() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                    }
                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    async resumeSending(localId) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        logger.debug('resumeSending() [localId:%s]', localId);
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        transceiver.direction = 'sendonly';
                        this._remoteSdp.resumeSendingMediaSection(localId);
                        const offer = await this._pc.createOffer();
                        logger.debug(
                            'resumeSending() | calling pc.setLocalDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setLocalDescription(offer);
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'resumeSending() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                    }
                    async replaceTrack(localId, track) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        if (track) {
                            logger.debug(
                                'replaceTrack() [localId:%s, track.id:%s]',
                                localId,
                                track.id,
                            );
                        } else {
                            logger.debug('replaceTrack() [localId:%s, no track]', localId);
                        }
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        await transceiver.sender.replaceTrack(track);
                    }
                    async setMaxSpatialLayer(localId, spatialLayer) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        logger.debug(
                            'setMaxSpatialLayer() [localId:%s, spatialLayer:%s]',
                            localId,
                            spatialLayer,
                        );
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated transceiver not found');
                        }
                        const parameters = transceiver.sender.getParameters();
                        // NOTE: We require encodings given from low to high, however Firefox
                        // requires them in reverse order, so do magic here.
                        spatialLayer = parameters.encodings.length - 1 - spatialLayer;
                        parameters.encodings.forEach((encoding, idx) => {
                            if (idx >= spatialLayer) {
                                encoding.active = true;
                            } else {
                                encoding.active = false;
                            }
                        });
                        await transceiver.sender.setParameters(parameters);
                        this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);
                        const offer = await this._pc.createOffer();
                        logger.debug(
                            'setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setLocalDescription(offer);
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                    }
                    async setRtpEncodingParameters(localId, params) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        logger.debug(
                            'setRtpEncodingParameters() [localId:%s, params:%o]',
                            localId,
                            params,
                        );
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        const parameters = transceiver.sender.getParameters();
                        parameters.encodings.forEach((encoding, idx) => {
                            parameters.encodings[idx] = { ...encoding, ...params };
                        });
                        await transceiver.sender.setParameters(parameters);
                        this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);
                        const offer = await this._pc.createOffer();
                        logger.debug(
                            'setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setLocalDescription(offer);
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                    }
                    async getSenderStats(localId) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        return transceiver.sender.getStats();
                    }
                    async sendDataChannel({
                        ordered,
                        maxPacketLifeTime,
                        maxRetransmits,
                        label,
                        protocol,
                    }) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        const options = {
                            negotiated: true,
                            id: this._nextSendSctpStreamId,
                            ordered,
                            maxPacketLifeTime,
                            maxRetransmits,
                            protocol,
                        };
                        logger.debug('sendDataChannel() [options:%o]', options);
                        const dataChannel = this._pc.createDataChannel(label, options);
                        // Increase next id.
                        this._nextSendSctpStreamId =
                            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;
                        // If this is the first DataChannel we need to create the SDP answer with
                        // m=application section.
                        if (!this._hasDataChannelMediaSection) {
                            const offer = await this._pc.createOffer();
                            const localSdpObject = sdpTransform.parse(offer.sdp);
                            const offerMediaObject = localSdpObject.media.find(
                                (m) => m.type === 'application',
                            );
                            if (!this._transportReady) {
                                await this.setupTransport({
                                    localDtlsRole: 'client',
                                    localSdpObject,
                                });
                            }
                            logger.debug(
                                'sendDataChannel() | calling pc.setLocalDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setLocalDescription(offer);
                            this._remoteSdp.sendSctpAssociation({ offerMediaObject });
                            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setRemoteDescription(answer);
                            this._hasDataChannelMediaSection = true;
                        }
                        const sctpStreamParameters = {
                            streamId: options.id,
                            ordered: options.ordered,
                            maxPacketLifeTime: options.maxPacketLifeTime,
                            maxRetransmits: options.maxRetransmits,
                        };
                        return { dataChannel, sctpStreamParameters };
                    }
                    async receive(
                        // eslint-disable-next-line @typescript-eslint/no-unused-vars
                        optionsList,
                    ) {
                        this.assertNotClosed();
                        this.assertRecvDirection();
                        const results = [];
                        const mapLocalId = new Map();
                        for (const options of optionsList) {
                            const { trackId, kind, rtpParameters, streamId } = options;
                            logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
                            const localId =
                                rtpParameters.mid || String(this._mapMidTransceiver.size);
                            mapLocalId.set(trackId, localId);
                            this._remoteSdp.receive({
                                mid: localId,
                                kind,
                                offerRtpParameters: rtpParameters,
                                streamId: streamId || rtpParameters.rtcp.cname,
                                trackId,
                            });
                        }
                        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'receive() | calling pc.setRemoteDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setRemoteDescription(offer);
                        let answer = await this._pc.createAnswer();
                        const localSdpObject = sdpTransform.parse(answer.sdp);
                        for (const options of optionsList) {
                            const { trackId, rtpParameters } = options;
                            const localId = mapLocalId.get(trackId);
                            const answerMediaObject = localSdpObject.media.find(
                                (m) => String(m.mid) === localId,
                            );
                            // May need to modify codec parameters in the answer based on codec
                            // parameters in the offer.
                            sdpCommonUtils.applyCodecParameters({
                                offerRtpParameters: rtpParameters,
                                answerMediaObject,
                            });
                            answer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };
                        }
                        if (!this._transportReady) {
                            await this.setupTransport({ localDtlsRole: 'client', localSdpObject });
                        }
                        logger.debug(
                            'receive() | calling pc.setLocalDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setLocalDescription(answer);
                        for (const options of optionsList) {
                            const { trackId } = options;
                            const localId = mapLocalId.get(trackId);
                            const transceiver = this._pc
                                .getTransceivers()
                                .find((t) => t.mid === localId);
                            if (!transceiver) {
                                throw new Error('new RTCRtpTransceiver not found');
                            }
                            // Store in the map.
                            this._mapMidTransceiver.set(localId, transceiver);
                            results.push({
                                localId,
                                track: transceiver.receiver.track,
                                rtpReceiver: transceiver.receiver,
                            });
                        }
                        return results;
                    }
                    async stopReceiving(localIds) {
                        this.assertRecvDirection();
                        if (this._closed) {
                            return;
                        }
                        for (const localId of localIds) {
                            logger.debug('stopReceiving() [localId:%s]', localId);
                            const transceiver = this._mapMidTransceiver.get(localId);
                            if (!transceiver) {
                                throw new Error('associated RTCRtpTransceiver not found');
                            }
                            this._remoteSdp.closeMediaSection(transceiver.mid);
                        }
                        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'stopReceiving() | calling pc.setRemoteDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setRemoteDescription(offer);
                        const answer = await this._pc.createAnswer();
                        logger.debug(
                            'stopReceiving() | calling pc.setLocalDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setLocalDescription(answer);
                        for (const localId of localIds) {
                            this._mapMidTransceiver.delete(localId);
                        }
                    }
                    async pauseReceiving(localIds) {
                        this.assertNotClosed();
                        this.assertRecvDirection();
                        for (const localId of localIds) {
                            logger.debug('pauseReceiving() [localId:%s]', localId);
                            const transceiver = this._mapMidTransceiver.get(localId);
                            if (!transceiver) {
                                throw new Error('associated RTCRtpTransceiver not found');
                            }
                            transceiver.direction = 'inactive';
                            this._remoteSdp.pauseMediaSection(localId);
                        }
                        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setRemoteDescription(offer);
                        const answer = await this._pc.createAnswer();
                        logger.debug(
                            'pauseReceiving() | calling pc.setLocalDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setLocalDescription(answer);
                    }
                    async resumeReceiving(localIds) {
                        this.assertNotClosed();
                        this.assertRecvDirection();
                        for (const localId of localIds) {
                            logger.debug('resumeReceiving() [localId:%s]', localId);
                            const transceiver = this._mapMidTransceiver.get(localId);
                            if (!transceiver) {
                                throw new Error('associated RTCRtpTransceiver not found');
                            }
                            transceiver.direction = 'recvonly';
                            this._remoteSdp.resumeReceivingMediaSection(localId);
                        }
                        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setRemoteDescription(offer);
                        const answer = await this._pc.createAnswer();
                        logger.debug(
                            'resumeReceiving() | calling pc.setLocalDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setLocalDescription(answer);
                    }
                    async getReceiverStats(localId) {
                        this.assertRecvDirection();
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        return transceiver.receiver.getStats();
                    }
                    async receiveDataChannel({ sctpStreamParameters, label, protocol }) {
                        this.assertNotClosed();
                        this.assertRecvDirection();
                        const { streamId, ordered, maxPacketLifeTime, maxRetransmits } =
                            sctpStreamParameters;
                        const options = {
                            negotiated: true,
                            id: streamId,
                            ordered,
                            maxPacketLifeTime,
                            maxRetransmits,
                            protocol,
                        };
                        logger.debug('receiveDataChannel() [options:%o]', options);
                        const dataChannel = this._pc.createDataChannel(label, options);
                        // If this is the first DataChannel we need to create the SDP offer with
                        // m=application section.
                        if (!this._hasDataChannelMediaSection) {
                            this._remoteSdp.receiveSctpAssociation();
                            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setRemoteDescription(offer);
                            const answer = await this._pc.createAnswer();
                            if (!this._transportReady) {
                                const localSdpObject = sdpTransform.parse(answer.sdp);
                                await this.setupTransport({
                                    localDtlsRole: 'client',
                                    localSdpObject,
                                });
                            }
                            logger.debug(
                                'receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setLocalDescription(answer);
                            this._hasDataChannelMediaSection = true;
                        }
                        return { dataChannel };
                    }
                    async setupTransport({ localDtlsRole, localSdpObject }) {
                        if (!localSdpObject) {
                            localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
                        }
                        // Get our local DTLS parameters.
                        const dtlsParameters = sdpCommonUtils.extractDtlsParameters({
                            sdpObject: localSdpObject,
                        });
                        // Set our DTLS role.
                        dtlsParameters.role = localDtlsRole;
                        // Update the remote DTLS role in the SDP.
                        this._remoteSdp.updateDtlsRole(
                            localDtlsRole === 'client' ? 'server' : 'client',
                        );
                        // Need to tell the remote transport about our parameters.
                        await new Promise((resolve, reject) => {
                            this.safeEmit('@connect', { dtlsParameters }, resolve, reject);
                        });
                        this._transportReady = true;
                    }
                    assertNotClosed() {
                        if (this._closed) {
                            throw new errors_1.InvalidStateError(
                                'method called in a closed handler',
                            );
                        }
                    }
                    assertSendDirection() {
                        if (this._direction !== 'send') {
                            throw new Error(
                                'method can just be called for handlers with "send" direction',
                            );
                        }
                    }
                    assertRecvDirection() {
                        if (this._direction !== 'recv') {
                            throw new Error(
                                'method can just be called for handlers with "recv" direction',
                            );
                        }
                    }
                }
                exports.Firefox60 = Firefox60;
            },
            {
                '../Logger': 39,
                '../errors': 44,
                '../ortc': 65,
                '../scalabilityModes': 66,
                '../utils': 68,
                './HandlerInterface': 52,
                './sdp/RemoteSdp': 60,
                './sdp/commonUtils': 61,
                './sdp/unifiedPlanUtils': 63,
                'sdp-transform': 73,
            },
        ],
        52: [
            function (require, module, exports) {
                'use strict';
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.HandlerInterface = void 0;
                const EnhancedEventEmitter_1 = require('../EnhancedEventEmitter');
                class HandlerInterface extends EnhancedEventEmitter_1.EnhancedEventEmitter {
                    constructor() {
                        super();
                    }
                }
                exports.HandlerInterface = HandlerInterface;
            },
            { '../EnhancedEventEmitter': 38 },
        ],
        53: [
            function (require, module, exports) {
                'use strict';
                var __createBinding =
                    (this && this.__createBinding) ||
                    (Object.create
                        ? function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              var desc = Object.getOwnPropertyDescriptor(m, k);
                              if (
                                  !desc ||
                                  ('get' in desc
                                      ? !m.__esModule
                                      : desc.writable || desc.configurable)
                              ) {
                                  desc = {
                                      enumerable: true,
                                      get: function () {
                                          return m[k];
                                      },
                                  };
                              }
                              Object.defineProperty(o, k2, desc);
                          }
                        : function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              o[k2] = m[k];
                          });
                var __setModuleDefault =
                    (this && this.__setModuleDefault) ||
                    (Object.create
                        ? function (o, v) {
                              Object.defineProperty(o, 'default', { enumerable: true, value: v });
                          }
                        : function (o, v) {
                              o['default'] = v;
                          });
                var __importStar =
                    (this && this.__importStar) ||
                    function (mod) {
                        if (mod && mod.__esModule) return mod;
                        var result = {};
                        if (mod != null)
                            for (var k in mod)
                                if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
                                    __createBinding(result, mod, k);
                        __setModuleDefault(result, mod);
                        return result;
                    };
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.ReactNative = void 0;
                const sdpTransform = __importStar(require('sdp-transform'));
                const Logger_1 = require('../Logger');
                const errors_1 = require('../errors');
                const utils = __importStar(require('../utils'));
                const ortc = __importStar(require('../ortc'));
                const sdpCommonUtils = __importStar(require('./sdp/commonUtils'));
                const sdpPlanBUtils = __importStar(require('./sdp/planBUtils'));
                const HandlerInterface_1 = require('./HandlerInterface');
                const RemoteSdp_1 = require('./sdp/RemoteSdp');
                const logger = new Logger_1.Logger('ReactNative');
                const SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };
                class ReactNative extends HandlerInterface_1.HandlerInterface {
                    /**
                     * Creates a factory function.
                     */
                    static createFactory() {
                        return () => new ReactNative();
                    }
                    constructor() {
                        super();
                        // Local stream for sending.
                        this._sendStream = new MediaStream();
                        // Map of sending MediaStreamTracks indexed by localId.
                        this._mapSendLocalIdTrack = new Map();
                        // Next sending localId.
                        this._nextSendLocalId = 0;
                        // Map of MID, RTP parameters and RTCRtpReceiver indexed by local id.
                        // Value is an Object with mid, rtpParameters and rtpReceiver.
                        this._mapRecvLocalIdInfo = new Map();
                        // Whether a DataChannel m=application section has been created.
                        this._hasDataChannelMediaSection = false;
                        // Sending DataChannel id value counter. Incremented for each new DataChannel.
                        this._nextSendSctpStreamId = 0;
                        // Got transport local and remote parameters.
                        this._transportReady = false;
                    }
                    get name() {
                        return 'ReactNative';
                    }
                    close() {
                        logger.debug('close()');
                        // Free/dispose native MediaStream but DO NOT free/dispose native
                        // MediaStreamTracks (that is parent's business).
                        // @ts-ignore (proprietary API in react-native-webrtc).
                        this._sendStream.release(/* releaseTracks */ false);
                        // Close RTCPeerConnection.
                        if (this._pc) {
                            try {
                                this._pc.close();
                            } catch (error) {}
                        }
                        this.emit('@close');
                    }
                    async getNativeRtpCapabilities() {
                        logger.debug('getNativeRtpCapabilities()');
                        const pc = new RTCPeerConnection({
                            iceServers: [],
                            iceTransportPolicy: 'all',
                            bundlePolicy: 'max-bundle',
                            rtcpMuxPolicy: 'require',
                            sdpSemantics: 'plan-b',
                        });
                        try {
                            const offer = await pc.createOffer({
                                offerToReceiveAudio: true,
                                offerToReceiveVideo: true,
                            });
                            try {
                                pc.close();
                            } catch (error) {}
                            const sdpObject = sdpTransform.parse(offer.sdp);
                            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({
                                sdpObject,
                            });
                            return nativeRtpCapabilities;
                        } catch (error) {
                            try {
                                pc.close();
                            } catch (error2) {}
                            throw error;
                        }
                    }
                    async getNativeSctpCapabilities() {
                        logger.debug('getNativeSctpCapabilities()');
                        return {
                            numStreams: SCTP_NUM_STREAMS,
                        };
                    }
                    run({
                        direction,
                        iceParameters,
                        iceCandidates,
                        dtlsParameters,
                        sctpParameters,
                        iceServers,
                        iceTransportPolicy,
                        additionalSettings,
                        proprietaryConstraints,
                        extendedRtpCapabilities,
                    }) {
                        logger.debug('run()');
                        this._direction = direction;
                        this._remoteSdp = new RemoteSdp_1.RemoteSdp({
                            iceParameters,
                            iceCandidates,
                            dtlsParameters,
                            sctpParameters,
                            planB: true,
                        });
                        this._sendingRtpParametersByKind = {
                            audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
                            video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities),
                        };
                        this._sendingRemoteRtpParametersByKind = {
                            audio: ortc.getSendingRemoteRtpParameters(
                                'audio',
                                extendedRtpCapabilities,
                            ),
                            video: ortc.getSendingRemoteRtpParameters(
                                'video',
                                extendedRtpCapabilities,
                            ),
                        };
                        if (dtlsParameters.role && dtlsParameters.role !== 'auto') {
                            this._forcedLocalDtlsRole =
                                dtlsParameters.role === 'server' ? 'client' : 'server';
                        }
                        this._pc = new RTCPeerConnection(
                            {
                                iceServers: iceServers || [],
                                iceTransportPolicy: iceTransportPolicy || 'all',
                                bundlePolicy: 'max-bundle',
                                rtcpMuxPolicy: 'require',
                                sdpSemantics: 'plan-b',
                                ...additionalSettings,
                            },
                            proprietaryConstraints,
                        );
                        this._pc.addEventListener('icegatheringstatechange', () => {
                            this.emit('@icegatheringstatechange', this._pc.iceGatheringState);
                        });
                        if (this._pc.connectionState) {
                            this._pc.addEventListener('connectionstatechange', () => {
                                this.emit('@connectionstatechange', this._pc.connectionState);
                            });
                        } else {
                            this._pc.addEventListener('iceconnectionstatechange', () => {
                                logger.warn(
                                    'run() | pc.connectionState not supported, using pc.iceConnectionState',
                                );
                                switch (this._pc.iceConnectionState) {
                                    case 'checking':
                                        this.emit('@connectionstatechange', 'connecting');
                                        break;
                                    case 'connected':
                                    case 'completed':
                                        this.emit('@connectionstatechange', 'connected');
                                        break;
                                    case 'failed':
                                        this.emit('@connectionstatechange', 'failed');
                                        break;
                                    case 'disconnected':
                                        this.emit('@connectionstatechange', 'disconnected');
                                        break;
                                    case 'closed':
                                        this.emit('@connectionstatechange', 'closed');
                                        break;
                                }
                            });
                        }
                    }
                    async updateIceServers(iceServers) {
                        logger.debug('updateIceServers()');
                        const configuration = this._pc.getConfiguration();
                        configuration.iceServers = iceServers;
                        this._pc.setConfiguration(configuration);
                    }
                    async restartIce(iceParameters) {
                        logger.debug('restartIce()');
                        // Provide the remote SDP handler with new remote ICE parameters.
                        this._remoteSdp.updateIceParameters(iceParameters);
                        if (!this._transportReady) {
                            return;
                        }
                        if (this._direction === 'send') {
                            const offer = await this._pc.createOffer({ iceRestart: true });
                            logger.debug(
                                'restartIce() | calling pc.setLocalDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setLocalDescription(offer);
                            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'restartIce() | calling pc.setRemoteDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setRemoteDescription(answer);
                        } else {
                            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'restartIce() | calling pc.setRemoteDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setRemoteDescription(offer);
                            const answer = await this._pc.createAnswer();
                            logger.debug(
                                'restartIce() | calling pc.setLocalDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setLocalDescription(answer);
                        }
                    }
                    async getTransportStats() {
                        return this._pc.getStats();
                    }
                    async send({ track, encodings, codecOptions, codec }) {
                        this.assertSendDirection();
                        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
                        if (codec) {
                            logger.warn(
                                'send() | codec selection is not available in %s handler',
                                this.name,
                            );
                        }
                        this._sendStream.addTrack(track);
                        this._pc.addStream(this._sendStream);
                        let offer = await this._pc.createOffer();
                        let localSdpObject = sdpTransform.parse(offer.sdp);
                        let offerMediaObject;
                        const sendingRtpParameters = utils.clone(
                            this._sendingRtpParametersByKind[track.kind],
                            {},
                        );
                        sendingRtpParameters.codecs = ortc.reduceCodecs(
                            sendingRtpParameters.codecs,
                        );
                        const sendingRemoteRtpParameters = utils.clone(
                            this._sendingRemoteRtpParametersByKind[track.kind],
                            {},
                        );
                        sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(
                            sendingRemoteRtpParameters.codecs,
                        );
                        if (!this._transportReady) {
                            await this.setupTransport({
                                localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                localSdpObject,
                            });
                        }
                        if (track.kind === 'video' && encodings && encodings.length > 1) {
                            logger.debug('send() | enabling simulcast');
                            localSdpObject = sdpTransform.parse(offer.sdp);
                            offerMediaObject = localSdpObject.media.find((m) => m.type === 'video');
                            sdpPlanBUtils.addLegacySimulcast({
                                offerMediaObject,
                                track,
                                numStreams: encodings.length,
                            });
                            offer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };
                        }
                        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);
                        await this._pc.setLocalDescription(offer);
                        localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
                        offerMediaObject = localSdpObject.media.find((m) => m.type === track.kind);
                        // Set RTCP CNAME.
                        sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({
                            offerMediaObject,
                        });
                        // Set RTP encodings.
                        sendingRtpParameters.encodings = sdpPlanBUtils.getRtpEncodings({
                            offerMediaObject,
                            track,
                        });
                        // Complete encodings with given values.
                        if (encodings) {
                            for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {
                                if (encodings[idx]) {
                                    Object.assign(
                                        sendingRtpParameters.encodings[idx],
                                        encodings[idx],
                                    );
                                }
                            }
                        }
                        // If VP8 or H264 and there is effective simulcast, add scalabilityMode to
                        // each encoding.
                        if (
                            sendingRtpParameters.encodings.length > 1 &&
                            (sendingRtpParameters.codecs[0].mimeType.toLowerCase() ===
                                'video/vp8' ||
                                sendingRtpParameters.codecs[0].mimeType.toLowerCase() ===
                                    'video/h264')
                        ) {
                            for (const encoding of sendingRtpParameters.encodings) {
                                encoding.scalabilityMode = 'L1T3';
                            }
                        }
                        this._remoteSdp.send({
                            offerMediaObject,
                            offerRtpParameters: sendingRtpParameters,
                            answerRtpParameters: sendingRemoteRtpParameters,
                            codecOptions,
                        });
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'send() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                        const localId = String(this._nextSendLocalId);
                        this._nextSendLocalId++;
                        // Insert into the map.
                        this._mapSendLocalIdTrack.set(localId, track);
                        return {
                            localId: localId,
                            rtpParameters: sendingRtpParameters,
                        };
                    }
                    async stopSending(localId) {
                        this.assertSendDirection();
                        logger.debug('stopSending() [localId:%s]', localId);
                        const track = this._mapSendLocalIdTrack.get(localId);
                        if (!track) {
                            throw new Error('track not found');
                        }
                        this._mapSendLocalIdTrack.delete(localId);
                        this._sendStream.removeTrack(track);
                        this._pc.addStream(this._sendStream);
                        const offer = await this._pc.createOffer();
                        logger.debug(
                            'stopSending() | calling pc.setLocalDescription() [offer:%o]',
                            offer,
                        );
                        try {
                            await this._pc.setLocalDescription(offer);
                        } catch (error) {
                            // NOTE: If there are no sending tracks, setLocalDescription() will fail with
                            // "Failed to create channels". If so, ignore it.
                            if (this._sendStream.getTracks().length === 0) {
                                logger.warn(
                                    'stopSending() | ignoring expected error due no sending tracks: %s',
                                    error.toString(),
                                );
                                return;
                            }
                            throw error;
                        }
                        if (this._pc.signalingState === 'stable') {
                            return;
                        }
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'stopSending() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                    }
                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    async pauseSending(localId) {
                        // Unimplemented.
                    }
                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    async resumeSending(localId) {
                        // Unimplemented.
                    }
                    async replaceTrack(
                        // eslint-disable-next-line @typescript-eslint/no-unused-vars
                        localId,
                        track,
                    ) {
                        throw new errors_1.UnsupportedError('not implemented');
                    }
                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    async setMaxSpatialLayer(localId, spatialLayer) {
                        throw new errors_1.UnsupportedError('not implemented');
                    }
                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    async setRtpEncodingParameters(localId, params) {
                        throw new errors_1.UnsupportedError('not implemented');
                    }
                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    async getSenderStats(localId) {
                        throw new errors_1.UnsupportedError('not implemented');
                    }
                    async sendDataChannel({
                        ordered,
                        maxPacketLifeTime,
                        maxRetransmits,
                        label,
                        protocol,
                    }) {
                        this.assertSendDirection();
                        const options = {
                            negotiated: true,
                            id: this._nextSendSctpStreamId,
                            ordered,
                            maxPacketLifeTime,
                            maxRetransmitTime: maxPacketLifeTime,
                            maxRetransmits,
                            protocol,
                        };
                        logger.debug('sendDataChannel() [options:%o]', options);
                        const dataChannel = this._pc.createDataChannel(label, options);
                        // Increase next id.
                        this._nextSendSctpStreamId =
                            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;
                        // If this is the first DataChannel we need to create the SDP answer with
                        // m=application section.
                        if (!this._hasDataChannelMediaSection) {
                            const offer = await this._pc.createOffer();
                            const localSdpObject = sdpTransform.parse(offer.sdp);
                            const offerMediaObject = localSdpObject.media.find(
                                (m) => m.type === 'application',
                            );
                            if (!this._transportReady) {
                                await this.setupTransport({
                                    localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                    localSdpObject,
                                });
                            }
                            logger.debug(
                                'sendDataChannel() | calling pc.setLocalDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setLocalDescription(offer);
                            this._remoteSdp.sendSctpAssociation({ offerMediaObject });
                            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setRemoteDescription(answer);
                            this._hasDataChannelMediaSection = true;
                        }
                        const sctpStreamParameters = {
                            streamId: options.id,
                            ordered: options.ordered,
                            maxPacketLifeTime: options.maxPacketLifeTime,
                            maxRetransmits: options.maxRetransmits,
                        };
                        return { dataChannel, sctpStreamParameters };
                    }
                    async receive(optionsList) {
                        this.assertRecvDirection();
                        const results = [];
                        const mapStreamId = new Map();
                        for (const options of optionsList) {
                            const { trackId, kind, rtpParameters } = options;
                            logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
                            const mid = kind;
                            let streamId = options.streamId || rtpParameters.rtcp.cname;
                            // NOTE: In React-Native we cannot reuse the same remote MediaStream for new
                            // remote tracks. This is because react-native-webrtc does not react on new
                            // tracks generated within already existing streams, so force the streamId
                            // to be different. See:
                            // https://github.com/react-native-webrtc/react-native-webrtc/issues/401
                            logger.debug(
                                'receive() | forcing a random remote streamId to avoid well known bug in react-native-webrtc',
                            );
                            streamId += `-hack-${utils.generateRandomNumber()}`;
                            mapStreamId.set(trackId, streamId);
                            this._remoteSdp.receive({
                                mid,
                                kind,
                                offerRtpParameters: rtpParameters,
                                streamId,
                                trackId,
                            });
                        }
                        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'receive() | calling pc.setRemoteDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setRemoteDescription(offer);
                        let answer = await this._pc.createAnswer();
                        const localSdpObject = sdpTransform.parse(answer.sdp);
                        for (const options of optionsList) {
                            const { kind, rtpParameters } = options;
                            const mid = kind;
                            const answerMediaObject = localSdpObject.media.find(
                                (m) => String(m.mid) === mid,
                            );
                            // May need to modify codec parameters in the answer based on codec
                            // parameters in the offer.
                            sdpCommonUtils.applyCodecParameters({
                                offerRtpParameters: rtpParameters,
                                answerMediaObject,
                            });
                        }
                        answer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };
                        if (!this._transportReady) {
                            await this.setupTransport({
                                localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                localSdpObject,
                            });
                        }
                        logger.debug(
                            'receive() | calling pc.setLocalDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setLocalDescription(answer);
                        for (const options of optionsList) {
                            const { kind, trackId, rtpParameters } = options;
                            const localId = trackId;
                            const mid = kind;
                            const streamId = mapStreamId.get(trackId);
                            const stream = this._pc
                                .getRemoteStreams()
                                .find((s) => s.id === streamId);
                            const track = stream.getTrackById(localId);
                            if (!track) {
                                throw new Error('remote track not found');
                            }
                            // Insert into the map.
                            this._mapRecvLocalIdInfo.set(localId, { mid, rtpParameters });
                            results.push({ localId, track });
                        }
                        return results;
                    }
                    async stopReceiving(localIds) {
                        this.assertRecvDirection();
                        for (const localId of localIds) {
                            logger.debug('stopReceiving() [localId:%s]', localId);
                            const { mid, rtpParameters } =
                                this._mapRecvLocalIdInfo.get(localId) || {};
                            // Remove from the map.
                            this._mapRecvLocalIdInfo.delete(localId);
                            this._remoteSdp.planBStopReceiving({
                                mid: mid,
                                offerRtpParameters: rtpParameters,
                            });
                        }
                        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'stopReceiving() | calling pc.setRemoteDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setRemoteDescription(offer);
                        const answer = await this._pc.createAnswer();
                        logger.debug(
                            'stopReceiving() | calling pc.setLocalDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setLocalDescription(answer);
                    }
                    async pauseReceiving(
                        // eslint-disable-next-line @typescript-eslint/no-unused-vars
                        localIds,
                    ) {
                        // Unimplemented.
                    }
                    async resumeReceiving(
                        // eslint-disable-next-line @typescript-eslint/no-unused-vars
                        localIds,
                    ) {
                        // Unimplemented.
                    }
                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    async getReceiverStats(localId) {
                        throw new errors_1.UnsupportedError('not implemented');
                    }
                    async receiveDataChannel({ sctpStreamParameters, label, protocol }) {
                        this.assertRecvDirection();
                        const { streamId, ordered, maxPacketLifeTime, maxRetransmits } =
                            sctpStreamParameters;
                        const options = {
                            negotiated: true,
                            id: streamId,
                            ordered,
                            maxPacketLifeTime,
                            maxRetransmitTime: maxPacketLifeTime,
                            maxRetransmits,
                            protocol,
                        };
                        logger.debug('receiveDataChannel() [options:%o]', options);
                        const dataChannel = this._pc.createDataChannel(label, options);
                        // If this is the first DataChannel we need to create the SDP offer with
                        // m=application section.
                        if (!this._hasDataChannelMediaSection) {
                            this._remoteSdp.receiveSctpAssociation({ oldDataChannelSpec: true });
                            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setRemoteDescription(offer);
                            const answer = await this._pc.createAnswer();
                            if (!this._transportReady) {
                                const localSdpObject = sdpTransform.parse(answer.sdp);
                                await this.setupTransport({
                                    localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                    localSdpObject,
                                });
                            }
                            logger.debug(
                                'receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setLocalDescription(answer);
                            this._hasDataChannelMediaSection = true;
                        }
                        return { dataChannel };
                    }
                    async setupTransport({ localDtlsRole, localSdpObject }) {
                        if (!localSdpObject) {
                            localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
                        }
                        // Get our local DTLS parameters.
                        const dtlsParameters = sdpCommonUtils.extractDtlsParameters({
                            sdpObject: localSdpObject,
                        });
                        // Set our DTLS role.
                        dtlsParameters.role = localDtlsRole;
                        // Update the remote DTLS role in the SDP.
                        this._remoteSdp.updateDtlsRole(
                            localDtlsRole === 'client' ? 'server' : 'client',
                        );
                        // Need to tell the remote transport about our parameters.
                        await new Promise((resolve, reject) => {
                            this.safeEmit('@connect', { dtlsParameters }, resolve, reject);
                        });
                        this._transportReady = true;
                    }
                    assertSendDirection() {
                        if (this._direction !== 'send') {
                            throw new Error(
                                'method can just be called for handlers with "send" direction',
                            );
                        }
                    }
                    assertRecvDirection() {
                        if (this._direction !== 'recv') {
                            throw new Error(
                                'method can just be called for handlers with "recv" direction',
                            );
                        }
                    }
                }
                exports.ReactNative = ReactNative;
            },
            {
                '../Logger': 39,
                '../errors': 44,
                '../ortc': 65,
                '../utils': 68,
                './HandlerInterface': 52,
                './sdp/RemoteSdp': 60,
                './sdp/commonUtils': 61,
                './sdp/planBUtils': 62,
                'sdp-transform': 73,
            },
        ],
        54: [
            function (require, module, exports) {
                'use strict';
                var __createBinding =
                    (this && this.__createBinding) ||
                    (Object.create
                        ? function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              var desc = Object.getOwnPropertyDescriptor(m, k);
                              if (
                                  !desc ||
                                  ('get' in desc
                                      ? !m.__esModule
                                      : desc.writable || desc.configurable)
                              ) {
                                  desc = {
                                      enumerable: true,
                                      get: function () {
                                          return m[k];
                                      },
                                  };
                              }
                              Object.defineProperty(o, k2, desc);
                          }
                        : function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              o[k2] = m[k];
                          });
                var __setModuleDefault =
                    (this && this.__setModuleDefault) ||
                    (Object.create
                        ? function (o, v) {
                              Object.defineProperty(o, 'default', { enumerable: true, value: v });
                          }
                        : function (o, v) {
                              o['default'] = v;
                          });
                var __importStar =
                    (this && this.__importStar) ||
                    function (mod) {
                        if (mod && mod.__esModule) return mod;
                        var result = {};
                        if (mod != null)
                            for (var k in mod)
                                if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
                                    __createBinding(result, mod, k);
                        __setModuleDefault(result, mod);
                        return result;
                    };
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.ReactNativeUnifiedPlan = void 0;
                const sdpTransform = __importStar(require('sdp-transform'));
                const Logger_1 = require('../Logger');
                const utils = __importStar(require('../utils'));
                const ortc = __importStar(require('../ortc'));
                const sdpCommonUtils = __importStar(require('./sdp/commonUtils'));
                const sdpUnifiedPlanUtils = __importStar(require('./sdp/unifiedPlanUtils'));
                const ortcUtils = __importStar(require('./ortc/utils'));
                const errors_1 = require('../errors');
                const HandlerInterface_1 = require('./HandlerInterface');
                const RemoteSdp_1 = require('./sdp/RemoteSdp');
                const scalabilityModes_1 = require('../scalabilityModes');
                const logger = new Logger_1.Logger('ReactNativeUnifiedPlan');
                const SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };
                class ReactNativeUnifiedPlan extends HandlerInterface_1.HandlerInterface {
                    /**
                     * Creates a factory function.
                     */
                    static createFactory() {
                        return () => new ReactNativeUnifiedPlan();
                    }
                    constructor() {
                        super();
                        // Closed flag.
                        this._closed = false;
                        // Map of RTCTransceivers indexed by MID.
                        this._mapMidTransceiver = new Map();
                        // Local stream for sending.
                        this._sendStream = new MediaStream();
                        // Whether a DataChannel m=application section has been created.
                        this._hasDataChannelMediaSection = false;
                        // Sending DataChannel id value counter. Incremented for each new DataChannel.
                        this._nextSendSctpStreamId = 0;
                        // Got transport local and remote parameters.
                        this._transportReady = false;
                    }
                    get name() {
                        return 'ReactNativeUnifiedPlan';
                    }
                    close() {
                        logger.debug('close()');
                        if (this._closed) {
                            return;
                        }
                        this._closed = true;
                        // Free/dispose native MediaStream but DO NOT free/dispose native
                        // MediaStreamTracks (that is parent's business).
                        // @ts-ignore (proprietary API in react-native-webrtc).
                        this._sendStream.release(/* releaseTracks */ false);
                        // Close RTCPeerConnection.
                        if (this._pc) {
                            try {
                                this._pc.close();
                            } catch (error) {}
                        }
                        this.emit('@close');
                    }
                    async getNativeRtpCapabilities() {
                        logger.debug('getNativeRtpCapabilities()');
                        const pc = new RTCPeerConnection({
                            iceServers: [],
                            iceTransportPolicy: 'all',
                            bundlePolicy: 'max-bundle',
                            rtcpMuxPolicy: 'require',
                            sdpSemantics: 'unified-plan',
                        });
                        try {
                            pc.addTransceiver('audio');
                            pc.addTransceiver('video');
                            const offer = await pc.createOffer();
                            try {
                                pc.close();
                            } catch (error) {}
                            const sdpObject = sdpTransform.parse(offer.sdp);
                            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({
                                sdpObject,
                            });
                            // libwebrtc supports NACK for OPUS but doesn't announce it.
                            ortcUtils.addNackSuppportForOpus(nativeRtpCapabilities);
                            return nativeRtpCapabilities;
                        } catch (error) {
                            try {
                                pc.close();
                            } catch (error2) {}
                            throw error;
                        }
                    }
                    async getNativeSctpCapabilities() {
                        logger.debug('getNativeSctpCapabilities()');
                        return {
                            numStreams: SCTP_NUM_STREAMS,
                        };
                    }
                    run({
                        direction,
                        iceParameters,
                        iceCandidates,
                        dtlsParameters,
                        sctpParameters,
                        iceServers,
                        iceTransportPolicy,
                        additionalSettings,
                        proprietaryConstraints,
                        extendedRtpCapabilities,
                    }) {
                        this.assertNotClosed();
                        logger.debug('run()');
                        this._direction = direction;
                        this._remoteSdp = new RemoteSdp_1.RemoteSdp({
                            iceParameters,
                            iceCandidates,
                            dtlsParameters,
                            sctpParameters,
                        });
                        this._sendingRtpParametersByKind = {
                            audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
                            video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities),
                        };
                        this._sendingRemoteRtpParametersByKind = {
                            audio: ortc.getSendingRemoteRtpParameters(
                                'audio',
                                extendedRtpCapabilities,
                            ),
                            video: ortc.getSendingRemoteRtpParameters(
                                'video',
                                extendedRtpCapabilities,
                            ),
                        };
                        if (dtlsParameters.role && dtlsParameters.role !== 'auto') {
                            this._forcedLocalDtlsRole =
                                dtlsParameters.role === 'server' ? 'client' : 'server';
                        }
                        this._pc = new RTCPeerConnection(
                            {
                                iceServers: iceServers || [],
                                iceTransportPolicy: iceTransportPolicy || 'all',
                                bundlePolicy: 'max-bundle',
                                rtcpMuxPolicy: 'require',
                                sdpSemantics: 'unified-plan',
                                ...additionalSettings,
                            },
                            proprietaryConstraints,
                        );
                        this._pc.addEventListener('icegatheringstatechange', () => {
                            this.emit('@icegatheringstatechange', this._pc.iceGatheringState);
                        });
                        if (this._pc.connectionState) {
                            this._pc.addEventListener('connectionstatechange', () => {
                                this.emit('@connectionstatechange', this._pc.connectionState);
                            });
                        } else {
                            this._pc.addEventListener('iceconnectionstatechange', () => {
                                logger.warn(
                                    'run() | pc.connectionState not supported, using pc.iceConnectionState',
                                );
                                switch (this._pc.iceConnectionState) {
                                    case 'checking':
                                        this.emit('@connectionstatechange', 'connecting');
                                        break;
                                    case 'connected':
                                    case 'completed':
                                        this.emit('@connectionstatechange', 'connected');
                                        break;
                                    case 'failed':
                                        this.emit('@connectionstatechange', 'failed');
                                        break;
                                    case 'disconnected':
                                        this.emit('@connectionstatechange', 'disconnected');
                                        break;
                                    case 'closed':
                                        this.emit('@connectionstatechange', 'closed');
                                        break;
                                }
                            });
                        }
                    }
                    async updateIceServers(iceServers) {
                        this.assertNotClosed();
                        logger.debug('updateIceServers()');
                        const configuration = this._pc.getConfiguration();
                        configuration.iceServers = iceServers;
                        this._pc.setConfiguration(configuration);
                    }
                    async restartIce(iceParameters) {
                        this.assertNotClosed();
                        logger.debug('restartIce()');
                        // Provide the remote SDP handler with new remote ICE parameters.
                        this._remoteSdp.updateIceParameters(iceParameters);
                        if (!this._transportReady) {
                            return;
                        }
                        if (this._direction === 'send') {
                            const offer = await this._pc.createOffer({ iceRestart: true });
                            logger.debug(
                                'restartIce() | calling pc.setLocalDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setLocalDescription(offer);
                            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'restartIce() | calling pc.setRemoteDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setRemoteDescription(answer);
                        } else {
                            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'restartIce() | calling pc.setRemoteDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setRemoteDescription(offer);
                            const answer = await this._pc.createAnswer();
                            logger.debug(
                                'restartIce() | calling pc.setLocalDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setLocalDescription(answer);
                        }
                    }
                    async getTransportStats() {
                        this.assertNotClosed();
                        return this._pc.getStats();
                    }
                    async send({ track, encodings, codecOptions, codec }) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
                        if (encodings && encodings.length > 1) {
                            encodings.forEach((encoding, idx) => {
                                encoding.rid = `r${idx}`;
                            });
                        }
                        const sendingRtpParameters = utils.clone(
                            this._sendingRtpParametersByKind[track.kind],
                            {},
                        );
                        // This may throw.
                        sendingRtpParameters.codecs = ortc.reduceCodecs(
                            sendingRtpParameters.codecs,
                            codec,
                        );
                        const sendingRemoteRtpParameters = utils.clone(
                            this._sendingRemoteRtpParametersByKind[track.kind],
                            {},
                        );
                        // This may throw.
                        sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(
                            sendingRemoteRtpParameters.codecs,
                            codec,
                        );
                        const mediaSectionIdx = this._remoteSdp.getNextMediaSectionIdx();
                        const transceiver = this._pc.addTransceiver(track, {
                            direction: 'sendonly',
                            streams: [this._sendStream],
                            sendEncodings: encodings,
                        });
                        let offer = await this._pc.createOffer();
                        let localSdpObject = sdpTransform.parse(offer.sdp);
                        let offerMediaObject;
                        if (!this._transportReady) {
                            await this.setupTransport({
                                localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                localSdpObject,
                            });
                        }
                        // Special case for VP9 with SVC.
                        let hackVp9Svc = false;
                        const layers = (0, scalabilityModes_1.parse)(
                            (encodings || [{}])[0].scalabilityMode,
                        );
                        if (
                            encodings &&
                            encodings.length === 1 &&
                            layers.spatialLayers > 1 &&
                            sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp9'
                        ) {
                            logger.debug('send() | enabling legacy simulcast for VP9 SVC');
                            hackVp9Svc = true;
                            localSdpObject = sdpTransform.parse(offer.sdp);
                            offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];
                            sdpUnifiedPlanUtils.addLegacySimulcast({
                                offerMediaObject,
                                numStreams: layers.spatialLayers,
                            });
                            offer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };
                        }
                        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);
                        await this._pc.setLocalDescription(offer);
                        // We can now get the transceiver.mid.
                        // NOTE: We cannot read generated MID on iOS react-native-webrtc 111.0.0
                        // because transceiver.mid is not available until setRemoteDescription()
                        // is called, so this is best effort.
                        // Issue: https://github.com/react-native-webrtc/react-native-webrtc/issues/1404
                        // NOTE: So let's fill MID in sendingRtpParameters later.
                        // NOTE: This is fixed in react-native-webrtc 111.0.3.
                        let localId = transceiver.mid ?? undefined;
                        if (!localId) {
                            logger.warn(
                                'send() | missing transceiver.mid (bug in react-native-webrtc, using a workaround',
                            );
                        }
                        // Set MID.
                        // NOTE: As per above, it could be unset yet.
                        sendingRtpParameters.mid = localId;
                        localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
                        offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];
                        // Set RTCP CNAME.
                        sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({
                            offerMediaObject,
                        });
                        // Set RTP encodings by parsing the SDP offer if no encodings are given.
                        if (!encodings) {
                            sendingRtpParameters.encodings = sdpUnifiedPlanUtils.getRtpEncodings({
                                offerMediaObject,
                            });
                        }
                        // Set RTP encodings by parsing the SDP offer and complete them with given
                        // one if just a single encoding has been given.
                        else if (encodings.length === 1) {
                            let newEncodings = sdpUnifiedPlanUtils.getRtpEncodings({
                                offerMediaObject,
                            });
                            Object.assign(newEncodings[0], encodings[0]);
                            // Hack for VP9 SVC.
                            if (hackVp9Svc) {
                                newEncodings = [newEncodings[0]];
                            }
                            sendingRtpParameters.encodings = newEncodings;
                        }
                        // Otherwise if more than 1 encoding are given use them verbatim.
                        else {
                            sendingRtpParameters.encodings = encodings;
                        }
                        // If VP8 or H264 and there is effective simulcast, add scalabilityMode to
                        // each encoding.
                        if (
                            sendingRtpParameters.encodings.length > 1 &&
                            (sendingRtpParameters.codecs[0].mimeType.toLowerCase() ===
                                'video/vp8' ||
                                sendingRtpParameters.codecs[0].mimeType.toLowerCase() ===
                                    'video/h264')
                        ) {
                            for (const encoding of sendingRtpParameters.encodings) {
                                if (encoding.scalabilityMode) {
                                    encoding.scalabilityMode = `L1T${layers.temporalLayers}`;
                                } else {
                                    encoding.scalabilityMode = 'L1T3';
                                }
                            }
                        }
                        this._remoteSdp.send({
                            offerMediaObject,
                            reuseMid: mediaSectionIdx.reuseMid,
                            offerRtpParameters: sendingRtpParameters,
                            answerRtpParameters: sendingRemoteRtpParameters,
                            codecOptions,
                            extmapAllowMixed: true,
                        });
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'send() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                        // Follow up of iOS react-native-webrtc 111.0.0 issue told above. Now yes,
                        // we can read generated MID (if not done above) and fill sendingRtpParameters.
                        // NOTE: This is fixed in react-native-webrtc 111.0.3 so this block isn't
                        // needed starting from that version.
                        if (!localId) {
                            localId = transceiver.mid;
                            sendingRtpParameters.mid = localId;
                        }
                        // Store in the map.
                        this._mapMidTransceiver.set(localId, transceiver);
                        return {
                            localId,
                            rtpParameters: sendingRtpParameters,
                            rtpSender: transceiver.sender,
                        };
                    }
                    async stopSending(localId) {
                        this.assertSendDirection();
                        if (this._closed) {
                            return;
                        }
                        logger.debug('stopSending() [localId:%s]', localId);
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        transceiver.sender.replaceTrack(null);
                        this._pc.removeTrack(transceiver.sender);
                        const mediaSectionClosed = this._remoteSdp.closeMediaSection(
                            transceiver.mid,
                        );
                        if (mediaSectionClosed) {
                            try {
                                transceiver.stop();
                            } catch (error) {}
                        }
                        const offer = await this._pc.createOffer();
                        logger.debug(
                            'stopSending() | calling pc.setLocalDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setLocalDescription(offer);
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'stopSending() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                        this._mapMidTransceiver.delete(localId);
                    }
                    async pauseSending(localId) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        logger.debug('pauseSending() [localId:%s]', localId);
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        transceiver.direction = 'inactive';
                        this._remoteSdp.pauseMediaSection(localId);
                        const offer = await this._pc.createOffer();
                        logger.debug(
                            'pauseSending() | calling pc.setLocalDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setLocalDescription(offer);
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'pauseSending() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                    }
                    async resumeSending(localId) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        logger.debug('resumeSending() [localId:%s]', localId);
                        const transceiver = this._mapMidTransceiver.get(localId);
                        this._remoteSdp.resumeSendingMediaSection(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        transceiver.direction = 'sendonly';
                        const offer = await this._pc.createOffer();
                        logger.debug(
                            'resumeSending() | calling pc.setLocalDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setLocalDescription(offer);
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'resumeSending() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                    }
                    async replaceTrack(localId, track) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        if (track) {
                            logger.debug(
                                'replaceTrack() [localId:%s, track.id:%s]',
                                localId,
                                track.id,
                            );
                        } else {
                            logger.debug('replaceTrack() [localId:%s, no track]', localId);
                        }
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        await transceiver.sender.replaceTrack(track);
                    }
                    async setMaxSpatialLayer(localId, spatialLayer) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        logger.debug(
                            'setMaxSpatialLayer() [localId:%s, spatialLayer:%s]',
                            localId,
                            spatialLayer,
                        );
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        const parameters = transceiver.sender.getParameters();
                        parameters.encodings.forEach((encoding, idx) => {
                            if (idx <= spatialLayer) {
                                encoding.active = true;
                            } else {
                                encoding.active = false;
                            }
                        });
                        await transceiver.sender.setParameters(parameters);
                        this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);
                        const offer = await this._pc.createOffer();
                        logger.debug(
                            'setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setLocalDescription(offer);
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                    }
                    async setRtpEncodingParameters(localId, params) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        logger.debug(
                            'setRtpEncodingParameters() [localId:%s, params:%o]',
                            localId,
                            params,
                        );
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        const parameters = transceiver.sender.getParameters();
                        parameters.encodings.forEach((encoding, idx) => {
                            parameters.encodings[idx] = { ...encoding, ...params };
                        });
                        await transceiver.sender.setParameters(parameters);
                        this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);
                        const offer = await this._pc.createOffer();
                        logger.debug(
                            'setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setLocalDescription(offer);
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                    }
                    async getSenderStats(localId) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        return transceiver.sender.getStats();
                    }
                    async sendDataChannel({
                        ordered,
                        maxPacketLifeTime,
                        maxRetransmits,
                        label,
                        protocol,
                    }) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        const options = {
                            negotiated: true,
                            id: this._nextSendSctpStreamId,
                            ordered,
                            maxPacketLifeTime,
                            maxRetransmits,
                            protocol,
                        };
                        logger.debug('sendDataChannel() [options:%o]', options);
                        const dataChannel = this._pc.createDataChannel(label, options);
                        // Increase next id.
                        this._nextSendSctpStreamId =
                            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;
                        // If this is the first DataChannel we need to create the SDP answer with
                        // m=application section.
                        if (!this._hasDataChannelMediaSection) {
                            const offer = await this._pc.createOffer();
                            const localSdpObject = sdpTransform.parse(offer.sdp);
                            const offerMediaObject = localSdpObject.media.find(
                                (m) => m.type === 'application',
                            );
                            if (!this._transportReady) {
                                await this.setupTransport({
                                    localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                    localSdpObject,
                                });
                            }
                            logger.debug(
                                'sendDataChannel() | calling pc.setLocalDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setLocalDescription(offer);
                            this._remoteSdp.sendSctpAssociation({ offerMediaObject });
                            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setRemoteDescription(answer);
                            this._hasDataChannelMediaSection = true;
                        }
                        const sctpStreamParameters = {
                            streamId: options.id,
                            ordered: options.ordered,
                            maxPacketLifeTime: options.maxPacketLifeTime,
                            maxRetransmits: options.maxRetransmits,
                        };
                        return { dataChannel, sctpStreamParameters };
                    }
                    async receive(optionsList) {
                        this.assertNotClosed();
                        this.assertRecvDirection();
                        const results = [];
                        const mapLocalId = new Map();
                        for (const options of optionsList) {
                            const { trackId, kind, rtpParameters, streamId } = options;
                            logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
                            const localId =
                                rtpParameters.mid || String(this._mapMidTransceiver.size);
                            mapLocalId.set(trackId, localId);
                            this._remoteSdp.receive({
                                mid: localId,
                                kind,
                                offerRtpParameters: rtpParameters,
                                streamId: streamId || rtpParameters.rtcp.cname,
                                trackId,
                            });
                        }
                        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'receive() | calling pc.setRemoteDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setRemoteDescription(offer);
                        let answer = await this._pc.createAnswer();
                        const localSdpObject = sdpTransform.parse(answer.sdp);
                        for (const options of optionsList) {
                            const { trackId, rtpParameters } = options;
                            const localId = mapLocalId.get(trackId);
                            const answerMediaObject = localSdpObject.media.find(
                                (m) => String(m.mid) === localId,
                            );
                            // May need to modify codec parameters in the answer based on codec
                            // parameters in the offer.
                            sdpCommonUtils.applyCodecParameters({
                                offerRtpParameters: rtpParameters,
                                answerMediaObject,
                            });
                        }
                        answer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };
                        if (!this._transportReady) {
                            await this.setupTransport({
                                localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                localSdpObject,
                            });
                        }
                        logger.debug(
                            'receive() | calling pc.setLocalDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setLocalDescription(answer);
                        for (const options of optionsList) {
                            const { trackId } = options;
                            const localId = mapLocalId.get(trackId);
                            const transceiver = this._pc
                                .getTransceivers()
                                .find((t) => t.mid === localId);
                            if (!transceiver) {
                                throw new Error('new RTCRtpTransceiver not found');
                            } else {
                                // Store in the map.
                                this._mapMidTransceiver.set(localId, transceiver);
                                results.push({
                                    localId,
                                    track: transceiver.receiver.track,
                                    rtpReceiver: transceiver.receiver,
                                });
                            }
                        }
                        return results;
                    }
                    async stopReceiving(localIds) {
                        this.assertRecvDirection();
                        if (this._closed) {
                            return;
                        }
                        for (const localId of localIds) {
                            logger.debug('stopReceiving() [localId:%s]', localId);
                            const transceiver = this._mapMidTransceiver.get(localId);
                            if (!transceiver) {
                                throw new Error('associated RTCRtpTransceiver not found');
                            }
                            this._remoteSdp.closeMediaSection(transceiver.mid);
                        }
                        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'stopReceiving() | calling pc.setRemoteDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setRemoteDescription(offer);
                        const answer = await this._pc.createAnswer();
                        logger.debug(
                            'stopReceiving() | calling pc.setLocalDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setLocalDescription(answer);
                        for (const localId of localIds) {
                            this._mapMidTransceiver.delete(localId);
                        }
                    }
                    async pauseReceiving(localIds) {
                        this.assertNotClosed();
                        this.assertRecvDirection();
                        for (const localId of localIds) {
                            logger.debug('pauseReceiving() [localId:%s]', localId);
                            const transceiver = this._mapMidTransceiver.get(localId);
                            if (!transceiver) {
                                throw new Error('associated RTCRtpTransceiver not found');
                            }
                            transceiver.direction = 'inactive';
                            this._remoteSdp.pauseMediaSection(localId);
                        }
                        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setRemoteDescription(offer);
                        const answer = await this._pc.createAnswer();
                        logger.debug(
                            'pauseReceiving() | calling pc.setLocalDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setLocalDescription(answer);
                    }
                    async resumeReceiving(localIds) {
                        this.assertNotClosed();
                        this.assertRecvDirection();
                        for (const localId of localIds) {
                            logger.debug('resumeReceiving() [localId:%s]', localId);
                            const transceiver = this._mapMidTransceiver.get(localId);
                            if (!transceiver) {
                                throw new Error('associated RTCRtpTransceiver not found');
                            }
                            transceiver.direction = 'recvonly';
                            this._remoteSdp.resumeReceivingMediaSection(localId);
                        }
                        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setRemoteDescription(offer);
                        const answer = await this._pc.createAnswer();
                        logger.debug(
                            'resumeReceiving() | calling pc.setLocalDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setLocalDescription(answer);
                    }
                    async getReceiverStats(localId) {
                        this.assertNotClosed();
                        this.assertRecvDirection();
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        return transceiver.receiver.getStats();
                    }
                    async receiveDataChannel({ sctpStreamParameters, label, protocol }) {
                        this.assertNotClosed();
                        this.assertRecvDirection();
                        const { streamId, ordered, maxPacketLifeTime, maxRetransmits } =
                            sctpStreamParameters;
                        const options = {
                            negotiated: true,
                            id: streamId,
                            ordered,
                            maxPacketLifeTime,
                            maxRetransmits,
                            protocol,
                        };
                        logger.debug('receiveDataChannel() [options:%o]', options);
                        const dataChannel = this._pc.createDataChannel(label, options);
                        // If this is the first DataChannel we need to create the SDP offer with
                        // m=application section.
                        if (!this._hasDataChannelMediaSection) {
                            this._remoteSdp.receiveSctpAssociation();
                            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setRemoteDescription(offer);
                            const answer = await this._pc.createAnswer();
                            if (!this._transportReady) {
                                const localSdpObject = sdpTransform.parse(answer.sdp);
                                await this.setupTransport({
                                    localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                    localSdpObject,
                                });
                            }
                            logger.debug(
                                'receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setLocalDescription(answer);
                            this._hasDataChannelMediaSection = true;
                        }
                        return { dataChannel };
                    }
                    async setupTransport({ localDtlsRole, localSdpObject }) {
                        if (!localSdpObject) {
                            localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
                        }
                        // Get our local DTLS parameters.
                        const dtlsParameters = sdpCommonUtils.extractDtlsParameters({
                            sdpObject: localSdpObject,
                        });
                        // Set our DTLS role.
                        dtlsParameters.role = localDtlsRole;
                        // Update the remote DTLS role in the SDP.
                        this._remoteSdp.updateDtlsRole(
                            localDtlsRole === 'client' ? 'server' : 'client',
                        );
                        // Need to tell the remote transport about our parameters.
                        await new Promise((resolve, reject) => {
                            this.safeEmit('@connect', { dtlsParameters }, resolve, reject);
                        });
                        this._transportReady = true;
                    }
                    assertNotClosed() {
                        if (this._closed) {
                            throw new errors_1.InvalidStateError(
                                'method called in a closed handler',
                            );
                        }
                    }
                    assertSendDirection() {
                        if (this._direction !== 'send') {
                            throw new Error(
                                'method can just be called for handlers with "send" direction',
                            );
                        }
                    }
                    assertRecvDirection() {
                        if (this._direction !== 'recv') {
                            throw new Error(
                                'method can just be called for handlers with "recv" direction',
                            );
                        }
                    }
                }
                exports.ReactNativeUnifiedPlan = ReactNativeUnifiedPlan;
            },
            {
                '../Logger': 39,
                '../errors': 44,
                '../ortc': 65,
                '../scalabilityModes': 66,
                '../utils': 68,
                './HandlerInterface': 52,
                './ortc/utils': 58,
                './sdp/RemoteSdp': 60,
                './sdp/commonUtils': 61,
                './sdp/unifiedPlanUtils': 63,
                'sdp-transform': 73,
            },
        ],
        55: [
            function (require, module, exports) {
                'use strict';
                var __createBinding =
                    (this && this.__createBinding) ||
                    (Object.create
                        ? function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              var desc = Object.getOwnPropertyDescriptor(m, k);
                              if (
                                  !desc ||
                                  ('get' in desc
                                      ? !m.__esModule
                                      : desc.writable || desc.configurable)
                              ) {
                                  desc = {
                                      enumerable: true,
                                      get: function () {
                                          return m[k];
                                      },
                                  };
                              }
                              Object.defineProperty(o, k2, desc);
                          }
                        : function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              o[k2] = m[k];
                          });
                var __setModuleDefault =
                    (this && this.__setModuleDefault) ||
                    (Object.create
                        ? function (o, v) {
                              Object.defineProperty(o, 'default', { enumerable: true, value: v });
                          }
                        : function (o, v) {
                              o['default'] = v;
                          });
                var __importStar =
                    (this && this.__importStar) ||
                    function (mod) {
                        if (mod && mod.__esModule) return mod;
                        var result = {};
                        if (mod != null)
                            for (var k in mod)
                                if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
                                    __createBinding(result, mod, k);
                        __setModuleDefault(result, mod);
                        return result;
                    };
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.Safari11 = void 0;
                const sdpTransform = __importStar(require('sdp-transform'));
                const Logger_1 = require('../Logger');
                const utils = __importStar(require('../utils'));
                const ortc = __importStar(require('../ortc'));
                const sdpCommonUtils = __importStar(require('./sdp/commonUtils'));
                const sdpPlanBUtils = __importStar(require('./sdp/planBUtils'));
                const HandlerInterface_1 = require('./HandlerInterface');
                const RemoteSdp_1 = require('./sdp/RemoteSdp');
                const logger = new Logger_1.Logger('Safari11');
                const SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };
                class Safari11 extends HandlerInterface_1.HandlerInterface {
                    /**
                     * Creates a factory function.
                     */
                    static createFactory() {
                        return () => new Safari11();
                    }
                    constructor() {
                        super();
                        // Local stream for sending.
                        this._sendStream = new MediaStream();
                        // Map of RTCRtpSender indexed by localId.
                        this._mapSendLocalIdRtpSender = new Map();
                        // Next sending localId.
                        this._nextSendLocalId = 0;
                        // Map of MID, RTP parameters and RTCRtpReceiver indexed by local id.
                        // Value is an Object with mid, rtpParameters and rtpReceiver.
                        this._mapRecvLocalIdInfo = new Map();
                        // Whether a DataChannel m=application section has been created.
                        this._hasDataChannelMediaSection = false;
                        // Sending DataChannel id value counter. Incremented for each new DataChannel.
                        this._nextSendSctpStreamId = 0;
                        // Got transport local and remote parameters.
                        this._transportReady = false;
                    }
                    get name() {
                        return 'Safari11';
                    }
                    close() {
                        logger.debug('close()');
                        // Close RTCPeerConnection.
                        if (this._pc) {
                            try {
                                this._pc.close();
                            } catch (error) {}
                        }
                        this.emit('@close');
                    }
                    async getNativeRtpCapabilities() {
                        logger.debug('getNativeRtpCapabilities()');
                        const pc = new RTCPeerConnection({
                            iceServers: [],
                            iceTransportPolicy: 'all',
                            bundlePolicy: 'max-bundle',
                            rtcpMuxPolicy: 'require',
                            sdpSemantics: 'plan-b',
                        });
                        try {
                            const offer = await pc.createOffer({
                                offerToReceiveAudio: true,
                                offerToReceiveVideo: true,
                            });
                            try {
                                pc.close();
                            } catch (error) {}
                            const sdpObject = sdpTransform.parse(offer.sdp);
                            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({
                                sdpObject,
                            });
                            return nativeRtpCapabilities;
                        } catch (error) {
                            try {
                                pc.close();
                            } catch (error2) {}
                            throw error;
                        }
                    }
                    async getNativeSctpCapabilities() {
                        logger.debug('getNativeSctpCapabilities()');
                        return {
                            numStreams: SCTP_NUM_STREAMS,
                        };
                    }
                    run({
                        direction,
                        iceParameters,
                        iceCandidates,
                        dtlsParameters,
                        sctpParameters,
                        iceServers,
                        iceTransportPolicy,
                        additionalSettings,
                        proprietaryConstraints,
                        extendedRtpCapabilities,
                    }) {
                        logger.debug('run()');
                        this._direction = direction;
                        this._remoteSdp = new RemoteSdp_1.RemoteSdp({
                            iceParameters,
                            iceCandidates,
                            dtlsParameters,
                            sctpParameters,
                            planB: true,
                        });
                        this._sendingRtpParametersByKind = {
                            audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
                            video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities),
                        };
                        this._sendingRemoteRtpParametersByKind = {
                            audio: ortc.getSendingRemoteRtpParameters(
                                'audio',
                                extendedRtpCapabilities,
                            ),
                            video: ortc.getSendingRemoteRtpParameters(
                                'video',
                                extendedRtpCapabilities,
                            ),
                        };
                        if (dtlsParameters.role && dtlsParameters.role !== 'auto') {
                            this._forcedLocalDtlsRole =
                                dtlsParameters.role === 'server' ? 'client' : 'server';
                        }
                        this._pc = new RTCPeerConnection(
                            {
                                iceServers: iceServers || [],
                                iceTransportPolicy: iceTransportPolicy || 'all',
                                bundlePolicy: 'max-bundle',
                                rtcpMuxPolicy: 'require',
                                ...additionalSettings,
                            },
                            proprietaryConstraints,
                        );
                        this._pc.addEventListener('icegatheringstatechange', () => {
                            this.emit('@icegatheringstatechange', this._pc.iceGatheringState);
                        });
                        if (this._pc.connectionState) {
                            this._pc.addEventListener('connectionstatechange', () => {
                                this.emit('@connectionstatechange', this._pc.connectionState);
                            });
                        } else {
                            this._pc.addEventListener('iceconnectionstatechange', () => {
                                logger.warn(
                                    'run() | pc.connectionState not supported, using pc.iceConnectionState',
                                );
                                switch (this._pc.iceConnectionState) {
                                    case 'checking':
                                        this.emit('@connectionstatechange', 'connecting');
                                        break;
                                    case 'connected':
                                    case 'completed':
                                        this.emit('@connectionstatechange', 'connected');
                                        break;
                                    case 'failed':
                                        this.emit('@connectionstatechange', 'failed');
                                        break;
                                    case 'disconnected':
                                        this.emit('@connectionstatechange', 'disconnected');
                                        break;
                                    case 'closed':
                                        this.emit('@connectionstatechange', 'closed');
                                        break;
                                }
                            });
                        }
                    }
                    async updateIceServers(iceServers) {
                        logger.debug('updateIceServers()');
                        const configuration = this._pc.getConfiguration();
                        configuration.iceServers = iceServers;
                        this._pc.setConfiguration(configuration);
                    }
                    async restartIce(iceParameters) {
                        logger.debug('restartIce()');
                        // Provide the remote SDP handler with new remote ICE parameters.
                        this._remoteSdp.updateIceParameters(iceParameters);
                        if (!this._transportReady) {
                            return;
                        }
                        if (this._direction === 'send') {
                            const offer = await this._pc.createOffer({ iceRestart: true });
                            logger.debug(
                                'restartIce() | calling pc.setLocalDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setLocalDescription(offer);
                            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'restartIce() | calling pc.setRemoteDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setRemoteDescription(answer);
                        } else {
                            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'restartIce() | calling pc.setRemoteDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setRemoteDescription(offer);
                            const answer = await this._pc.createAnswer();
                            logger.debug(
                                'restartIce() | calling pc.setLocalDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setLocalDescription(answer);
                        }
                    }
                    async getTransportStats() {
                        return this._pc.getStats();
                    }
                    async send({ track, encodings, codecOptions, codec }) {
                        this.assertSendDirection();
                        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
                        if (codec) {
                            logger.warn(
                                'send() | codec selection is not available in %s handler',
                                this.name,
                            );
                        }
                        this._sendStream.addTrack(track);
                        this._pc.addTrack(track, this._sendStream);
                        let offer = await this._pc.createOffer();
                        let localSdpObject = sdpTransform.parse(offer.sdp);
                        let offerMediaObject;
                        const sendingRtpParameters = utils.clone(
                            this._sendingRtpParametersByKind[track.kind],
                            {},
                        );
                        sendingRtpParameters.codecs = ortc.reduceCodecs(
                            sendingRtpParameters.codecs,
                        );
                        const sendingRemoteRtpParameters = utils.clone(
                            this._sendingRemoteRtpParametersByKind[track.kind],
                            {},
                        );
                        sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(
                            sendingRemoteRtpParameters.codecs,
                        );
                        if (!this._transportReady) {
                            await this.setupTransport({
                                localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                localSdpObject,
                            });
                        }
                        if (track.kind === 'video' && encodings && encodings.length > 1) {
                            logger.debug('send() | enabling simulcast');
                            localSdpObject = sdpTransform.parse(offer.sdp);
                            offerMediaObject = localSdpObject.media.find((m) => m.type === 'video');
                            sdpPlanBUtils.addLegacySimulcast({
                                offerMediaObject,
                                track,
                                numStreams: encodings.length,
                            });
                            offer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };
                        }
                        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);
                        await this._pc.setLocalDescription(offer);
                        localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
                        offerMediaObject = localSdpObject.media.find((m) => m.type === track.kind);
                        // Set RTCP CNAME.
                        sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({
                            offerMediaObject,
                        });
                        // Set RTP encodings.
                        sendingRtpParameters.encodings = sdpPlanBUtils.getRtpEncodings({
                            offerMediaObject,
                            track,
                        });
                        // Complete encodings with given values.
                        if (encodings) {
                            for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {
                                if (encodings[idx]) {
                                    Object.assign(
                                        sendingRtpParameters.encodings[idx],
                                        encodings[idx],
                                    );
                                }
                            }
                        }
                        // If VP8 and there is effective simulcast, add scalabilityMode to each
                        // encoding.
                        if (
                            sendingRtpParameters.encodings.length > 1 &&
                            sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8'
                        ) {
                            for (const encoding of sendingRtpParameters.encodings) {
                                encoding.scalabilityMode = 'L1T3';
                            }
                        }
                        this._remoteSdp.send({
                            offerMediaObject,
                            offerRtpParameters: sendingRtpParameters,
                            answerRtpParameters: sendingRemoteRtpParameters,
                            codecOptions,
                        });
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'send() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                        const localId = String(this._nextSendLocalId);
                        this._nextSendLocalId++;
                        const rtpSender = this._pc.getSenders().find((s) => s.track === track);
                        // Insert into the map.
                        this._mapSendLocalIdRtpSender.set(localId, rtpSender);
                        return {
                            localId: localId,
                            rtpParameters: sendingRtpParameters,
                            rtpSender,
                        };
                    }
                    async stopSending(localId) {
                        this.assertSendDirection();
                        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
                        if (!rtpSender) {
                            throw new Error('associated RTCRtpSender not found');
                        }
                        if (rtpSender.track) {
                            this._sendStream.removeTrack(rtpSender.track);
                        }
                        this._mapSendLocalIdRtpSender.delete(localId);
                        const offer = await this._pc.createOffer();
                        logger.debug(
                            'stopSending() | calling pc.setLocalDescription() [offer:%o]',
                            offer,
                        );
                        try {
                            await this._pc.setLocalDescription(offer);
                        } catch (error) {
                            // NOTE: If there are no sending tracks, setLocalDescription() will fail with
                            // "Failed to create channels". If so, ignore it.
                            if (this._sendStream.getTracks().length === 0) {
                                logger.warn(
                                    'stopSending() | ignoring expected error due no sending tracks: %s',
                                    error.toString(),
                                );
                                return;
                            }
                            throw error;
                        }
                        if (this._pc.signalingState === 'stable') {
                            return;
                        }
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'stopSending() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                    }
                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    async pauseSending(localId) {
                        // Unimplemented.
                    }
                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    async resumeSending(localId) {
                        // Unimplemented.
                    }
                    async replaceTrack(localId, track) {
                        this.assertSendDirection();
                        if (track) {
                            logger.debug(
                                'replaceTrack() [localId:%s, track.id:%s]',
                                localId,
                                track.id,
                            );
                        } else {
                            logger.debug('replaceTrack() [localId:%s, no track]', localId);
                        }
                        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
                        if (!rtpSender) {
                            throw new Error('associated RTCRtpSender not found');
                        }
                        const oldTrack = rtpSender.track;
                        await rtpSender.replaceTrack(track);
                        // Remove the old track from the local stream.
                        if (oldTrack) {
                            this._sendStream.removeTrack(oldTrack);
                        }
                        // Add the new track to the local stream.
                        if (track) {
                            this._sendStream.addTrack(track);
                        }
                    }
                    async setMaxSpatialLayer(localId, spatialLayer) {
                        this.assertSendDirection();
                        logger.debug(
                            'setMaxSpatialLayer() [localId:%s, spatialLayer:%s]',
                            localId,
                            spatialLayer,
                        );
                        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
                        if (!rtpSender) {
                            throw new Error('associated RTCRtpSender not found');
                        }
                        const parameters = rtpSender.getParameters();
                        parameters.encodings.forEach((encoding, idx) => {
                            if (idx <= spatialLayer) {
                                encoding.active = true;
                            } else {
                                encoding.active = false;
                            }
                        });
                        await rtpSender.setParameters(parameters);
                    }
                    async setRtpEncodingParameters(localId, params) {
                        this.assertSendDirection();
                        logger.debug(
                            'setRtpEncodingParameters() [localId:%s, params:%o]',
                            localId,
                            params,
                        );
                        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
                        if (!rtpSender) {
                            throw new Error('associated RTCRtpSender not found');
                        }
                        const parameters = rtpSender.getParameters();
                        parameters.encodings.forEach((encoding, idx) => {
                            parameters.encodings[idx] = { ...encoding, ...params };
                        });
                        await rtpSender.setParameters(parameters);
                    }
                    async getSenderStats(localId) {
                        this.assertSendDirection();
                        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
                        if (!rtpSender) {
                            throw new Error('associated RTCRtpSender not found');
                        }
                        return rtpSender.getStats();
                    }
                    async sendDataChannel({
                        ordered,
                        maxPacketLifeTime,
                        maxRetransmits,
                        label,
                        protocol,
                    }) {
                        this.assertSendDirection();
                        const options = {
                            negotiated: true,
                            id: this._nextSendSctpStreamId,
                            ordered,
                            maxPacketLifeTime,
                            maxRetransmits,
                            protocol,
                        };
                        logger.debug('sendDataChannel() [options:%o]', options);
                        const dataChannel = this._pc.createDataChannel(label, options);
                        // Increase next id.
                        this._nextSendSctpStreamId =
                            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;
                        // If this is the first DataChannel we need to create the SDP answer with
                        // m=application section.
                        if (!this._hasDataChannelMediaSection) {
                            const offer = await this._pc.createOffer();
                            const localSdpObject = sdpTransform.parse(offer.sdp);
                            const offerMediaObject = localSdpObject.media.find(
                                (m) => m.type === 'application',
                            );
                            if (!this._transportReady) {
                                await this.setupTransport({
                                    localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                    localSdpObject,
                                });
                            }
                            logger.debug(
                                'sendDataChannel() | calling pc.setLocalDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setLocalDescription(offer);
                            this._remoteSdp.sendSctpAssociation({ offerMediaObject });
                            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setRemoteDescription(answer);
                            this._hasDataChannelMediaSection = true;
                        }
                        const sctpStreamParameters = {
                            streamId: options.id,
                            ordered: options.ordered,
                            maxPacketLifeTime: options.maxPacketLifeTime,
                            maxRetransmits: options.maxRetransmits,
                        };
                        return { dataChannel, sctpStreamParameters };
                    }
                    async receive(optionsList) {
                        this.assertRecvDirection();
                        const results = [];
                        for (const options of optionsList) {
                            const { trackId, kind, rtpParameters, streamId } = options;
                            logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
                            const mid = kind;
                            this._remoteSdp.receive({
                                mid,
                                kind,
                                offerRtpParameters: rtpParameters,
                                streamId: streamId || rtpParameters.rtcp.cname,
                                trackId,
                            });
                        }
                        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'receive() | calling pc.setRemoteDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setRemoteDescription(offer);
                        let answer = await this._pc.createAnswer();
                        const localSdpObject = sdpTransform.parse(answer.sdp);
                        for (const options of optionsList) {
                            const { kind, rtpParameters } = options;
                            const mid = kind;
                            const answerMediaObject = localSdpObject.media.find(
                                (m) => String(m.mid) === mid,
                            );
                            // May need to modify codec parameters in the answer based on codec
                            // parameters in the offer.
                            sdpCommonUtils.applyCodecParameters({
                                offerRtpParameters: rtpParameters,
                                answerMediaObject,
                            });
                        }
                        answer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };
                        if (!this._transportReady) {
                            await this.setupTransport({
                                localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                localSdpObject,
                            });
                        }
                        logger.debug(
                            'receive() | calling pc.setLocalDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setLocalDescription(answer);
                        for (const options of optionsList) {
                            const { kind, trackId, rtpParameters } = options;
                            const mid = kind;
                            const localId = trackId;
                            const rtpReceiver = this._pc
                                .getReceivers()
                                .find((r) => r.track && r.track.id === localId);
                            if (!rtpReceiver) {
                                throw new Error('new RTCRtpReceiver not');
                            }
                            // Insert into the map.
                            this._mapRecvLocalIdInfo.set(localId, {
                                mid,
                                rtpParameters,
                                rtpReceiver,
                            });
                            results.push({
                                localId,
                                track: rtpReceiver.track,
                                rtpReceiver,
                            });
                        }
                        return results;
                    }
                    async stopReceiving(localIds) {
                        this.assertRecvDirection();
                        for (const localId of localIds) {
                            logger.debug('stopReceiving() [localId:%s]', localId);
                            const { mid, rtpParameters } =
                                this._mapRecvLocalIdInfo.get(localId) || {};
                            // Remove from the map.
                            this._mapRecvLocalIdInfo.delete(localId);
                            this._remoteSdp.planBStopReceiving({
                                mid: mid,
                                offerRtpParameters: rtpParameters,
                            });
                        }
                        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'stopReceiving() | calling pc.setRemoteDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setRemoteDescription(offer);
                        const answer = await this._pc.createAnswer();
                        logger.debug(
                            'stopReceiving() | calling pc.setLocalDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setLocalDescription(answer);
                    }
                    async getReceiverStats(localId) {
                        this.assertRecvDirection();
                        const { rtpReceiver } = this._mapRecvLocalIdInfo.get(localId) || {};
                        if (!rtpReceiver) {
                            throw new Error('associated RTCRtpReceiver not found');
                        }
                        return rtpReceiver.getStats();
                    }
                    async pauseReceiving(
                        // eslint-disable-next-line @typescript-eslint/no-unused-vars
                        localIds,
                    ) {
                        // Unimplemented.
                    }
                    async resumeReceiving(
                        // eslint-disable-next-line @typescript-eslint/no-unused-vars
                        localIds,
                    ) {
                        // Unimplemented.
                    }
                    async receiveDataChannel({ sctpStreamParameters, label, protocol }) {
                        this.assertRecvDirection();
                        const { streamId, ordered, maxPacketLifeTime, maxRetransmits } =
                            sctpStreamParameters;
                        const options = {
                            negotiated: true,
                            id: streamId,
                            ordered,
                            maxPacketLifeTime,
                            maxRetransmits,
                            protocol,
                        };
                        logger.debug('receiveDataChannel() [options:%o]', options);
                        const dataChannel = this._pc.createDataChannel(label, options);
                        // If this is the first DataChannel we need to create the SDP offer with
                        // m=application section.
                        if (!this._hasDataChannelMediaSection) {
                            this._remoteSdp.receiveSctpAssociation({ oldDataChannelSpec: true });
                            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setRemoteDescription(offer);
                            const answer = await this._pc.createAnswer();
                            if (!this._transportReady) {
                                const localSdpObject = sdpTransform.parse(answer.sdp);
                                await this.setupTransport({
                                    localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                    localSdpObject,
                                });
                            }
                            logger.debug(
                                'receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setLocalDescription(answer);
                            this._hasDataChannelMediaSection = true;
                        }
                        return { dataChannel };
                    }
                    async setupTransport({ localDtlsRole, localSdpObject }) {
                        if (!localSdpObject) {
                            localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
                        }
                        // Get our local DTLS parameters.
                        const dtlsParameters = sdpCommonUtils.extractDtlsParameters({
                            sdpObject: localSdpObject,
                        });
                        // Set our DTLS role.
                        dtlsParameters.role = localDtlsRole;
                        // Update the remote DTLS role in the SDP.
                        this._remoteSdp.updateDtlsRole(
                            localDtlsRole === 'client' ? 'server' : 'client',
                        );
                        // Need to tell the remote transport about our parameters.
                        await new Promise((resolve, reject) => {
                            this.safeEmit('@connect', { dtlsParameters }, resolve, reject);
                        });
                        this._transportReady = true;
                    }
                    assertSendDirection() {
                        if (this._direction !== 'send') {
                            throw new Error(
                                'method can just be called for handlers with "send" direction',
                            );
                        }
                    }
                    assertRecvDirection() {
                        if (this._direction !== 'recv') {
                            throw new Error(
                                'method can just be called for handlers with "recv" direction',
                            );
                        }
                    }
                }
                exports.Safari11 = Safari11;
            },
            {
                '../Logger': 39,
                '../ortc': 65,
                '../utils': 68,
                './HandlerInterface': 52,
                './sdp/RemoteSdp': 60,
                './sdp/commonUtils': 61,
                './sdp/planBUtils': 62,
                'sdp-transform': 73,
            },
        ],
        56: [
            function (require, module, exports) {
                'use strict';
                var __createBinding =
                    (this && this.__createBinding) ||
                    (Object.create
                        ? function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              var desc = Object.getOwnPropertyDescriptor(m, k);
                              if (
                                  !desc ||
                                  ('get' in desc
                                      ? !m.__esModule
                                      : desc.writable || desc.configurable)
                              ) {
                                  desc = {
                                      enumerable: true,
                                      get: function () {
                                          return m[k];
                                      },
                                  };
                              }
                              Object.defineProperty(o, k2, desc);
                          }
                        : function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              o[k2] = m[k];
                          });
                var __setModuleDefault =
                    (this && this.__setModuleDefault) ||
                    (Object.create
                        ? function (o, v) {
                              Object.defineProperty(o, 'default', { enumerable: true, value: v });
                          }
                        : function (o, v) {
                              o['default'] = v;
                          });
                var __importStar =
                    (this && this.__importStar) ||
                    function (mod) {
                        if (mod && mod.__esModule) return mod;
                        var result = {};
                        if (mod != null)
                            for (var k in mod)
                                if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
                                    __createBinding(result, mod, k);
                        __setModuleDefault(result, mod);
                        return result;
                    };
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.Safari12 = void 0;
                const sdpTransform = __importStar(require('sdp-transform'));
                const Logger_1 = require('../Logger');
                const utils = __importStar(require('../utils'));
                const ortc = __importStar(require('../ortc'));
                const sdpCommonUtils = __importStar(require('./sdp/commonUtils'));
                const sdpUnifiedPlanUtils = __importStar(require('./sdp/unifiedPlanUtils'));
                const ortcUtils = __importStar(require('./ortc/utils'));
                const errors_1 = require('../errors');
                const HandlerInterface_1 = require('./HandlerInterface');
                const RemoteSdp_1 = require('./sdp/RemoteSdp');
                const scalabilityModes_1 = require('../scalabilityModes');
                const logger = new Logger_1.Logger('Safari12');
                const SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };
                class Safari12 extends HandlerInterface_1.HandlerInterface {
                    /**
                     * Creates a factory function.
                     */
                    static createFactory() {
                        return () => new Safari12();
                    }
                    constructor() {
                        super();
                        // Closed flag.
                        this._closed = false;
                        // Map of RTCTransceivers indexed by MID.
                        this._mapMidTransceiver = new Map();
                        // Local stream for sending.
                        this._sendStream = new MediaStream();
                        // Whether a DataChannel m=application section has been created.
                        this._hasDataChannelMediaSection = false;
                        // Sending DataChannel id value counter. Incremented for each new DataChannel.
                        this._nextSendSctpStreamId = 0;
                        // Got transport local and remote parameters.
                        this._transportReady = false;
                    }
                    get name() {
                        return 'Safari12';
                    }
                    close() {
                        logger.debug('close()');
                        if (this._closed) {
                            return;
                        }
                        this._closed = true;
                        // Close RTCPeerConnection.
                        if (this._pc) {
                            try {
                                this._pc.close();
                            } catch (error) {}
                        }
                        this.emit('@close');
                    }
                    async getNativeRtpCapabilities() {
                        logger.debug('getNativeRtpCapabilities()');
                        const pc = new RTCPeerConnection({
                            iceServers: [],
                            iceTransportPolicy: 'all',
                            bundlePolicy: 'max-bundle',
                            rtcpMuxPolicy: 'require',
                        });
                        try {
                            pc.addTransceiver('audio');
                            pc.addTransceiver('video');
                            const offer = await pc.createOffer();
                            try {
                                pc.close();
                            } catch (error) {}
                            const sdpObject = sdpTransform.parse(offer.sdp);
                            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({
                                sdpObject,
                            });
                            // libwebrtc supports NACK for OPUS but doesn't announce it.
                            ortcUtils.addNackSuppportForOpus(nativeRtpCapabilities);
                            return nativeRtpCapabilities;
                        } catch (error) {
                            try {
                                pc.close();
                            } catch (error2) {}
                            throw error;
                        }
                    }
                    async getNativeSctpCapabilities() {
                        logger.debug('getNativeSctpCapabilities()');
                        return {
                            numStreams: SCTP_NUM_STREAMS,
                        };
                    }
                    run({
                        direction,
                        iceParameters,
                        iceCandidates,
                        dtlsParameters,
                        sctpParameters,
                        iceServers,
                        iceTransportPolicy,
                        additionalSettings,
                        proprietaryConstraints,
                        extendedRtpCapabilities,
                    }) {
                        this.assertNotClosed();
                        logger.debug('run()');
                        this._direction = direction;
                        this._remoteSdp = new RemoteSdp_1.RemoteSdp({
                            iceParameters,
                            iceCandidates,
                            dtlsParameters,
                            sctpParameters,
                        });
                        this._sendingRtpParametersByKind = {
                            audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
                            video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities),
                        };
                        this._sendingRemoteRtpParametersByKind = {
                            audio: ortc.getSendingRemoteRtpParameters(
                                'audio',
                                extendedRtpCapabilities,
                            ),
                            video: ortc.getSendingRemoteRtpParameters(
                                'video',
                                extendedRtpCapabilities,
                            ),
                        };
                        if (dtlsParameters.role && dtlsParameters.role !== 'auto') {
                            this._forcedLocalDtlsRole =
                                dtlsParameters.role === 'server' ? 'client' : 'server';
                        }
                        this._pc = new RTCPeerConnection(
                            {
                                iceServers: iceServers || [],
                                iceTransportPolicy: iceTransportPolicy || 'all',
                                bundlePolicy: 'max-bundle',
                                rtcpMuxPolicy: 'require',
                                ...additionalSettings,
                            },
                            proprietaryConstraints,
                        );
                        this._pc.addEventListener('icegatheringstatechange', () => {
                            this.emit('@icegatheringstatechange', this._pc.iceGatheringState);
                        });
                        if (this._pc.connectionState) {
                            this._pc.addEventListener('connectionstatechange', () => {
                                this.emit('@connectionstatechange', this._pc.connectionState);
                            });
                        } else {
                            this._pc.addEventListener('iceconnectionstatechange', () => {
                                logger.warn(
                                    'run() | pc.connectionState not supported, using pc.iceConnectionState',
                                );
                                switch (this._pc.iceConnectionState) {
                                    case 'checking':
                                        this.emit('@connectionstatechange', 'connecting');
                                        break;
                                    case 'connected':
                                    case 'completed':
                                        this.emit('@connectionstatechange', 'connected');
                                        break;
                                    case 'failed':
                                        this.emit('@connectionstatechange', 'failed');
                                        break;
                                    case 'disconnected':
                                        this.emit('@connectionstatechange', 'disconnected');
                                        break;
                                    case 'closed':
                                        this.emit('@connectionstatechange', 'closed');
                                        break;
                                }
                            });
                        }
                    }
                    async updateIceServers(iceServers) {
                        this.assertNotClosed();
                        logger.debug('updateIceServers()');
                        const configuration = this._pc.getConfiguration();
                        configuration.iceServers = iceServers;
                        this._pc.setConfiguration(configuration);
                    }
                    async restartIce(iceParameters) {
                        this.assertNotClosed();
                        logger.debug('restartIce()');
                        // Provide the remote SDP handler with new remote ICE parameters.
                        this._remoteSdp.updateIceParameters(iceParameters);
                        if (!this._transportReady) {
                            return;
                        }
                        if (this._direction === 'send') {
                            const offer = await this._pc.createOffer({ iceRestart: true });
                            logger.debug(
                                'restartIce() | calling pc.setLocalDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setLocalDescription(offer);
                            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'restartIce() | calling pc.setRemoteDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setRemoteDescription(answer);
                        } else {
                            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'restartIce() | calling pc.setRemoteDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setRemoteDescription(offer);
                            const answer = await this._pc.createAnswer();
                            logger.debug(
                                'restartIce() | calling pc.setLocalDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setLocalDescription(answer);
                        }
                    }
                    async getTransportStats() {
                        this.assertNotClosed();
                        return this._pc.getStats();
                    }
                    async send({ track, encodings, codecOptions, codec }) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
                        const sendingRtpParameters = utils.clone(
                            this._sendingRtpParametersByKind[track.kind],
                            {},
                        );
                        // This may throw.
                        sendingRtpParameters.codecs = ortc.reduceCodecs(
                            sendingRtpParameters.codecs,
                            codec,
                        );
                        const sendingRemoteRtpParameters = utils.clone(
                            this._sendingRemoteRtpParametersByKind[track.kind],
                            {},
                        );
                        // This may throw.
                        sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(
                            sendingRemoteRtpParameters.codecs,
                            codec,
                        );
                        const mediaSectionIdx = this._remoteSdp.getNextMediaSectionIdx();
                        const transceiver = this._pc.addTransceiver(track, {
                            direction: 'sendonly',
                            streams: [this._sendStream],
                        });
                        let offer = await this._pc.createOffer();
                        let localSdpObject = sdpTransform.parse(offer.sdp);
                        let offerMediaObject;
                        if (!this._transportReady) {
                            await this.setupTransport({
                                localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                localSdpObject,
                            });
                        }
                        const layers = (0, scalabilityModes_1.parse)(
                            (encodings || [{}])[0].scalabilityMode,
                        );
                        if (encodings && encodings.length > 1) {
                            logger.debug('send() | enabling legacy simulcast');
                            localSdpObject = sdpTransform.parse(offer.sdp);
                            offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];
                            sdpUnifiedPlanUtils.addLegacySimulcast({
                                offerMediaObject,
                                numStreams: encodings.length,
                            });
                            offer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };
                        }
                        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);
                        await this._pc.setLocalDescription(offer);
                        // We can now get the transceiver.mid.
                        const localId = transceiver.mid;
                        // Set MID.
                        sendingRtpParameters.mid = localId;
                        localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
                        offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];
                        // Set RTCP CNAME.
                        sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({
                            offerMediaObject,
                        });
                        // Set RTP encodings.
                        sendingRtpParameters.encodings = sdpUnifiedPlanUtils.getRtpEncodings({
                            offerMediaObject,
                        });
                        // Complete encodings with given values.
                        if (encodings) {
                            for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {
                                if (encodings[idx]) {
                                    Object.assign(
                                        sendingRtpParameters.encodings[idx],
                                        encodings[idx],
                                    );
                                }
                            }
                        }
                        // If VP8 or H264 and there is effective simulcast, add scalabilityMode to
                        // each encoding.
                        if (
                            sendingRtpParameters.encodings.length > 1 &&
                            (sendingRtpParameters.codecs[0].mimeType.toLowerCase() ===
                                'video/vp8' ||
                                sendingRtpParameters.codecs[0].mimeType.toLowerCase() ===
                                    'video/h264')
                        ) {
                            for (const encoding of sendingRtpParameters.encodings) {
                                if (encoding.scalabilityMode) {
                                    encoding.scalabilityMode = `L1T${layers.temporalLayers}`;
                                } else {
                                    encoding.scalabilityMode = 'L1T3';
                                }
                            }
                        }
                        this._remoteSdp.send({
                            offerMediaObject,
                            reuseMid: mediaSectionIdx.reuseMid,
                            offerRtpParameters: sendingRtpParameters,
                            answerRtpParameters: sendingRemoteRtpParameters,
                            codecOptions,
                        });
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'send() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                        // Store in the map.
                        this._mapMidTransceiver.set(localId, transceiver);
                        return {
                            localId,
                            rtpParameters: sendingRtpParameters,
                            rtpSender: transceiver.sender,
                        };
                    }
                    async stopSending(localId) {
                        this.assertSendDirection();
                        if (this._closed) {
                            return;
                        }
                        logger.debug('stopSending() [localId:%s]', localId);
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        transceiver.sender.replaceTrack(null);
                        this._pc.removeTrack(transceiver.sender);
                        const mediaSectionClosed = this._remoteSdp.closeMediaSection(
                            transceiver.mid,
                        );
                        if (mediaSectionClosed) {
                            try {
                                transceiver.stop();
                            } catch (error) {}
                        }
                        const offer = await this._pc.createOffer();
                        logger.debug(
                            'stopSending() | calling pc.setLocalDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setLocalDescription(offer);
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'stopSending() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                        this._mapMidTransceiver.delete(localId);
                    }
                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    async pauseSending(localId) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        logger.debug('pauseSending() [localId:%s]', localId);
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        transceiver.direction = 'inactive';
                        this._remoteSdp.pauseMediaSection(localId);
                        const offer = await this._pc.createOffer();
                        logger.debug(
                            'pauseSending() | calling pc.setLocalDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setLocalDescription(offer);
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'pauseSending() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                    }
                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    async resumeSending(localId) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        logger.debug('resumeSending() [localId:%s]', localId);
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        transceiver.direction = 'sendonly';
                        this._remoteSdp.resumeSendingMediaSection(localId);
                        const offer = await this._pc.createOffer();
                        logger.debug(
                            'resumeSending() | calling pc.setLocalDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setLocalDescription(offer);
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'resumeSending() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                    }
                    async replaceTrack(localId, track) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        if (track) {
                            logger.debug(
                                'replaceTrack() [localId:%s, track.id:%s]',
                                localId,
                                track.id,
                            );
                        } else {
                            logger.debug('replaceTrack() [localId:%s, no track]', localId);
                        }
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        await transceiver.sender.replaceTrack(track);
                    }
                    async setMaxSpatialLayer(localId, spatialLayer) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        logger.debug(
                            'setMaxSpatialLayer() [localId:%s, spatialLayer:%s]',
                            localId,
                            spatialLayer,
                        );
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        const parameters = transceiver.sender.getParameters();
                        parameters.encodings.forEach((encoding, idx) => {
                            if (idx <= spatialLayer) {
                                encoding.active = true;
                            } else {
                                encoding.active = false;
                            }
                        });
                        await transceiver.sender.setParameters(parameters);
                        this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);
                        const offer = await this._pc.createOffer();
                        logger.debug(
                            'setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setLocalDescription(offer);
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                    }
                    async setRtpEncodingParameters(localId, params) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        logger.debug(
                            'setRtpEncodingParameters() [localId:%s, params:%o]',
                            localId,
                            params,
                        );
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        const parameters = transceiver.sender.getParameters();
                        parameters.encodings.forEach((encoding, idx) => {
                            parameters.encodings[idx] = { ...encoding, ...params };
                        });
                        await transceiver.sender.setParameters(parameters);
                        this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);
                        const offer = await this._pc.createOffer();
                        logger.debug(
                            'setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setLocalDescription(offer);
                        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setRemoteDescription(answer);
                    }
                    async getSenderStats(localId) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        return transceiver.sender.getStats();
                    }
                    async sendDataChannel({
                        ordered,
                        maxPacketLifeTime,
                        maxRetransmits,
                        label,
                        protocol,
                    }) {
                        this.assertNotClosed();
                        this.assertSendDirection();
                        const options = {
                            negotiated: true,
                            id: this._nextSendSctpStreamId,
                            ordered,
                            maxPacketLifeTime,
                            maxRetransmits,
                            protocol,
                        };
                        logger.debug('sendDataChannel() [options:%o]', options);
                        const dataChannel = this._pc.createDataChannel(label, options);
                        // Increase next id.
                        this._nextSendSctpStreamId =
                            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;
                        // If this is the first DataChannel we need to create the SDP answer with
                        // m=application section.
                        if (!this._hasDataChannelMediaSection) {
                            const offer = await this._pc.createOffer();
                            const localSdpObject = sdpTransform.parse(offer.sdp);
                            const offerMediaObject = localSdpObject.media.find(
                                (m) => m.type === 'application',
                            );
                            if (!this._transportReady) {
                                await this.setupTransport({
                                    localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                    localSdpObject,
                                });
                            }
                            logger.debug(
                                'sendDataChannel() | calling pc.setLocalDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setLocalDescription(offer);
                            this._remoteSdp.sendSctpAssociation({ offerMediaObject });
                            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setRemoteDescription(answer);
                            this._hasDataChannelMediaSection = true;
                        }
                        const sctpStreamParameters = {
                            streamId: options.id,
                            ordered: options.ordered,
                            maxPacketLifeTime: options.maxPacketLifeTime,
                            maxRetransmits: options.maxRetransmits,
                        };
                        return { dataChannel, sctpStreamParameters };
                    }
                    async receive(optionsList) {
                        this.assertNotClosed();
                        this.assertRecvDirection();
                        const results = [];
                        const mapLocalId = new Map();
                        for (const options of optionsList) {
                            const { trackId, kind, rtpParameters, streamId } = options;
                            logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
                            const localId =
                                rtpParameters.mid || String(this._mapMidTransceiver.size);
                            mapLocalId.set(trackId, localId);
                            this._remoteSdp.receive({
                                mid: localId,
                                kind,
                                offerRtpParameters: rtpParameters,
                                streamId: streamId || rtpParameters.rtcp.cname,
                                trackId,
                            });
                        }
                        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'receive() | calling pc.setRemoteDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setRemoteDescription(offer);
                        let answer = await this._pc.createAnswer();
                        const localSdpObject = sdpTransform.parse(answer.sdp);
                        for (const options of optionsList) {
                            const { trackId, rtpParameters } = options;
                            const localId = mapLocalId.get(trackId);
                            const answerMediaObject = localSdpObject.media.find(
                                (m) => String(m.mid) === localId,
                            );
                            // May need to modify codec parameters in the answer based on codec
                            // parameters in the offer.
                            sdpCommonUtils.applyCodecParameters({
                                offerRtpParameters: rtpParameters,
                                answerMediaObject,
                            });
                        }
                        answer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };
                        if (!this._transportReady) {
                            await this.setupTransport({
                                localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                localSdpObject,
                            });
                        }
                        logger.debug(
                            'receive() | calling pc.setLocalDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setLocalDescription(answer);
                        for (const options of optionsList) {
                            const { trackId } = options;
                            const localId = mapLocalId.get(trackId);
                            const transceiver = this._pc
                                .getTransceivers()
                                .find((t) => t.mid === localId);
                            if (!transceiver) {
                                throw new Error('new RTCRtpTransceiver not found');
                            }
                            // Store in the map.
                            this._mapMidTransceiver.set(localId, transceiver);
                            results.push({
                                localId,
                                track: transceiver.receiver.track,
                                rtpReceiver: transceiver.receiver,
                            });
                        }
                        return results;
                    }
                    async stopReceiving(localIds) {
                        this.assertRecvDirection();
                        if (this._closed) {
                            return;
                        }
                        for (const localId of localIds) {
                            logger.debug('stopReceiving() [localId:%s]', localId);
                            const transceiver = this._mapMidTransceiver.get(localId);
                            if (!transceiver) {
                                throw new Error('associated RTCRtpTransceiver not found');
                            }
                            this._remoteSdp.closeMediaSection(transceiver.mid);
                        }
                        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'stopReceiving() | calling pc.setRemoteDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setRemoteDescription(offer);
                        const answer = await this._pc.createAnswer();
                        logger.debug(
                            'stopReceiving() | calling pc.setLocalDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setLocalDescription(answer);
                        for (const localId of localIds) {
                            this._mapMidTransceiver.delete(localId);
                        }
                    }
                    async pauseReceiving(localIds) {
                        this.assertNotClosed();
                        this.assertRecvDirection();
                        for (const localId of localIds) {
                            logger.debug('pauseReceiving() [localId:%s]', localId);
                            const transceiver = this._mapMidTransceiver.get(localId);
                            if (!transceiver) {
                                throw new Error('associated RTCRtpTransceiver not found');
                            }
                            transceiver.direction = 'inactive';
                            this._remoteSdp.pauseMediaSection(localId);
                        }
                        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setRemoteDescription(offer);
                        const answer = await this._pc.createAnswer();
                        logger.debug(
                            'pauseReceiving() | calling pc.setLocalDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setLocalDescription(answer);
                    }
                    async resumeReceiving(localIds) {
                        this.assertNotClosed();
                        this.assertRecvDirection();
                        for (const localId of localIds) {
                            logger.debug('resumeReceiving() [localId:%s]', localId);
                            const transceiver = this._mapMidTransceiver.get(localId);
                            if (!transceiver) {
                                throw new Error('associated RTCRtpTransceiver not found');
                            }
                            transceiver.direction = 'recvonly';
                            this._remoteSdp.resumeReceivingMediaSection(localId);
                        }
                        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                        logger.debug(
                            'resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]',
                            offer,
                        );
                        await this._pc.setRemoteDescription(offer);
                        const answer = await this._pc.createAnswer();
                        logger.debug(
                            'resumeReceiving() | calling pc.setLocalDescription() [answer:%o]',
                            answer,
                        );
                        await this._pc.setLocalDescription(answer);
                    }
                    async getReceiverStats(localId) {
                        this.assertNotClosed();
                        this.assertRecvDirection();
                        const transceiver = this._mapMidTransceiver.get(localId);
                        if (!transceiver) {
                            throw new Error('associated RTCRtpTransceiver not found');
                        }
                        return transceiver.receiver.getStats();
                    }
                    async receiveDataChannel({ sctpStreamParameters, label, protocol }) {
                        this.assertNotClosed();
                        this.assertRecvDirection();
                        const { streamId, ordered, maxPacketLifeTime, maxRetransmits } =
                            sctpStreamParameters;
                        const options = {
                            negotiated: true,
                            id: streamId,
                            ordered,
                            maxPacketLifeTime,
                            maxRetransmits,
                            protocol,
                        };
                        logger.debug('receiveDataChannel() [options:%o]', options);
                        const dataChannel = this._pc.createDataChannel(label, options);
                        // If this is the first DataChannel we need to create the SDP offer with
                        // m=application section.
                        if (!this._hasDataChannelMediaSection) {
                            this._remoteSdp.receiveSctpAssociation();
                            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
                            logger.debug(
                                'receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]',
                                offer,
                            );
                            await this._pc.setRemoteDescription(offer);
                            const answer = await this._pc.createAnswer();
                            if (!this._transportReady) {
                                const localSdpObject = sdpTransform.parse(answer.sdp);
                                await this.setupTransport({
                                    localDtlsRole: this._forcedLocalDtlsRole ?? 'client',
                                    localSdpObject,
                                });
                            }
                            logger.debug(
                                'receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]',
                                answer,
                            );
                            await this._pc.setLocalDescription(answer);
                            this._hasDataChannelMediaSection = true;
                        }
                        return { dataChannel };
                    }
                    async setupTransport({ localDtlsRole, localSdpObject }) {
                        if (!localSdpObject) {
                            localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);
                        }
                        // Get our local DTLS parameters.
                        const dtlsParameters = sdpCommonUtils.extractDtlsParameters({
                            sdpObject: localSdpObject,
                        });
                        // Set our DTLS role.
                        dtlsParameters.role = localDtlsRole;
                        // Update the remote DTLS role in the SDP.
                        this._remoteSdp.updateDtlsRole(
                            localDtlsRole === 'client' ? 'server' : 'client',
                        );
                        // Need to tell the remote transport about our parameters.
                        await new Promise((resolve, reject) => {
                            this.safeEmit('@connect', { dtlsParameters }, resolve, reject);
                        });
                        this._transportReady = true;
                    }
                    assertNotClosed() {
                        if (this._closed) {
                            throw new errors_1.InvalidStateError(
                                'method called in a closed handler',
                            );
                        }
                    }
                    assertSendDirection() {
                        if (this._direction !== 'send') {
                            throw new Error(
                                'method can just be called for handlers with "send" direction',
                            );
                        }
                    }
                    assertRecvDirection() {
                        if (this._direction !== 'recv') {
                            throw new Error(
                                'method can just be called for handlers with "recv" direction',
                            );
                        }
                    }
                }
                exports.Safari12 = Safari12;
            },
            {
                '../Logger': 39,
                '../errors': 44,
                '../ortc': 65,
                '../scalabilityModes': 66,
                '../utils': 68,
                './HandlerInterface': 52,
                './ortc/utils': 58,
                './sdp/RemoteSdp': 60,
                './sdp/commonUtils': 61,
                './sdp/unifiedPlanUtils': 63,
                'sdp-transform': 73,
            },
        ],
        57: [
            function (require, module, exports) {
                'use strict';
                var __createBinding =
                    (this && this.__createBinding) ||
                    (Object.create
                        ? function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              var desc = Object.getOwnPropertyDescriptor(m, k);
                              if (
                                  !desc ||
                                  ('get' in desc
                                      ? !m.__esModule
                                      : desc.writable || desc.configurable)
                              ) {
                                  desc = {
                                      enumerable: true,
                                      get: function () {
                                          return m[k];
                                      },
                                  };
                              }
                              Object.defineProperty(o, k2, desc);
                          }
                        : function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              o[k2] = m[k];
                          });
                var __setModuleDefault =
                    (this && this.__setModuleDefault) ||
                    (Object.create
                        ? function (o, v) {
                              Object.defineProperty(o, 'default', { enumerable: true, value: v });
                          }
                        : function (o, v) {
                              o['default'] = v;
                          });
                var __importStar =
                    (this && this.__importStar) ||
                    function (mod) {
                        if (mod && mod.__esModule) return mod;
                        var result = {};
                        if (mod != null)
                            for (var k in mod)
                                if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
                                    __createBinding(result, mod, k);
                        __setModuleDefault(result, mod);
                        return result;
                    };
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.mangleRtpParameters = exports.getCapabilities = void 0;
                const utils = __importStar(require('../../utils'));
                /**
                 * Normalize ORTC based Edge's RTCRtpReceiver.getCapabilities() to produce a full
                 * compliant ORTC RTCRtpCapabilities.
                 */
                function getCapabilities() {
                    const nativeCaps = RTCRtpReceiver.getCapabilities();
                    const caps = utils.clone(nativeCaps, {});
                    for (const codec of caps.codecs) {
                        // Rename numChannels to channels.
                        codec.channels = codec.numChannels;
                        delete codec.numChannels;
                        // Add mimeType.
                        codec.mimeType = codec.mimeType || `${codec.kind}/${codec.name}`;
                        // NOTE: Edge sets some numeric parameters as string rather than number. Fix them.
                        if (codec.parameters) {
                            const parameters = codec.parameters;
                            if (parameters.apt) {
                                parameters.apt = Number(parameters.apt);
                            }
                            if (parameters['packetization-mode']) {
                                parameters['packetization-mode'] = Number(
                                    parameters['packetization-mode'],
                                );
                            }
                        }
                        // Delete emty parameter String in rtcpFeedback.
                        for (const feedback of codec.rtcpFeedback || []) {
                            if (!feedback.parameter) {
                                feedback.parameter = '';
                            }
                        }
                    }
                    return caps;
                }
                exports.getCapabilities = getCapabilities;
                /**
                 * Generate RTCRtpParameters as ORTC based Edge likes.
                 */
                function mangleRtpParameters(rtpParameters) {
                    const params = utils.clone(rtpParameters, {});
                    // Rename mid to muxId.
                    if (params.mid) {
                        params.muxId = params.mid;
                        delete params.mid;
                    }
                    for (const codec of params.codecs) {
                        // Rename channels to numChannels.
                        if (codec.channels) {
                            codec.numChannels = codec.channels;
                            delete codec.channels;
                        }
                        // Add codec.name (requried by Edge).
                        if (codec.mimeType && !codec.name) {
                            codec.name = codec.mimeType.split('/')[1];
                        }
                        // Remove mimeType.
                        delete codec.mimeType;
                    }
                    return params;
                }
                exports.mangleRtpParameters = mangleRtpParameters;
            },
            { '../../utils': 68 },
        ],
        58: [
            function (require, module, exports) {
                'use strict';
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.addNackSuppportForOpus = void 0;
                /**
                 * This function adds RTCP NACK support for OPUS codec in given capabilities.
                 */
                function addNackSuppportForOpus(rtpCapabilities) {
                    for (const codec of rtpCapabilities.codecs || []) {
                        if (
                            (codec.mimeType.toLowerCase() === 'audio/opus' ||
                                codec.mimeType.toLowerCase() === 'audio/multiopus') &&
                            !codec.rtcpFeedback?.some((fb) => fb.type === 'nack' && !fb.parameter)
                        ) {
                            if (!codec.rtcpFeedback) {
                                codec.rtcpFeedback = [];
                            }
                            codec.rtcpFeedback.push({ type: 'nack' });
                        }
                    }
                }
                exports.addNackSuppportForOpus = addNackSuppportForOpus;
            },
            {},
        ],
        59: [
            function (require, module, exports) {
                'use strict';
                var __createBinding =
                    (this && this.__createBinding) ||
                    (Object.create
                        ? function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              var desc = Object.getOwnPropertyDescriptor(m, k);
                              if (
                                  !desc ||
                                  ('get' in desc
                                      ? !m.__esModule
                                      : desc.writable || desc.configurable)
                              ) {
                                  desc = {
                                      enumerable: true,
                                      get: function () {
                                          return m[k];
                                      },
                                  };
                              }
                              Object.defineProperty(o, k2, desc);
                          }
                        : function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              o[k2] = m[k];
                          });
                var __setModuleDefault =
                    (this && this.__setModuleDefault) ||
                    (Object.create
                        ? function (o, v) {
                              Object.defineProperty(o, 'default', { enumerable: true, value: v });
                          }
                        : function (o, v) {
                              o['default'] = v;
                          });
                var __importStar =
                    (this && this.__importStar) ||
                    function (mod) {
                        if (mod && mod.__esModule) return mod;
                        var result = {};
                        if (mod != null)
                            for (var k in mod)
                                if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
                                    __createBinding(result, mod, k);
                        __setModuleDefault(result, mod);
                        return result;
                    };
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.OfferMediaSection =
                    exports.AnswerMediaSection =
                    exports.MediaSection =
                        void 0;
                const sdpTransform = __importStar(require('sdp-transform'));
                const utils = __importStar(require('../../utils'));
                class MediaSection {
                    constructor({ iceParameters, iceCandidates, dtlsParameters, planB = false }) {
                        this._mediaObject = {};
                        this._planB = planB;
                        if (iceParameters) {
                            this.setIceParameters(iceParameters);
                        }
                        if (iceCandidates) {
                            this._mediaObject.candidates = [];
                            for (const candidate of iceCandidates) {
                                const candidateObject = {};
                                // mediasoup does mandates rtcp-mux so candidates component is always
                                // RTP (1).
                                candidateObject.component = 1;
                                candidateObject.foundation = candidate.foundation;
                                candidateObject.ip = candidate.ip;
                                candidateObject.port = candidate.port;
                                candidateObject.priority = candidate.priority;
                                candidateObject.transport = candidate.protocol;
                                candidateObject.type = candidate.type;
                                if (candidate.tcpType) {
                                    candidateObject.tcptype = candidate.tcpType;
                                }
                                this._mediaObject.candidates.push(candidateObject);
                            }
                            this._mediaObject.endOfCandidates = 'end-of-candidates';
                            this._mediaObject.iceOptions = 'renomination';
                        }
                        if (dtlsParameters) {
                            this.setDtlsRole(dtlsParameters.role);
                        }
                    }
                    get mid() {
                        return String(this._mediaObject.mid);
                    }
                    get closed() {
                        return this._mediaObject.port === 0;
                    }
                    getObject() {
                        return this._mediaObject;
                    }
                    setIceParameters(iceParameters) {
                        this._mediaObject.iceUfrag = iceParameters.usernameFragment;
                        this._mediaObject.icePwd = iceParameters.password;
                    }
                    pause() {
                        this._mediaObject.direction = 'inactive';
                    }
                    disable() {
                        this.pause();
                        delete this._mediaObject.ext;
                        delete this._mediaObject.ssrcs;
                        delete this._mediaObject.ssrcGroups;
                        delete this._mediaObject.simulcast;
                        delete this._mediaObject.simulcast_03;
                        delete this._mediaObject.rids;
                        delete this._mediaObject.extmapAllowMixed;
                    }
                    close() {
                        this.disable();
                        this._mediaObject.port = 0;
                    }
                }
                exports.MediaSection = MediaSection;
                class AnswerMediaSection extends MediaSection {
                    constructor({
                        iceParameters,
                        iceCandidates,
                        dtlsParameters,
                        sctpParameters,
                        plainRtpParameters,
                        planB = false,
                        offerMediaObject,
                        offerRtpParameters,
                        answerRtpParameters,
                        codecOptions,
                        extmapAllowMixed = false,
                    }) {
                        super({ iceParameters, iceCandidates, dtlsParameters, planB });
                        this._mediaObject.mid = String(offerMediaObject.mid);
                        this._mediaObject.type = offerMediaObject.type;
                        this._mediaObject.protocol = offerMediaObject.protocol;
                        if (!plainRtpParameters) {
                            this._mediaObject.connection = { ip: '127.0.0.1', version: 4 };
                            this._mediaObject.port = 7;
                        } else {
                            this._mediaObject.connection = {
                                ip: plainRtpParameters.ip,
                                version: plainRtpParameters.ipVersion,
                            };
                            this._mediaObject.port = plainRtpParameters.port;
                        }
                        switch (offerMediaObject.type) {
                            case 'audio':
                            case 'video': {
                                this._mediaObject.direction = 'recvonly';
                                this._mediaObject.rtp = [];
                                this._mediaObject.rtcpFb = [];
                                this._mediaObject.fmtp = [];
                                for (const codec of answerRtpParameters.codecs) {
                                    const rtp = {
                                        payload: codec.payloadType,
                                        codec: getCodecName(codec),
                                        rate: codec.clockRate,
                                    };
                                    if (codec.channels > 1) {
                                        rtp.encoding = codec.channels;
                                    }
                                    this._mediaObject.rtp.push(rtp);
                                    const codecParameters = utils.clone(codec.parameters, {});
                                    let codecRtcpFeedback = utils.clone(codec.rtcpFeedback, []);
                                    if (codecOptions) {
                                        const {
                                            opusStereo,
                                            opusFec,
                                            opusDtx,
                                            opusMaxPlaybackRate,
                                            opusMaxAverageBitrate,
                                            opusPtime,
                                            opusNack,
                                            videoGoogleStartBitrate,
                                            videoGoogleMaxBitrate,
                                            videoGoogleMinBitrate,
                                        } = codecOptions;
                                        const offerCodec = offerRtpParameters.codecs.find(
                                            (c) => c.payloadType === codec.payloadType,
                                        );
                                        switch (codec.mimeType.toLowerCase()) {
                                            case 'audio/opus':
                                            case 'audio/multiopus': {
                                                if (opusStereo !== undefined) {
                                                    offerCodec.parameters['sprop-stereo'] =
                                                        opusStereo ? 1 : 0;
                                                    codecParameters.stereo = opusStereo ? 1 : 0;
                                                }
                                                if (opusFec !== undefined) {
                                                    offerCodec.parameters.useinbandfec = opusFec
                                                        ? 1
                                                        : 0;
                                                    codecParameters.useinbandfec = opusFec ? 1 : 0;
                                                }
                                                if (opusDtx !== undefined) {
                                                    offerCodec.parameters.usedtx = opusDtx ? 1 : 0;
                                                    codecParameters.usedtx = opusDtx ? 1 : 0;
                                                }
                                                if (opusMaxPlaybackRate !== undefined) {
                                                    codecParameters.maxplaybackrate =
                                                        opusMaxPlaybackRate;
                                                }
                                                if (opusMaxAverageBitrate !== undefined) {
                                                    codecParameters.maxaveragebitrate =
                                                        opusMaxAverageBitrate;
                                                }
                                                if (opusPtime !== undefined) {
                                                    offerCodec.parameters.ptime = opusPtime;
                                                    codecParameters.ptime = opusPtime;
                                                }
                                                // If opusNack is not set, we must remove NACK support for OPUS.
                                                // Otherwise it would be enabled for those handlers that artificially
                                                // announce it in their RTP capabilities.
                                                if (!opusNack) {
                                                    offerCodec.rtcpFeedback =
                                                        offerCodec.rtcpFeedback.filter(
                                                            (fb) =>
                                                                fb.type !== 'nack' || fb.parameter,
                                                        );
                                                    codecRtcpFeedback = codecRtcpFeedback.filter(
                                                        (fb) => fb.type !== 'nack' || fb.parameter,
                                                    );
                                                }
                                                break;
                                            }
                                            case 'video/vp8':
                                            case 'video/vp9':
                                            case 'video/h264':
                                            case 'video/h265': {
                                                if (videoGoogleStartBitrate !== undefined) {
                                                    codecParameters['x-google-start-bitrate'] =
                                                        videoGoogleStartBitrate;
                                                }
                                                if (videoGoogleMaxBitrate !== undefined) {
                                                    codecParameters['x-google-max-bitrate'] =
                                                        videoGoogleMaxBitrate;
                                                }
                                                if (videoGoogleMinBitrate !== undefined) {
                                                    codecParameters['x-google-min-bitrate'] =
                                                        videoGoogleMinBitrate;
                                                }
                                                break;
                                            }
                                        }
                                    }
                                    const fmtp = {
                                        payload: codec.payloadType,
                                        config: '',
                                    };
                                    for (const key of Object.keys(codecParameters)) {
                                        if (fmtp.config) {
                                            fmtp.config += ';';
                                        }
                                        fmtp.config += `${key}=${codecParameters[key]}`;
                                    }
                                    if (fmtp.config) {
                                        this._mediaObject.fmtp.push(fmtp);
                                    }
                                    for (const fb of codecRtcpFeedback) {
                                        this._mediaObject.rtcpFb.push({
                                            payload: codec.payloadType,
                                            type: fb.type,
                                            subtype: fb.parameter,
                                        });
                                    }
                                }
                                this._mediaObject.payloads = answerRtpParameters.codecs
                                    .map((codec) => codec.payloadType)
                                    .join(' ');
                                this._mediaObject.ext = [];
                                for (const ext of answerRtpParameters.headerExtensions) {
                                    // Don't add a header extension if not present in the offer.
                                    const found = (offerMediaObject.ext || []).some(
                                        (localExt) => localExt.uri === ext.uri,
                                    );
                                    if (!found) {
                                        continue;
                                    }
                                    this._mediaObject.ext.push({
                                        uri: ext.uri,
                                        value: ext.id,
                                    });
                                }
                                // Allow both 1 byte and 2 bytes length header extensions.
                                if (
                                    extmapAllowMixed &&
                                    offerMediaObject.extmapAllowMixed === 'extmap-allow-mixed'
                                ) {
                                    this._mediaObject.extmapAllowMixed = 'extmap-allow-mixed';
                                }
                                // Simulcast.
                                if (offerMediaObject.simulcast) {
                                    this._mediaObject.simulcast = {
                                        dir1: 'recv',
                                        list1: offerMediaObject.simulcast.list1,
                                    };
                                    this._mediaObject.rids = [];
                                    for (const rid of offerMediaObject.rids || []) {
                                        if (rid.direction !== 'send') {
                                            continue;
                                        }
                                        this._mediaObject.rids.push({
                                            id: rid.id,
                                            direction: 'recv',
                                        });
                                    }
                                }
                                // Simulcast (draft version 03).
                                else if (offerMediaObject.simulcast_03) {
                                    // eslint-disable-next-line camelcase
                                    this._mediaObject.simulcast_03 = {
                                        value: offerMediaObject.simulcast_03.value.replace(
                                            /send/g,
                                            'recv',
                                        ),
                                    };
                                    this._mediaObject.rids = [];
                                    for (const rid of offerMediaObject.rids || []) {
                                        if (rid.direction !== 'send') {
                                            continue;
                                        }
                                        this._mediaObject.rids.push({
                                            id: rid.id,
                                            direction: 'recv',
                                        });
                                    }
                                }
                                this._mediaObject.rtcpMux = 'rtcp-mux';
                                this._mediaObject.rtcpRsize = 'rtcp-rsize';
                                if (this._planB && this._mediaObject.type === 'video') {
                                    this._mediaObject.xGoogleFlag = 'conference';
                                }
                                break;
                            }
                            case 'application': {
                                // New spec.
                                if (typeof offerMediaObject.sctpPort === 'number') {
                                    this._mediaObject.payloads = 'webrtc-datachannel';
                                    this._mediaObject.sctpPort = sctpParameters.port;
                                    this._mediaObject.maxMessageSize =
                                        sctpParameters.maxMessageSize;
                                }
                                // Old spec.
                                else if (offerMediaObject.sctpmap) {
                                    this._mediaObject.payloads = sctpParameters.port;
                                    this._mediaObject.sctpmap = {
                                        app: 'webrtc-datachannel',
                                        sctpmapNumber: sctpParameters.port,
                                        maxMessageSize: sctpParameters.maxMessageSize,
                                    };
                                }
                                break;
                            }
                        }
                    }
                    setDtlsRole(role) {
                        switch (role) {
                            case 'client':
                                this._mediaObject.setup = 'active';
                                break;
                            case 'server':
                                this._mediaObject.setup = 'passive';
                                break;
                            case 'auto':
                                this._mediaObject.setup = 'actpass';
                                break;
                        }
                    }
                    resume() {
                        this._mediaObject.direction = 'recvonly';
                    }
                    muxSimulcastStreams(encodings) {
                        if (!this._mediaObject.simulcast || !this._mediaObject.simulcast.list1) {
                            return;
                        }
                        const layers = {};
                        for (const encoding of encodings) {
                            if (encoding.rid) {
                                layers[encoding.rid] = encoding;
                            }
                        }
                        const raw = this._mediaObject.simulcast.list1;
                        const simulcastStreams = sdpTransform.parseSimulcastStreamList(raw);
                        for (const simulcastStream of simulcastStreams) {
                            for (const simulcastFormat of simulcastStream) {
                                simulcastFormat.paused = !layers[simulcastFormat.scid]?.active;
                            }
                        }
                        this._mediaObject.simulcast.list1 = simulcastStreams
                            .map((simulcastFormats) =>
                                simulcastFormats
                                    .map((f) => `${f.paused ? '~' : ''}${f.scid}`)
                                    .join(','),
                            )
                            .join(';');
                    }
                }
                exports.AnswerMediaSection = AnswerMediaSection;
                class OfferMediaSection extends MediaSection {
                    constructor({
                        iceParameters,
                        iceCandidates,
                        dtlsParameters,
                        sctpParameters,
                        plainRtpParameters,
                        planB = false,
                        mid,
                        kind,
                        offerRtpParameters,
                        streamId,
                        trackId,
                        oldDataChannelSpec = false,
                    }) {
                        super({ iceParameters, iceCandidates, dtlsParameters, planB });
                        this._mediaObject.mid = String(mid);
                        this._mediaObject.type = kind;
                        if (!plainRtpParameters) {
                            this._mediaObject.connection = { ip: '127.0.0.1', version: 4 };
                            if (!sctpParameters) {
                                this._mediaObject.protocol = 'UDP/TLS/RTP/SAVPF';
                            } else {
                                this._mediaObject.protocol = 'UDP/DTLS/SCTP';
                            }
                            this._mediaObject.port = 7;
                        } else {
                            this._mediaObject.connection = {
                                ip: plainRtpParameters.ip,
                                version: plainRtpParameters.ipVersion,
                            };
                            this._mediaObject.protocol = 'RTP/AVP';
                            this._mediaObject.port = plainRtpParameters.port;
                        }
                        switch (kind) {
                            case 'audio':
                            case 'video': {
                                this._mediaObject.direction = 'sendonly';
                                this._mediaObject.rtp = [];
                                this._mediaObject.rtcpFb = [];
                                this._mediaObject.fmtp = [];
                                if (!this._planB) {
                                    this._mediaObject.msid = `${streamId || '-'} ${trackId}`;
                                }
                                for (const codec of offerRtpParameters.codecs) {
                                    const rtp = {
                                        payload: codec.payloadType,
                                        codec: getCodecName(codec),
                                        rate: codec.clockRate,
                                    };
                                    if (codec.channels > 1) {
                                        rtp.encoding = codec.channels;
                                    }
                                    this._mediaObject.rtp.push(rtp);
                                    const fmtp = {
                                        payload: codec.payloadType,
                                        config: '',
                                    };
                                    for (const key of Object.keys(codec.parameters)) {
                                        if (fmtp.config) {
                                            fmtp.config += ';';
                                        }
                                        fmtp.config += `${key}=${codec.parameters[key]}`;
                                    }
                                    if (fmtp.config) {
                                        this._mediaObject.fmtp.push(fmtp);
                                    }
                                    for (const fb of codec.rtcpFeedback) {
                                        this._mediaObject.rtcpFb.push({
                                            payload: codec.payloadType,
                                            type: fb.type,
                                            subtype: fb.parameter,
                                        });
                                    }
                                }
                                this._mediaObject.payloads = offerRtpParameters.codecs
                                    .map((codec) => codec.payloadType)
                                    .join(' ');
                                this._mediaObject.ext = [];
                                for (const ext of offerRtpParameters.headerExtensions) {
                                    this._mediaObject.ext.push({
                                        uri: ext.uri,
                                        value: ext.id,
                                    });
                                }
                                this._mediaObject.rtcpMux = 'rtcp-mux';
                                this._mediaObject.rtcpRsize = 'rtcp-rsize';
                                const encoding = offerRtpParameters.encodings[0];
                                const ssrc = encoding.ssrc;
                                const rtxSsrc =
                                    encoding.rtx && encoding.rtx.ssrc
                                        ? encoding.rtx.ssrc
                                        : undefined;
                                this._mediaObject.ssrcs = [];
                                this._mediaObject.ssrcGroups = [];
                                if (offerRtpParameters.rtcp.cname) {
                                    this._mediaObject.ssrcs.push({
                                        id: ssrc,
                                        attribute: 'cname',
                                        value: offerRtpParameters.rtcp.cname,
                                    });
                                }
                                if (this._planB) {
                                    this._mediaObject.ssrcs.push({
                                        id: ssrc,
                                        attribute: 'msid',
                                        value: `${streamId || '-'} ${trackId}`,
                                    });
                                }
                                if (rtxSsrc) {
                                    if (offerRtpParameters.rtcp.cname) {
                                        this._mediaObject.ssrcs.push({
                                            id: rtxSsrc,
                                            attribute: 'cname',
                                            value: offerRtpParameters.rtcp.cname,
                                        });
                                    }
                                    if (this._planB) {
                                        this._mediaObject.ssrcs.push({
                                            id: rtxSsrc,
                                            attribute: 'msid',
                                            value: `${streamId || '-'} ${trackId}`,
                                        });
                                    }
                                    // Associate original and retransmission SSRCs.
                                    this._mediaObject.ssrcGroups.push({
                                        semantics: 'FID',
                                        ssrcs: `${ssrc} ${rtxSsrc}`,
                                    });
                                }
                                break;
                            }
                            case 'application': {
                                // New spec.
                                if (!oldDataChannelSpec) {
                                    this._mediaObject.payloads = 'webrtc-datachannel';
                                    this._mediaObject.sctpPort = sctpParameters.port;
                                    this._mediaObject.maxMessageSize =
                                        sctpParameters.maxMessageSize;
                                }
                                // Old spec.
                                else {
                                    this._mediaObject.payloads = sctpParameters.port;
                                    this._mediaObject.sctpmap = {
                                        app: 'webrtc-datachannel',
                                        sctpmapNumber: sctpParameters.port,
                                        maxMessageSize: sctpParameters.maxMessageSize,
                                    };
                                }
                                break;
                            }
                        }
                    }
                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    setDtlsRole(role) {
                        // Always 'actpass'.
                        this._mediaObject.setup = 'actpass';
                    }
                    resume() {
                        this._mediaObject.direction = 'sendonly';
                    }
                    planBReceive({ offerRtpParameters, streamId, trackId }) {
                        const encoding = offerRtpParameters.encodings[0];
                        const ssrc = encoding.ssrc;
                        const rtxSsrc =
                            encoding.rtx && encoding.rtx.ssrc ? encoding.rtx.ssrc : undefined;
                        const payloads = this._mediaObject.payloads.split(' ');
                        for (const codec of offerRtpParameters.codecs) {
                            if (payloads.includes(String(codec.payloadType))) {
                                continue;
                            }
                            const rtp = {
                                payload: codec.payloadType,
                                codec: getCodecName(codec),
                                rate: codec.clockRate,
                            };
                            if (codec.channels > 1) {
                                rtp.encoding = codec.channels;
                            }
                            this._mediaObject.rtp.push(rtp);
                            const fmtp = {
                                payload: codec.payloadType,
                                config: '',
                            };
                            for (const key of Object.keys(codec.parameters)) {
                                if (fmtp.config) {
                                    fmtp.config += ';';
                                }
                                fmtp.config += `${key}=${codec.parameters[key]}`;
                            }
                            if (fmtp.config) {
                                this._mediaObject.fmtp.push(fmtp);
                            }
                            for (const fb of codec.rtcpFeedback) {
                                this._mediaObject.rtcpFb.push({
                                    payload: codec.payloadType,
                                    type: fb.type,
                                    subtype: fb.parameter,
                                });
                            }
                        }
                        this._mediaObject.payloads += ` ${offerRtpParameters.codecs
                            .filter(
                                (codec) => !this._mediaObject.payloads.includes(codec.payloadType),
                            )
                            .map((codec) => codec.payloadType)
                            .join(' ')}`;
                        this._mediaObject.payloads = this._mediaObject.payloads.trim();
                        if (offerRtpParameters.rtcp.cname) {
                            this._mediaObject.ssrcs.push({
                                id: ssrc,
                                attribute: 'cname',
                                value: offerRtpParameters.rtcp.cname,
                            });
                        }
                        this._mediaObject.ssrcs.push({
                            id: ssrc,
                            attribute: 'msid',
                            value: `${streamId || '-'} ${trackId}`,
                        });
                        if (rtxSsrc) {
                            if (offerRtpParameters.rtcp.cname) {
                                this._mediaObject.ssrcs.push({
                                    id: rtxSsrc,
                                    attribute: 'cname',
                                    value: offerRtpParameters.rtcp.cname,
                                });
                            }
                            this._mediaObject.ssrcs.push({
                                id: rtxSsrc,
                                attribute: 'msid',
                                value: `${streamId || '-'} ${trackId}`,
                            });
                            // Associate original and retransmission SSRCs.
                            this._mediaObject.ssrcGroups.push({
                                semantics: 'FID',
                                ssrcs: `${ssrc} ${rtxSsrc}`,
                            });
                        }
                    }
                    planBStopReceiving({ offerRtpParameters }) {
                        const encoding = offerRtpParameters.encodings[0];
                        const ssrc = encoding.ssrc;
                        const rtxSsrc =
                            encoding.rtx && encoding.rtx.ssrc ? encoding.rtx.ssrc : undefined;
                        this._mediaObject.ssrcs = this._mediaObject.ssrcs.filter(
                            (s) => s.id !== ssrc && s.id !== rtxSsrc,
                        );
                        if (rtxSsrc) {
                            this._mediaObject.ssrcGroups = this._mediaObject.ssrcGroups.filter(
                                (group) => group.ssrcs !== `${ssrc} ${rtxSsrc}`,
                            );
                        }
                    }
                }
                exports.OfferMediaSection = OfferMediaSection;
                function getCodecName(codec) {
                    const MimeTypeRegex = new RegExp('^(audio|video)/(.+)', 'i');
                    const mimeTypeMatch = MimeTypeRegex.exec(codec.mimeType);
                    if (!mimeTypeMatch) {
                        throw new TypeError('invalid codec.mimeType');
                    }
                    return mimeTypeMatch[2];
                }
            },
            { '../../utils': 68, 'sdp-transform': 73 },
        ],
        60: [
            function (require, module, exports) {
                'use strict';
                var __createBinding =
                    (this && this.__createBinding) ||
                    (Object.create
                        ? function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              var desc = Object.getOwnPropertyDescriptor(m, k);
                              if (
                                  !desc ||
                                  ('get' in desc
                                      ? !m.__esModule
                                      : desc.writable || desc.configurable)
                              ) {
                                  desc = {
                                      enumerable: true,
                                      get: function () {
                                          return m[k];
                                      },
                                  };
                              }
                              Object.defineProperty(o, k2, desc);
                          }
                        : function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              o[k2] = m[k];
                          });
                var __setModuleDefault =
                    (this && this.__setModuleDefault) ||
                    (Object.create
                        ? function (o, v) {
                              Object.defineProperty(o, 'default', { enumerable: true, value: v });
                          }
                        : function (o, v) {
                              o['default'] = v;
                          });
                var __importStar =
                    (this && this.__importStar) ||
                    function (mod) {
                        if (mod && mod.__esModule) return mod;
                        var result = {};
                        if (mod != null)
                            for (var k in mod)
                                if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
                                    __createBinding(result, mod, k);
                        __setModuleDefault(result, mod);
                        return result;
                    };
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.RemoteSdp = void 0;
                const sdpTransform = __importStar(require('sdp-transform'));
                const Logger_1 = require('../../Logger');
                const MediaSection_1 = require('./MediaSection');
                const logger = new Logger_1.Logger('RemoteSdp');
                class RemoteSdp {
                    constructor({
                        iceParameters,
                        iceCandidates,
                        dtlsParameters,
                        sctpParameters,
                        plainRtpParameters,
                        planB = false,
                    }) {
                        // MediaSection instances with same order as in the SDP.
                        this._mediaSections = [];
                        // MediaSection indices indexed by MID.
                        this._midToIndex = new Map();
                        this._iceParameters = iceParameters;
                        this._iceCandidates = iceCandidates;
                        this._dtlsParameters = dtlsParameters;
                        this._sctpParameters = sctpParameters;
                        this._plainRtpParameters = plainRtpParameters;
                        this._planB = planB;
                        this._sdpObject = {
                            version: 0,
                            origin: {
                                address: '0.0.0.0',
                                ipVer: 4,
                                netType: 'IN',
                                sessionId: 10000,
                                sessionVersion: 0,
                                username: 'mediasoup-client',
                            },
                            name: '-',
                            timing: { start: 0, stop: 0 },
                            media: [],
                        };
                        // If ICE parameters are given, add ICE-Lite indicator.
                        if (iceParameters && iceParameters.iceLite) {
                            this._sdpObject.icelite = 'ice-lite';
                        }
                        // If DTLS parameters are given, assume WebRTC and BUNDLE.
                        if (dtlsParameters) {
                            this._sdpObject.msidSemantic = { semantic: 'WMS', token: '*' };
                            // NOTE: We take the latest fingerprint.
                            const numFingerprints = this._dtlsParameters.fingerprints.length;
                            this._sdpObject.fingerprint = {
                                type: dtlsParameters.fingerprints[numFingerprints - 1].algorithm,
                                hash: dtlsParameters.fingerprints[numFingerprints - 1].value,
                            };
                            this._sdpObject.groups = [{ type: 'BUNDLE', mids: '' }];
                        }
                        // If there are plain RPT parameters, override SDP origin.
                        if (plainRtpParameters) {
                            this._sdpObject.origin.address = plainRtpParameters.ip;
                            this._sdpObject.origin.ipVer = plainRtpParameters.ipVersion;
                        }
                    }
                    updateIceParameters(iceParameters) {
                        logger.debug('updateIceParameters() [iceParameters:%o]', iceParameters);
                        this._iceParameters = iceParameters;
                        this._sdpObject.icelite = iceParameters.iceLite ? 'ice-lite' : undefined;
                        for (const mediaSection of this._mediaSections) {
                            mediaSection.setIceParameters(iceParameters);
                        }
                    }
                    updateDtlsRole(role) {
                        logger.debug('updateDtlsRole() [role:%s]', role);
                        this._dtlsParameters.role = role;
                        for (const mediaSection of this._mediaSections) {
                            mediaSection.setDtlsRole(role);
                        }
                    }
                    getNextMediaSectionIdx() {
                        // If a closed media section is found, return its index.
                        for (let idx = 0; idx < this._mediaSections.length; ++idx) {
                            const mediaSection = this._mediaSections[idx];
                            if (mediaSection.closed) {
                                return { idx, reuseMid: mediaSection.mid };
                            }
                        }
                        // If no closed media section is found, return next one.
                        return { idx: this._mediaSections.length };
                    }
                    send({
                        offerMediaObject,
                        reuseMid,
                        offerRtpParameters,
                        answerRtpParameters,
                        codecOptions,
                        extmapAllowMixed = false,
                    }) {
                        const mediaSection = new MediaSection_1.AnswerMediaSection({
                            iceParameters: this._iceParameters,
                            iceCandidates: this._iceCandidates,
                            dtlsParameters: this._dtlsParameters,
                            plainRtpParameters: this._plainRtpParameters,
                            planB: this._planB,
                            offerMediaObject,
                            offerRtpParameters,
                            answerRtpParameters,
                            codecOptions,
                            extmapAllowMixed,
                        });
                        // Unified-Plan with closed media section replacement.
                        if (reuseMid) {
                            this._replaceMediaSection(mediaSection, reuseMid);
                        }
                        // Unified-Plan or Plan-B with different media kind.
                        else if (!this._midToIndex.has(mediaSection.mid)) {
                            this._addMediaSection(mediaSection);
                        }
                        // Plan-B with same media kind.
                        else {
                            this._replaceMediaSection(mediaSection);
                        }
                    }
                    receive({ mid, kind, offerRtpParameters, streamId, trackId }) {
                        const idx = this._midToIndex.get(mid);
                        let mediaSection;
                        if (idx !== undefined) {
                            mediaSection = this._mediaSections[idx];
                        }
                        // Unified-Plan or different media kind.
                        if (!mediaSection) {
                            mediaSection = new MediaSection_1.OfferMediaSection({
                                iceParameters: this._iceParameters,
                                iceCandidates: this._iceCandidates,
                                dtlsParameters: this._dtlsParameters,
                                plainRtpParameters: this._plainRtpParameters,
                                planB: this._planB,
                                mid,
                                kind,
                                offerRtpParameters,
                                streamId,
                                trackId,
                            });
                            // Let's try to recycle a closed media section (if any).
                            // NOTE: Yes, we can recycle a closed m=audio section with a new m=video.
                            const oldMediaSection = this._mediaSections.find((m) => m.closed);
                            if (oldMediaSection) {
                                this._replaceMediaSection(mediaSection, oldMediaSection.mid);
                            } else {
                                this._addMediaSection(mediaSection);
                            }
                        }
                        // Plan-B.
                        else {
                            mediaSection.planBReceive({ offerRtpParameters, streamId, trackId });
                            this._replaceMediaSection(mediaSection);
                        }
                    }
                    pauseMediaSection(mid) {
                        const mediaSection = this._findMediaSection(mid);
                        mediaSection.pause();
                    }
                    resumeSendingMediaSection(mid) {
                        const mediaSection = this._findMediaSection(mid);
                        mediaSection.resume();
                    }
                    resumeReceivingMediaSection(mid) {
                        const mediaSection = this._findMediaSection(mid);
                        mediaSection.resume();
                    }
                    disableMediaSection(mid) {
                        const mediaSection = this._findMediaSection(mid);
                        mediaSection.disable();
                    }
                    /**
                     * Closes media section. Returns true if the given MID corresponds to a m
                     * section that has been indeed closed. False otherwise.
                     *
                     * NOTE: Closing the first m section is a pain since it invalidates the bundled
                     * transport, so instead closing it we just disable it.
                     */
                    closeMediaSection(mid) {
                        const mediaSection = this._findMediaSection(mid);
                        // NOTE: Closing the first m section is a pain since it invalidates the
                        // bundled transport, so let's avoid it.
                        if (mid === this._firstMid) {
                            logger.debug(
                                'closeMediaSection() | cannot close first media section, disabling it instead [mid:%s]',
                                mid,
                            );
                            this.disableMediaSection(mid);
                            return false;
                        }
                        mediaSection.close();
                        // Regenerate BUNDLE mids.
                        this._regenerateBundleMids();
                        return true;
                    }
                    muxMediaSectionSimulcast(mid, encodings) {
                        const mediaSection = this._findMediaSection(mid);
                        mediaSection.muxSimulcastStreams(encodings);
                        this._replaceMediaSection(mediaSection);
                    }
                    planBStopReceiving({ mid, offerRtpParameters }) {
                        const mediaSection = this._findMediaSection(mid);
                        mediaSection.planBStopReceiving({ offerRtpParameters });
                        this._replaceMediaSection(mediaSection);
                    }
                    sendSctpAssociation({ offerMediaObject }) {
                        const mediaSection = new MediaSection_1.AnswerMediaSection({
                            iceParameters: this._iceParameters,
                            iceCandidates: this._iceCandidates,
                            dtlsParameters: this._dtlsParameters,
                            sctpParameters: this._sctpParameters,
                            plainRtpParameters: this._plainRtpParameters,
                            offerMediaObject,
                        });
                        this._addMediaSection(mediaSection);
                    }
                    receiveSctpAssociation({ oldDataChannelSpec = false } = {}) {
                        const mediaSection = new MediaSection_1.OfferMediaSection({
                            iceParameters: this._iceParameters,
                            iceCandidates: this._iceCandidates,
                            dtlsParameters: this._dtlsParameters,
                            sctpParameters: this._sctpParameters,
                            plainRtpParameters: this._plainRtpParameters,
                            mid: 'datachannel',
                            kind: 'application',
                            oldDataChannelSpec,
                        });
                        this._addMediaSection(mediaSection);
                    }
                    getSdp() {
                        // Increase SDP version.
                        this._sdpObject.origin.sessionVersion++;
                        return sdpTransform.write(this._sdpObject);
                    }
                    _addMediaSection(newMediaSection) {
                        if (!this._firstMid) {
                            this._firstMid = newMediaSection.mid;
                        }
                        // Add to the vector.
                        this._mediaSections.push(newMediaSection);
                        // Add to the map.
                        this._midToIndex.set(newMediaSection.mid, this._mediaSections.length - 1);
                        // Add to the SDP object.
                        this._sdpObject.media.push(newMediaSection.getObject());
                        // Regenerate BUNDLE mids.
                        this._regenerateBundleMids();
                    }
                    _replaceMediaSection(newMediaSection, reuseMid) {
                        // Store it in the map.
                        if (typeof reuseMid === 'string') {
                            const idx = this._midToIndex.get(reuseMid);
                            if (idx === undefined) {
                                throw new Error(
                                    `no media section found for reuseMid '${reuseMid}'`,
                                );
                            }
                            const oldMediaSection = this._mediaSections[idx];
                            // Replace the index in the vector with the new media section.
                            this._mediaSections[idx] = newMediaSection;
                            // Update the map.
                            this._midToIndex.delete(oldMediaSection.mid);
                            this._midToIndex.set(newMediaSection.mid, idx);
                            // Update the SDP object.
                            this._sdpObject.media[idx] = newMediaSection.getObject();
                            // Regenerate BUNDLE mids.
                            this._regenerateBundleMids();
                        } else {
                            const idx = this._midToIndex.get(newMediaSection.mid);
                            if (idx === undefined) {
                                throw new Error(
                                    `no media section found with mid '${newMediaSection.mid}'`,
                                );
                            }
                            // Replace the index in the vector with the new media section.
                            this._mediaSections[idx] = newMediaSection;
                            // Update the SDP object.
                            this._sdpObject.media[idx] = newMediaSection.getObject();
                        }
                    }
                    _findMediaSection(mid) {
                        const idx = this._midToIndex.get(mid);
                        if (idx === undefined) {
                            throw new Error(`no media section found with mid '${mid}'`);
                        }
                        return this._mediaSections[idx];
                    }
                    _regenerateBundleMids() {
                        if (!this._dtlsParameters) {
                            return;
                        }
                        this._sdpObject.groups[0].mids = this._mediaSections
                            .filter((mediaSection) => !mediaSection.closed)
                            .map((mediaSection) => mediaSection.mid)
                            .join(' ');
                    }
                }
                exports.RemoteSdp = RemoteSdp;
            },
            { '../../Logger': 39, './MediaSection': 59, 'sdp-transform': 73 },
        ],
        61: [
            function (require, module, exports) {
                'use strict';
                var __createBinding =
                    (this && this.__createBinding) ||
                    (Object.create
                        ? function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              var desc = Object.getOwnPropertyDescriptor(m, k);
                              if (
                                  !desc ||
                                  ('get' in desc
                                      ? !m.__esModule
                                      : desc.writable || desc.configurable)
                              ) {
                                  desc = {
                                      enumerable: true,
                                      get: function () {
                                          return m[k];
                                      },
                                  };
                              }
                              Object.defineProperty(o, k2, desc);
                          }
                        : function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              o[k2] = m[k];
                          });
                var __setModuleDefault =
                    (this && this.__setModuleDefault) ||
                    (Object.create
                        ? function (o, v) {
                              Object.defineProperty(o, 'default', { enumerable: true, value: v });
                          }
                        : function (o, v) {
                              o['default'] = v;
                          });
                var __importStar =
                    (this && this.__importStar) ||
                    function (mod) {
                        if (mod && mod.__esModule) return mod;
                        var result = {};
                        if (mod != null)
                            for (var k in mod)
                                if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
                                    __createBinding(result, mod, k);
                        __setModuleDefault(result, mod);
                        return result;
                    };
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.applyCodecParameters =
                    exports.getCname =
                    exports.extractDtlsParameters =
                    exports.extractRtpCapabilities =
                        void 0;
                const sdpTransform = __importStar(require('sdp-transform'));
                /**
                 * This function must be called with an SDP with 1 m=audio and 1 m=video
                 * sections.
                 */
                function extractRtpCapabilities({ sdpObject }) {
                    // Map of RtpCodecParameters indexed by payload type.
                    const codecsMap = new Map();
                    // Array of RtpHeaderExtensions.
                    const headerExtensions = [];
                    // Whether a m=audio/video section has been already found.
                    let gotAudio = false;
                    let gotVideo = false;
                    for (const m of sdpObject.media) {
                        const kind = m.type;
                        switch (kind) {
                            case 'audio': {
                                if (gotAudio) {
                                    continue;
                                }
                                gotAudio = true;
                                break;
                            }
                            case 'video': {
                                if (gotVideo) {
                                    continue;
                                }
                                gotVideo = true;
                                break;
                            }
                            default: {
                                continue;
                            }
                        }
                        // Get codecs.
                        for (const rtp of m.rtp) {
                            const codec = {
                                kind: kind,
                                mimeType: `${kind}/${rtp.codec}`,
                                preferredPayloadType: rtp.payload,
                                clockRate: rtp.rate,
                                channels: rtp.encoding,
                                parameters: {},
                                rtcpFeedback: [],
                            };
                            codecsMap.set(codec.preferredPayloadType, codec);
                        }
                        // Get codec parameters.
                        for (const fmtp of m.fmtp || []) {
                            const parameters = sdpTransform.parseParams(fmtp.config);
                            const codec = codecsMap.get(fmtp.payload);
                            if (!codec) {
                                continue;
                            }
                            // Specials case to convert parameter value to string.
                            if (parameters && parameters.hasOwnProperty('profile-level-id')) {
                                parameters['profile-level-id'] = String(
                                    parameters['profile-level-id'],
                                );
                            }
                            codec.parameters = parameters;
                        }
                        // Get RTCP feedback for each codec.
                        for (const fb of m.rtcpFb || []) {
                            const feedback = {
                                type: fb.type,
                                parameter: fb.subtype,
                            };
                            if (!feedback.parameter) {
                                delete feedback.parameter;
                            }
                            // rtcp-fb payload is not '*', so just apply it to its corresponding
                            // codec.
                            if (fb.payload !== '*') {
                                const codec = codecsMap.get(fb.payload);
                                if (!codec) {
                                    continue;
                                }
                                codec.rtcpFeedback.push(feedback);
                            }
                            // If rtcp-fb payload is '*' it must be applied to all codecs with same
                            // kind (with some exceptions such as RTX codec).
                            else {
                                for (const codec of codecsMap.values()) {
                                    if (codec.kind === kind && !/.+\/rtx$/i.test(codec.mimeType)) {
                                        codec.rtcpFeedback.push(feedback);
                                    }
                                }
                            }
                        }
                        // Get RTP header extensions.
                        for (const ext of m.ext || []) {
                            // Ignore encrypted extensions (not yet supported in mediasoup).
                            if (ext['encrypt-uri']) {
                                continue;
                            }
                            const headerExtension = {
                                kind: kind,
                                uri: ext.uri,
                                preferredId: ext.value,
                            };
                            headerExtensions.push(headerExtension);
                        }
                    }
                    const rtpCapabilities = {
                        codecs: Array.from(codecsMap.values()),
                        headerExtensions: headerExtensions,
                    };
                    return rtpCapabilities;
                }
                exports.extractRtpCapabilities = extractRtpCapabilities;
                function extractDtlsParameters({ sdpObject }) {
                    let setup = sdpObject.setup;
                    let fingerprint = sdpObject.fingerprint;
                    if (!setup || !fingerprint) {
                        const mediaObject = (sdpObject.media || []).find((m) => m.port !== 0);
                        if (mediaObject) {
                            setup ?? (setup = mediaObject.setup);
                            fingerprint ?? (fingerprint = mediaObject.fingerprint);
                        }
                    }
                    if (!setup) {
                        throw new Error('no a=setup found at SDP session or media level');
                    } else if (!fingerprint) {
                        throw new Error('no a=fingerprint found at SDP session or media level');
                    }
                    let role;
                    switch (setup) {
                        case 'active':
                            role = 'client';
                            break;
                        case 'passive':
                            role = 'server';
                            break;
                        case 'actpass':
                            role = 'auto';
                            break;
                    }
                    const dtlsParameters = {
                        role,
                        fingerprints: [
                            {
                                algorithm: fingerprint.type,
                                value: fingerprint.hash,
                            },
                        ],
                    };
                    return dtlsParameters;
                }
                exports.extractDtlsParameters = extractDtlsParameters;
                function getCname({ offerMediaObject }) {
                    const ssrcCnameLine = (offerMediaObject.ssrcs || []).find(
                        (line) => line.attribute === 'cname',
                    );
                    if (!ssrcCnameLine) {
                        return '';
                    }
                    return ssrcCnameLine.value;
                }
                exports.getCname = getCname;
                /**
                 * Apply codec parameters in the given SDP m= section answer based on the
                 * given RTP parameters of an offer.
                 */
                function applyCodecParameters({ offerRtpParameters, answerMediaObject }) {
                    for (const codec of offerRtpParameters.codecs) {
                        const mimeType = codec.mimeType.toLowerCase();
                        // Avoid parsing codec parameters for unhandled codecs.
                        if (mimeType !== 'audio/opus') {
                            continue;
                        }
                        const rtp = (answerMediaObject.rtp || []).find(
                            (r) => r.payload === codec.payloadType,
                        );
                        if (!rtp) {
                            continue;
                        }
                        // Just in case.
                        answerMediaObject.fmtp = answerMediaObject.fmtp || [];
                        let fmtp = answerMediaObject.fmtp.find(
                            (f) => f.payload === codec.payloadType,
                        );
                        if (!fmtp) {
                            fmtp = { payload: codec.payloadType, config: '' };
                            answerMediaObject.fmtp.push(fmtp);
                        }
                        const parameters = sdpTransform.parseParams(fmtp.config);
                        switch (mimeType) {
                            case 'audio/opus': {
                                const spropStereo = codec.parameters['sprop-stereo'];
                                if (spropStereo !== undefined) {
                                    parameters.stereo = spropStereo ? 1 : 0;
                                }
                                break;
                            }
                        }
                        // Write the codec fmtp.config back.
                        fmtp.config = '';
                        for (const key of Object.keys(parameters)) {
                            if (fmtp.config) {
                                fmtp.config += ';';
                            }
                            fmtp.config += `${key}=${parameters[key]}`;
                        }
                    }
                }
                exports.applyCodecParameters = applyCodecParameters;
            },
            { 'sdp-transform': 73 },
        ],
        62: [
            function (require, module, exports) {
                'use strict';
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.addLegacySimulcast = exports.getRtpEncodings = void 0;
                function getRtpEncodings({ offerMediaObject, track }) {
                    // First media SSRC (or the only one).
                    let firstSsrc;
                    const ssrcs = new Set();
                    for (const line of offerMediaObject.ssrcs || []) {
                        if (line.attribute !== 'msid') {
                            continue;
                        }
                        const trackId = line.value.split(' ')[1];
                        if (trackId === track.id) {
                            const ssrc = line.id;
                            ssrcs.add(ssrc);
                            if (!firstSsrc) {
                                firstSsrc = ssrc;
                            }
                        }
                    }
                    if (ssrcs.size === 0) {
                        throw new Error(
                            `a=ssrc line with msid information not found [track.id:${track.id}]`,
                        );
                    }
                    const ssrcToRtxSsrc = new Map();
                    // First assume RTX is used.
                    for (const line of offerMediaObject.ssrcGroups || []) {
                        if (line.semantics !== 'FID') {
                            continue;
                        }
                        let [ssrc, rtxSsrc] = line.ssrcs.split(/\s+/);
                        ssrc = Number(ssrc);
                        rtxSsrc = Number(rtxSsrc);
                        if (ssrcs.has(ssrc)) {
                            // Remove both the SSRC and RTX SSRC from the set so later we know that they
                            // are already handled.
                            ssrcs.delete(ssrc);
                            ssrcs.delete(rtxSsrc);
                            // Add to the map.
                            ssrcToRtxSsrc.set(ssrc, rtxSsrc);
                        }
                    }
                    // If the set of SSRCs is not empty it means that RTX is not being used, so take
                    // media SSRCs from there.
                    for (const ssrc of ssrcs) {
                        // Add to the map.
                        ssrcToRtxSsrc.set(ssrc, null);
                    }
                    const encodings = [];
                    for (const [ssrc, rtxSsrc] of ssrcToRtxSsrc) {
                        const encoding = { ssrc };
                        if (rtxSsrc) {
                            encoding.rtx = { ssrc: rtxSsrc };
                        }
                        encodings.push(encoding);
                    }
                    return encodings;
                }
                exports.getRtpEncodings = getRtpEncodings;
                /**
                 * Adds multi-ssrc based simulcast into the given SDP media section offer.
                 */
                function addLegacySimulcast({ offerMediaObject, track, numStreams }) {
                    if (numStreams <= 1) {
                        throw new TypeError('numStreams must be greater than 1');
                    }
                    let firstSsrc;
                    let firstRtxSsrc;
                    let streamId;
                    // Get the SSRC.
                    const ssrcMsidLine = (offerMediaObject.ssrcs || []).find((line) => {
                        if (line.attribute !== 'msid') {
                            return false;
                        }
                        const trackId = line.value.split(' ')[1];
                        if (trackId === track.id) {
                            firstSsrc = line.id;
                            streamId = line.value.split(' ')[0];
                            return true;
                        } else {
                            return false;
                        }
                    });
                    if (!ssrcMsidLine) {
                        throw new Error(
                            `a=ssrc line with msid information not found [track.id:${track.id}]`,
                        );
                    }
                    // Get the SSRC for RTX.
                    (offerMediaObject.ssrcGroups || []).some((line) => {
                        if (line.semantics !== 'FID') {
                            return false;
                        }
                        const ssrcs = line.ssrcs.split(/\s+/);
                        if (Number(ssrcs[0]) === firstSsrc) {
                            firstRtxSsrc = Number(ssrcs[1]);
                            return true;
                        } else {
                            return false;
                        }
                    });
                    const ssrcCnameLine = offerMediaObject.ssrcs.find(
                        (line) => line.attribute === 'cname' && line.id === firstSsrc,
                    );
                    if (!ssrcCnameLine) {
                        throw new Error(
                            `a=ssrc line with cname information not found [track.id:${track.id}]`,
                        );
                    }
                    const cname = ssrcCnameLine.value;
                    const ssrcs = [];
                    const rtxSsrcs = [];
                    for (let i = 0; i < numStreams; ++i) {
                        ssrcs.push(firstSsrc + i);
                        if (firstRtxSsrc) {
                            rtxSsrcs.push(firstRtxSsrc + i);
                        }
                    }
                    offerMediaObject.ssrcGroups = offerMediaObject.ssrcGroups || [];
                    offerMediaObject.ssrcs = offerMediaObject.ssrcs || [];
                    offerMediaObject.ssrcGroups.push({
                        semantics: 'SIM',
                        ssrcs: ssrcs.join(' '),
                    });
                    for (let i = 0; i < ssrcs.length; ++i) {
                        const ssrc = ssrcs[i];
                        offerMediaObject.ssrcs.push({
                            id: ssrc,
                            attribute: 'cname',
                            value: cname,
                        });
                        offerMediaObject.ssrcs.push({
                            id: ssrc,
                            attribute: 'msid',
                            value: `${streamId} ${track.id}`,
                        });
                    }
                    for (let i = 0; i < rtxSsrcs.length; ++i) {
                        const ssrc = ssrcs[i];
                        const rtxSsrc = rtxSsrcs[i];
                        offerMediaObject.ssrcs.push({
                            id: rtxSsrc,
                            attribute: 'cname',
                            value: cname,
                        });
                        offerMediaObject.ssrcs.push({
                            id: rtxSsrc,
                            attribute: 'msid',
                            value: `${streamId} ${track.id}`,
                        });
                        offerMediaObject.ssrcGroups.push({
                            semantics: 'FID',
                            ssrcs: `${ssrc} ${rtxSsrc}`,
                        });
                    }
                }
                exports.addLegacySimulcast = addLegacySimulcast;
            },
            {},
        ],
        63: [
            function (require, module, exports) {
                'use strict';
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.addLegacySimulcast = exports.getRtpEncodings = void 0;
                function getRtpEncodings({ offerMediaObject }) {
                    const ssrcs = new Set();
                    for (const line of offerMediaObject.ssrcs || []) {
                        const ssrc = line.id;
                        ssrcs.add(ssrc);
                    }
                    if (ssrcs.size === 0) {
                        throw new Error('no a=ssrc lines found');
                    }
                    const ssrcToRtxSsrc = new Map();
                    // First assume RTX is used.
                    for (const line of offerMediaObject.ssrcGroups || []) {
                        if (line.semantics !== 'FID') {
                            continue;
                        }
                        let [ssrc, rtxSsrc] = line.ssrcs.split(/\s+/);
                        ssrc = Number(ssrc);
                        rtxSsrc = Number(rtxSsrc);
                        if (ssrcs.has(ssrc)) {
                            // Remove both the SSRC and RTX SSRC from the set so later we know
                            // that they are already handled.
                            ssrcs.delete(ssrc);
                            ssrcs.delete(rtxSsrc);
                            // Add to the map.
                            ssrcToRtxSsrc.set(ssrc, rtxSsrc);
                        }
                    }
                    // If the set of SSRCs is not empty it means that RTX is not being used, so
                    // take media SSRCs from there.
                    for (const ssrc of ssrcs) {
                        // Add to the map.
                        ssrcToRtxSsrc.set(ssrc, null);
                    }
                    const encodings = [];
                    for (const [ssrc, rtxSsrc] of ssrcToRtxSsrc) {
                        const encoding = { ssrc };
                        if (rtxSsrc) {
                            encoding.rtx = { ssrc: rtxSsrc };
                        }
                        encodings.push(encoding);
                    }
                    return encodings;
                }
                exports.getRtpEncodings = getRtpEncodings;
                /**
                 * Adds multi-ssrc based simulcast into the given SDP media section offer.
                 */
                function addLegacySimulcast({ offerMediaObject, numStreams }) {
                    if (numStreams <= 1) {
                        throw new TypeError('numStreams must be greater than 1');
                    }
                    // Get the SSRC.
                    const ssrcMsidLine = (offerMediaObject.ssrcs || []).find(
                        (line) => line.attribute === 'msid',
                    );
                    if (!ssrcMsidLine) {
                        throw new Error('a=ssrc line with msid information not found');
                    }
                    const [streamId, trackId] = ssrcMsidLine.value.split(' ');
                    const firstSsrc = ssrcMsidLine.id;
                    let firstRtxSsrc;
                    // Get the SSRC for RTX.
                    (offerMediaObject.ssrcGroups || []).some((line) => {
                        if (line.semantics !== 'FID') {
                            return false;
                        }
                        const ssrcs = line.ssrcs.split(/\s+/);
                        if (Number(ssrcs[0]) === firstSsrc) {
                            firstRtxSsrc = Number(ssrcs[1]);
                            return true;
                        } else {
                            return false;
                        }
                    });
                    const ssrcCnameLine = offerMediaObject.ssrcs.find(
                        (line) => line.attribute === 'cname',
                    );
                    if (!ssrcCnameLine) {
                        throw new Error('a=ssrc line with cname information not found');
                    }
                    const cname = ssrcCnameLine.value;
                    const ssrcs = [];
                    const rtxSsrcs = [];
                    for (let i = 0; i < numStreams; ++i) {
                        ssrcs.push(firstSsrc + i);
                        if (firstRtxSsrc) {
                            rtxSsrcs.push(firstRtxSsrc + i);
                        }
                    }
                    offerMediaObject.ssrcGroups = [];
                    offerMediaObject.ssrcs = [];
                    offerMediaObject.ssrcGroups.push({
                        semantics: 'SIM',
                        ssrcs: ssrcs.join(' '),
                    });
                    for (let i = 0; i < ssrcs.length; ++i) {
                        const ssrc = ssrcs[i];
                        offerMediaObject.ssrcs.push({
                            id: ssrc,
                            attribute: 'cname',
                            value: cname,
                        });
                        offerMediaObject.ssrcs.push({
                            id: ssrc,
                            attribute: 'msid',
                            value: `${streamId} ${trackId}`,
                        });
                    }
                    for (let i = 0; i < rtxSsrcs.length; ++i) {
                        const ssrc = ssrcs[i];
                        const rtxSsrc = rtxSsrcs[i];
                        offerMediaObject.ssrcs.push({
                            id: rtxSsrc,
                            attribute: 'cname',
                            value: cname,
                        });
                        offerMediaObject.ssrcs.push({
                            id: rtxSsrc,
                            attribute: 'msid',
                            value: `${streamId} ${trackId}`,
                        });
                        offerMediaObject.ssrcGroups.push({
                            semantics: 'FID',
                            ssrcs: `${ssrc} ${rtxSsrc}`,
                        });
                    }
                }
                exports.addLegacySimulcast = addLegacySimulcast;
            },
            {},
        ],
        64: [
            function (require, module, exports) {
                'use strict';
                var __createBinding =
                    (this && this.__createBinding) ||
                    (Object.create
                        ? function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              var desc = Object.getOwnPropertyDescriptor(m, k);
                              if (
                                  !desc ||
                                  ('get' in desc
                                      ? !m.__esModule
                                      : desc.writable || desc.configurable)
                              ) {
                                  desc = {
                                      enumerable: true,
                                      get: function () {
                                          return m[k];
                                      },
                                  };
                              }
                              Object.defineProperty(o, k2, desc);
                          }
                        : function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              o[k2] = m[k];
                          });
                var __setModuleDefault =
                    (this && this.__setModuleDefault) ||
                    (Object.create
                        ? function (o, v) {
                              Object.defineProperty(o, 'default', { enumerable: true, value: v });
                          }
                        : function (o, v) {
                              o['default'] = v;
                          });
                var __importStar =
                    (this && this.__importStar) ||
                    function (mod) {
                        if (mod && mod.__esModule) return mod;
                        var result = {};
                        if (mod != null)
                            for (var k in mod)
                                if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
                                    __createBinding(result, mod, k);
                        __setModuleDefault(result, mod);
                        return result;
                    };
                var __importDefault =
                    (this && this.__importDefault) ||
                    function (mod) {
                        return mod && mod.__esModule ? mod : { default: mod };
                    };
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.debug =
                    exports.parseScalabilityMode =
                    exports.detectDevice =
                    exports.Device =
                    exports.version =
                    exports.types =
                        void 0;
                const debug_1 = __importDefault(require('debug'));
                exports.debug = debug_1.default;
                const Device_1 = require('./Device');
                Object.defineProperty(exports, 'Device', {
                    enumerable: true,
                    get: function () {
                        return Device_1.Device;
                    },
                });
                Object.defineProperty(exports, 'detectDevice', {
                    enumerable: true,
                    get: function () {
                        return Device_1.detectDevice;
                    },
                });
                const types = __importStar(require('./types'));
                exports.types = types;
                /**
                 * Expose mediasoup-client version.
                 */
                exports.version = '3.6.100';
                /**
                 * Expose parseScalabilityMode() function.
                 */
                var scalabilityModes_1 = require('./scalabilityModes');
                Object.defineProperty(exports, 'parseScalabilityMode', {
                    enumerable: true,
                    get: function () {
                        return scalabilityModes_1.parse;
                    },
                });
            },
            { './Device': 37, './scalabilityModes': 66, './types': 67, debug: 8 },
        ],
        65: [
            function (require, module, exports) {
                'use strict';
                var __createBinding =
                    (this && this.__createBinding) ||
                    (Object.create
                        ? function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              var desc = Object.getOwnPropertyDescriptor(m, k);
                              if (
                                  !desc ||
                                  ('get' in desc
                                      ? !m.__esModule
                                      : desc.writable || desc.configurable)
                              ) {
                                  desc = {
                                      enumerable: true,
                                      get: function () {
                                          return m[k];
                                      },
                                  };
                              }
                              Object.defineProperty(o, k2, desc);
                          }
                        : function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              o[k2] = m[k];
                          });
                var __setModuleDefault =
                    (this && this.__setModuleDefault) ||
                    (Object.create
                        ? function (o, v) {
                              Object.defineProperty(o, 'default', { enumerable: true, value: v });
                          }
                        : function (o, v) {
                              o['default'] = v;
                          });
                var __importStar =
                    (this && this.__importStar) ||
                    function (mod) {
                        if (mod && mod.__esModule) return mod;
                        var result = {};
                        if (mod != null)
                            for (var k in mod)
                                if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
                                    __createBinding(result, mod, k);
                        __setModuleDefault(result, mod);
                        return result;
                    };
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.canReceive =
                    exports.canSend =
                    exports.generateProbatorRtpParameters =
                    exports.reduceCodecs =
                    exports.getSendingRemoteRtpParameters =
                    exports.getSendingRtpParameters =
                    exports.getRecvRtpCapabilities =
                    exports.getExtendedRtpCapabilities =
                    exports.validateSctpStreamParameters =
                    exports.validateSctpParameters =
                    exports.validateNumSctpStreams =
                    exports.validateSctpCapabilities =
                    exports.validateRtcpParameters =
                    exports.validateRtpEncodingParameters =
                    exports.validateRtpHeaderExtensionParameters =
                    exports.validateRtpCodecParameters =
                    exports.validateRtpParameters =
                    exports.validateRtpHeaderExtension =
                    exports.validateRtcpFeedback =
                    exports.validateRtpCodecCapability =
                    exports.validateRtpCapabilities =
                        void 0;
                const h264 = __importStar(require('h264-profile-level-id'));
                const utils = __importStar(require('./utils'));
                const RTP_PROBATOR_MID = 'probator';
                const RTP_PROBATOR_SSRC = 1234;
                const RTP_PROBATOR_CODEC_PAYLOAD_TYPE = 127;
                /**
                 * Validates RtpCapabilities. It may modify given data by adding missing
                 * fields with default values.
                 * It throws if invalid.
                 */
                function validateRtpCapabilities(caps) {
                    if (typeof caps !== 'object') {
                        throw new TypeError('caps is not an object');
                    }
                    // codecs is optional. If unset, fill with an empty array.
                    if (caps.codecs && !Array.isArray(caps.codecs)) {
                        throw new TypeError('caps.codecs is not an array');
                    } else if (!caps.codecs) {
                        caps.codecs = [];
                    }
                    for (const codec of caps.codecs) {
                        validateRtpCodecCapability(codec);
                    }
                    // headerExtensions is optional. If unset, fill with an empty array.
                    if (caps.headerExtensions && !Array.isArray(caps.headerExtensions)) {
                        throw new TypeError('caps.headerExtensions is not an array');
                    } else if (!caps.headerExtensions) {
                        caps.headerExtensions = [];
                    }
                    for (const ext of caps.headerExtensions) {
                        validateRtpHeaderExtension(ext);
                    }
                }
                exports.validateRtpCapabilities = validateRtpCapabilities;
                /**
                 * Validates RtpCodecCapability. It may modify given data by adding missing
                 * fields with default values.
                 * It throws if invalid.
                 */
                function validateRtpCodecCapability(codec) {
                    const MimeTypeRegex = new RegExp('^(audio|video)/(.+)', 'i');
                    if (typeof codec !== 'object') {
                        throw new TypeError('codec is not an object');
                    }
                    // mimeType is mandatory.
                    if (!codec.mimeType || typeof codec.mimeType !== 'string') {
                        throw new TypeError('missing codec.mimeType');
                    }
                    const mimeTypeMatch = MimeTypeRegex.exec(codec.mimeType);
                    if (!mimeTypeMatch) {
                        throw new TypeError('invalid codec.mimeType');
                    }
                    // Just override kind with media component of mimeType.
                    codec.kind = mimeTypeMatch[1].toLowerCase();
                    // preferredPayloadType is optional.
                    if (
                        codec.preferredPayloadType &&
                        typeof codec.preferredPayloadType !== 'number'
                    ) {
                        throw new TypeError('invalid codec.preferredPayloadType');
                    }
                    // clockRate is mandatory.
                    if (typeof codec.clockRate !== 'number') {
                        throw new TypeError('missing codec.clockRate');
                    }
                    // channels is optional. If unset, set it to 1 (just if audio).
                    if (codec.kind === 'audio') {
                        if (typeof codec.channels !== 'number') {
                            codec.channels = 1;
                        }
                    } else {
                        delete codec.channels;
                    }
                    // parameters is optional. If unset, set it to an empty object.
                    if (!codec.parameters || typeof codec.parameters !== 'object') {
                        codec.parameters = {};
                    }
                    for (const key of Object.keys(codec.parameters)) {
                        let value = codec.parameters[key];
                        if (value === undefined) {
                            codec.parameters[key] = '';
                            value = '';
                        }
                        if (typeof value !== 'string' && typeof value !== 'number') {
                            throw new TypeError(
                                `invalid codec parameter [key:${key}s, value:${value}]`,
                            );
                        }
                        // Specific parameters validation.
                        if (key === 'apt') {
                            if (typeof value !== 'number') {
                                throw new TypeError('invalid codec apt parameter');
                            }
                        }
                    }
                    // rtcpFeedback is optional. If unset, set it to an empty array.
                    if (!codec.rtcpFeedback || !Array.isArray(codec.rtcpFeedback)) {
                        codec.rtcpFeedback = [];
                    }
                    for (const fb of codec.rtcpFeedback) {
                        validateRtcpFeedback(fb);
                    }
                }
                exports.validateRtpCodecCapability = validateRtpCodecCapability;
                /**
                 * Validates RtcpFeedback. It may modify given data by adding missing
                 * fields with default values.
                 * It throws if invalid.
                 */
                function validateRtcpFeedback(fb) {
                    if (typeof fb !== 'object') {
                        throw new TypeError('fb is not an object');
                    }
                    // type is mandatory.
                    if (!fb.type || typeof fb.type !== 'string') {
                        throw new TypeError('missing fb.type');
                    }
                    // parameter is optional. If unset set it to an empty string.
                    if (!fb.parameter || typeof fb.parameter !== 'string') {
                        fb.parameter = '';
                    }
                }
                exports.validateRtcpFeedback = validateRtcpFeedback;
                /**
                 * Validates RtpHeaderExtension. It may modify given data by adding missing
                 * fields with default values.
                 * It throws if invalid.
                 */
                function validateRtpHeaderExtension(ext) {
                    if (typeof ext !== 'object') {
                        throw new TypeError('ext is not an object');
                    }
                    // kind is mandatory.
                    if (ext.kind !== 'audio' && ext.kind !== 'video') {
                        throw new TypeError('invalid ext.kind');
                    }
                    // uri is mandatory.
                    if (!ext.uri || typeof ext.uri !== 'string') {
                        throw new TypeError('missing ext.uri');
                    }
                    // preferredId is mandatory.
                    if (typeof ext.preferredId !== 'number') {
                        throw new TypeError('missing ext.preferredId');
                    }
                    // preferredEncrypt is optional. If unset set it to false.
                    if (ext.preferredEncrypt && typeof ext.preferredEncrypt !== 'boolean') {
                        throw new TypeError('invalid ext.preferredEncrypt');
                    } else if (!ext.preferredEncrypt) {
                        ext.preferredEncrypt = false;
                    }
                    // direction is optional. If unset set it to sendrecv.
                    if (ext.direction && typeof ext.direction !== 'string') {
                        throw new TypeError('invalid ext.direction');
                    } else if (!ext.direction) {
                        ext.direction = 'sendrecv';
                    }
                }
                exports.validateRtpHeaderExtension = validateRtpHeaderExtension;
                /**
                 * Validates RtpParameters. It may modify given data by adding missing
                 * fields with default values.
                 * It throws if invalid.
                 */
                function validateRtpParameters(params) {
                    if (typeof params !== 'object') {
                        throw new TypeError('params is not an object');
                    }
                    // mid is optional.
                    if (params.mid && typeof params.mid !== 'string') {
                        throw new TypeError('params.mid is not a string');
                    }
                    // codecs is mandatory.
                    if (!Array.isArray(params.codecs)) {
                        throw new TypeError('missing params.codecs');
                    }
                    for (const codec of params.codecs) {
                        validateRtpCodecParameters(codec);
                    }
                    // headerExtensions is optional. If unset, fill with an empty array.
                    if (params.headerExtensions && !Array.isArray(params.headerExtensions)) {
                        throw new TypeError('params.headerExtensions is not an array');
                    } else if (!params.headerExtensions) {
                        params.headerExtensions = [];
                    }
                    for (const ext of params.headerExtensions) {
                        validateRtpHeaderExtensionParameters(ext);
                    }
                    // encodings is optional. If unset, fill with an empty array.
                    if (params.encodings && !Array.isArray(params.encodings)) {
                        throw new TypeError('params.encodings is not an array');
                    } else if (!params.encodings) {
                        params.encodings = [];
                    }
                    for (const encoding of params.encodings) {
                        validateRtpEncodingParameters(encoding);
                    }
                    // rtcp is optional. If unset, fill with an empty object.
                    if (params.rtcp && typeof params.rtcp !== 'object') {
                        throw new TypeError('params.rtcp is not an object');
                    } else if (!params.rtcp) {
                        params.rtcp = {};
                    }
                    validateRtcpParameters(params.rtcp);
                }
                exports.validateRtpParameters = validateRtpParameters;
                /**
                 * Validates RtpCodecParameters. It may modify given data by adding missing
                 * fields with default values.
                 * It throws if invalid.
                 */
                function validateRtpCodecParameters(codec) {
                    const MimeTypeRegex = new RegExp('^(audio|video)/(.+)', 'i');
                    if (typeof codec !== 'object') {
                        throw new TypeError('codec is not an object');
                    }
                    // mimeType is mandatory.
                    if (!codec.mimeType || typeof codec.mimeType !== 'string') {
                        throw new TypeError('missing codec.mimeType');
                    }
                    const mimeTypeMatch = MimeTypeRegex.exec(codec.mimeType);
                    if (!mimeTypeMatch) {
                        throw new TypeError('invalid codec.mimeType');
                    }
                    // payloadType is mandatory.
                    if (typeof codec.payloadType !== 'number') {
                        throw new TypeError('missing codec.payloadType');
                    }
                    // clockRate is mandatory.
                    if (typeof codec.clockRate !== 'number') {
                        throw new TypeError('missing codec.clockRate');
                    }
                    const kind = mimeTypeMatch[1].toLowerCase();
                    // channels is optional. If unset, set it to 1 (just if audio).
                    if (kind === 'audio') {
                        if (typeof codec.channels !== 'number') {
                            codec.channels = 1;
                        }
                    } else {
                        delete codec.channels;
                    }
                    // parameters is optional. If unset, set it to an empty object.
                    if (!codec.parameters || typeof codec.parameters !== 'object') {
                        codec.parameters = {};
                    }
                    for (const key of Object.keys(codec.parameters)) {
                        let value = codec.parameters[key];
                        if (value === undefined) {
                            codec.parameters[key] = '';
                            value = '';
                        }
                        if (typeof value !== 'string' && typeof value !== 'number') {
                            throw new TypeError(
                                `invalid codec parameter [key:${key}s, value:${value}]`,
                            );
                        }
                        // Specific parameters validation.
                        if (key === 'apt') {
                            if (typeof value !== 'number') {
                                throw new TypeError('invalid codec apt parameter');
                            }
                        }
                    }
                    // rtcpFeedback is optional. If unset, set it to an empty array.
                    if (!codec.rtcpFeedback || !Array.isArray(codec.rtcpFeedback)) {
                        codec.rtcpFeedback = [];
                    }
                    for (const fb of codec.rtcpFeedback) {
                        validateRtcpFeedback(fb);
                    }
                }
                exports.validateRtpCodecParameters = validateRtpCodecParameters;
                /**
                 * Validates RtpHeaderExtensionParameteters. It may modify given data by adding missing
                 * fields with default values.
                 * It throws if invalid.
                 */
                function validateRtpHeaderExtensionParameters(ext) {
                    if (typeof ext !== 'object') {
                        throw new TypeError('ext is not an object');
                    }
                    // uri is mandatory.
                    if (!ext.uri || typeof ext.uri !== 'string') {
                        throw new TypeError('missing ext.uri');
                    }
                    // id is mandatory.
                    if (typeof ext.id !== 'number') {
                        throw new TypeError('missing ext.id');
                    }
                    // encrypt is optional. If unset set it to false.
                    if (ext.encrypt && typeof ext.encrypt !== 'boolean') {
                        throw new TypeError('invalid ext.encrypt');
                    } else if (!ext.encrypt) {
                        ext.encrypt = false;
                    }
                    // parameters is optional. If unset, set it to an empty object.
                    if (!ext.parameters || typeof ext.parameters !== 'object') {
                        ext.parameters = {};
                    }
                    for (const key of Object.keys(ext.parameters)) {
                        let value = ext.parameters[key];
                        if (value === undefined) {
                            ext.parameters[key] = '';
                            value = '';
                        }
                        if (typeof value !== 'string' && typeof value !== 'number') {
                            throw new TypeError('invalid header extension parameter');
                        }
                    }
                }
                exports.validateRtpHeaderExtensionParameters = validateRtpHeaderExtensionParameters;
                /**
                 * Validates RtpEncodingParameters. It may modify given data by adding missing
                 * fields with default values.
                 * It throws if invalid.
                 */
                function validateRtpEncodingParameters(encoding) {
                    if (typeof encoding !== 'object') {
                        throw new TypeError('encoding is not an object');
                    }
                    // ssrc is optional.
                    if (encoding.ssrc && typeof encoding.ssrc !== 'number') {
                        throw new TypeError('invalid encoding.ssrc');
                    }
                    // rid is optional.
                    if (encoding.rid && typeof encoding.rid !== 'string') {
                        throw new TypeError('invalid encoding.rid');
                    }
                    // rtx is optional.
                    if (encoding.rtx && typeof encoding.rtx !== 'object') {
                        throw new TypeError('invalid encoding.rtx');
                    } else if (encoding.rtx) {
                        // RTX ssrc is mandatory if rtx is present.
                        if (typeof encoding.rtx.ssrc !== 'number') {
                            throw new TypeError('missing encoding.rtx.ssrc');
                        }
                    }
                    // dtx is optional. If unset set it to false.
                    if (!encoding.dtx || typeof encoding.dtx !== 'boolean') {
                        encoding.dtx = false;
                    }
                    // scalabilityMode is optional.
                    if (encoding.scalabilityMode && typeof encoding.scalabilityMode !== 'string') {
                        throw new TypeError('invalid encoding.scalabilityMode');
                    }
                }
                exports.validateRtpEncodingParameters = validateRtpEncodingParameters;
                /**
                 * Validates RtcpParameters. It may modify given data by adding missing
                 * fields with default values.
                 * It throws if invalid.
                 */
                function validateRtcpParameters(rtcp) {
                    if (typeof rtcp !== 'object') {
                        throw new TypeError('rtcp is not an object');
                    }
                    // cname is optional.
                    if (rtcp.cname && typeof rtcp.cname !== 'string') {
                        throw new TypeError('invalid rtcp.cname');
                    }
                    // reducedSize is optional. If unset set it to true.
                    if (!rtcp.reducedSize || typeof rtcp.reducedSize !== 'boolean') {
                        rtcp.reducedSize = true;
                    }
                }
                exports.validateRtcpParameters = validateRtcpParameters;
                /**
                 * Validates SctpCapabilities. It may modify given data by adding missing
                 * fields with default values.
                 * It throws if invalid.
                 */
                function validateSctpCapabilities(caps) {
                    if (typeof caps !== 'object') {
                        throw new TypeError('caps is not an object');
                    }
                    // numStreams is mandatory.
                    if (!caps.numStreams || typeof caps.numStreams !== 'object') {
                        throw new TypeError('missing caps.numStreams');
                    }
                    validateNumSctpStreams(caps.numStreams);
                }
                exports.validateSctpCapabilities = validateSctpCapabilities;
                /**
                 * Validates NumSctpStreams. It may modify given data by adding missing
                 * fields with default values.
                 * It throws if invalid.
                 */
                function validateNumSctpStreams(numStreams) {
                    if (typeof numStreams !== 'object') {
                        throw new TypeError('numStreams is not an object');
                    }
                    // OS is mandatory.
                    if (typeof numStreams.OS !== 'number') {
                        throw new TypeError('missing numStreams.OS');
                    }
                    // MIS is mandatory.
                    if (typeof numStreams.MIS !== 'number') {
                        throw new TypeError('missing numStreams.MIS');
                    }
                }
                exports.validateNumSctpStreams = validateNumSctpStreams;
                /**
                 * Validates SctpParameters. It may modify given data by adding missing
                 * fields with default values.
                 * It throws if invalid.
                 */
                function validateSctpParameters(params) {
                    if (typeof params !== 'object') {
                        throw new TypeError('params is not an object');
                    }
                    // port is mandatory.
                    if (typeof params.port !== 'number') {
                        throw new TypeError('missing params.port');
                    }
                    // OS is mandatory.
                    if (typeof params.OS !== 'number') {
                        throw new TypeError('missing params.OS');
                    }
                    // MIS is mandatory.
                    if (typeof params.MIS !== 'number') {
                        throw new TypeError('missing params.MIS');
                    }
                    // maxMessageSize is mandatory.
                    if (typeof params.maxMessageSize !== 'number') {
                        throw new TypeError('missing params.maxMessageSize');
                    }
                }
                exports.validateSctpParameters = validateSctpParameters;
                /**
                 * Validates SctpStreamParameters. It may modify given data by adding missing
                 * fields with default values.
                 * It throws if invalid.
                 */
                function validateSctpStreamParameters(params) {
                    if (typeof params !== 'object') {
                        throw new TypeError('params is not an object');
                    }
                    // streamId is mandatory.
                    if (typeof params.streamId !== 'number') {
                        throw new TypeError('missing params.streamId');
                    }
                    // ordered is optional.
                    let orderedGiven = false;
                    if (typeof params.ordered === 'boolean') {
                        orderedGiven = true;
                    } else {
                        params.ordered = true;
                    }
                    // maxPacketLifeTime is optional.
                    if (params.maxPacketLifeTime && typeof params.maxPacketLifeTime !== 'number') {
                        throw new TypeError('invalid params.maxPacketLifeTime');
                    }
                    // maxRetransmits is optional.
                    if (params.maxRetransmits && typeof params.maxRetransmits !== 'number') {
                        throw new TypeError('invalid params.maxRetransmits');
                    }
                    if (params.maxPacketLifeTime && params.maxRetransmits) {
                        throw new TypeError(
                            'cannot provide both maxPacketLifeTime and maxRetransmits',
                        );
                    }
                    if (
                        orderedGiven &&
                        params.ordered &&
                        (params.maxPacketLifeTime || params.maxRetransmits)
                    ) {
                        throw new TypeError(
                            'cannot be ordered with maxPacketLifeTime or maxRetransmits',
                        );
                    } else if (
                        !orderedGiven &&
                        (params.maxPacketLifeTime || params.maxRetransmits)
                    ) {
                        params.ordered = false;
                    }
                    // label is optional.
                    if (params.label && typeof params.label !== 'string') {
                        throw new TypeError('invalid params.label');
                    }
                    // protocol is optional.
                    if (params.protocol && typeof params.protocol !== 'string') {
                        throw new TypeError('invalid params.protocol');
                    }
                }
                exports.validateSctpStreamParameters = validateSctpStreamParameters;
                /**
                 * Generate extended RTP capabilities for sending and receiving.
                 */
                function getExtendedRtpCapabilities(localCaps, remoteCaps) {
                    const extendedRtpCapabilities = {
                        codecs: [],
                        headerExtensions: [],
                    };
                    // Match media codecs and keep the order preferred by remoteCaps.
                    for (const remoteCodec of remoteCaps.codecs || []) {
                        if (isRtxCodec(remoteCodec)) {
                            continue;
                        }
                        const matchingLocalCodec = (localCaps.codecs || []).find((localCodec) =>
                            matchCodecs(localCodec, remoteCodec, { strict: true, modify: true }),
                        );
                        if (!matchingLocalCodec) {
                            continue;
                        }
                        const extendedCodec = {
                            mimeType: matchingLocalCodec.mimeType,
                            kind: matchingLocalCodec.kind,
                            clockRate: matchingLocalCodec.clockRate,
                            channels: matchingLocalCodec.channels,
                            localPayloadType: matchingLocalCodec.preferredPayloadType,
                            localRtxPayloadType: undefined,
                            remotePayloadType: remoteCodec.preferredPayloadType,
                            remoteRtxPayloadType: undefined,
                            localParameters: matchingLocalCodec.parameters,
                            remoteParameters: remoteCodec.parameters,
                            rtcpFeedback: reduceRtcpFeedback(matchingLocalCodec, remoteCodec),
                        };
                        extendedRtpCapabilities.codecs.push(extendedCodec);
                    }
                    // Match RTX codecs.
                    for (const extendedCodec of extendedRtpCapabilities.codecs) {
                        const matchingLocalRtxCodec = localCaps.codecs.find(
                            (localCodec) =>
                                isRtxCodec(localCodec) &&
                                localCodec.parameters.apt === extendedCodec.localPayloadType,
                        );
                        const matchingRemoteRtxCodec = remoteCaps.codecs.find(
                            (remoteCodec) =>
                                isRtxCodec(remoteCodec) &&
                                remoteCodec.parameters.apt === extendedCodec.remotePayloadType,
                        );
                        if (matchingLocalRtxCodec && matchingRemoteRtxCodec) {
                            extendedCodec.localRtxPayloadType =
                                matchingLocalRtxCodec.preferredPayloadType;
                            extendedCodec.remoteRtxPayloadType =
                                matchingRemoteRtxCodec.preferredPayloadType;
                        }
                    }
                    // Match header extensions.
                    for (const remoteExt of remoteCaps.headerExtensions) {
                        const matchingLocalExt = localCaps.headerExtensions.find((localExt) =>
                            matchHeaderExtensions(localExt, remoteExt),
                        );
                        if (!matchingLocalExt) {
                            continue;
                        }
                        const extendedExt = {
                            kind: remoteExt.kind,
                            uri: remoteExt.uri,
                            sendId: matchingLocalExt.preferredId,
                            recvId: remoteExt.preferredId,
                            encrypt: matchingLocalExt.preferredEncrypt,
                            direction: 'sendrecv',
                        };
                        switch (remoteExt.direction) {
                            case 'sendrecv':
                                extendedExt.direction = 'sendrecv';
                                break;
                            case 'recvonly':
                                extendedExt.direction = 'sendonly';
                                break;
                            case 'sendonly':
                                extendedExt.direction = 'recvonly';
                                break;
                            case 'inactive':
                                extendedExt.direction = 'inactive';
                                break;
                        }
                        extendedRtpCapabilities.headerExtensions.push(extendedExt);
                    }
                    return extendedRtpCapabilities;
                }
                exports.getExtendedRtpCapabilities = getExtendedRtpCapabilities;
                /**
                 * Generate RTP capabilities for receiving media based on the given extended
                 * RTP capabilities.
                 */
                function getRecvRtpCapabilities(extendedRtpCapabilities) {
                    const rtpCapabilities = {
                        codecs: [],
                        headerExtensions: [],
                    };
                    for (const extendedCodec of extendedRtpCapabilities.codecs) {
                        const codec = {
                            mimeType: extendedCodec.mimeType,
                            kind: extendedCodec.kind,
                            preferredPayloadType: extendedCodec.remotePayloadType,
                            clockRate: extendedCodec.clockRate,
                            channels: extendedCodec.channels,
                            parameters: extendedCodec.localParameters,
                            rtcpFeedback: extendedCodec.rtcpFeedback,
                        };
                        rtpCapabilities.codecs.push(codec);
                        // Add RTX codec.
                        if (!extendedCodec.remoteRtxPayloadType) {
                            continue;
                        }
                        const rtxCodec = {
                            mimeType: `${extendedCodec.kind}/rtx`,
                            kind: extendedCodec.kind,
                            preferredPayloadType: extendedCodec.remoteRtxPayloadType,
                            clockRate: extendedCodec.clockRate,
                            parameters: {
                                apt: extendedCodec.remotePayloadType,
                            },
                            rtcpFeedback: [],
                        };
                        rtpCapabilities.codecs.push(rtxCodec);
                        // TODO: In the future, we need to add FEC, CN, etc, codecs.
                    }
                    for (const extendedExtension of extendedRtpCapabilities.headerExtensions) {
                        // Ignore RTP extensions not valid for receiving.
                        if (
                            extendedExtension.direction !== 'sendrecv' &&
                            extendedExtension.direction !== 'recvonly'
                        ) {
                            continue;
                        }
                        const ext = {
                            kind: extendedExtension.kind,
                            uri: extendedExtension.uri,
                            preferredId: extendedExtension.recvId,
                            preferredEncrypt: extendedExtension.encrypt,
                            direction: extendedExtension.direction,
                        };
                        rtpCapabilities.headerExtensions.push(ext);
                    }
                    return rtpCapabilities;
                }
                exports.getRecvRtpCapabilities = getRecvRtpCapabilities;
                /**
                 * Generate RTP parameters of the given kind for sending media.
                 * NOTE: mid, encodings and rtcp fields are left empty.
                 */
                function getSendingRtpParameters(kind, extendedRtpCapabilities) {
                    const rtpParameters = {
                        mid: undefined,
                        codecs: [],
                        headerExtensions: [],
                        encodings: [],
                        rtcp: {},
                    };
                    for (const extendedCodec of extendedRtpCapabilities.codecs) {
                        if (extendedCodec.kind !== kind) {
                            continue;
                        }
                        const codec = {
                            mimeType: extendedCodec.mimeType,
                            payloadType: extendedCodec.localPayloadType,
                            clockRate: extendedCodec.clockRate,
                            channels: extendedCodec.channels,
                            parameters: extendedCodec.localParameters,
                            rtcpFeedback: extendedCodec.rtcpFeedback,
                        };
                        rtpParameters.codecs.push(codec);
                        // Add RTX codec.
                        if (extendedCodec.localRtxPayloadType) {
                            const rtxCodec = {
                                mimeType: `${extendedCodec.kind}/rtx`,
                                payloadType: extendedCodec.localRtxPayloadType,
                                clockRate: extendedCodec.clockRate,
                                parameters: {
                                    apt: extendedCodec.localPayloadType,
                                },
                                rtcpFeedback: [],
                            };
                            rtpParameters.codecs.push(rtxCodec);
                        }
                    }
                    for (const extendedExtension of extendedRtpCapabilities.headerExtensions) {
                        // Ignore RTP extensions of a different kind and those not valid for sending.
                        if (
                            (extendedExtension.kind && extendedExtension.kind !== kind) ||
                            (extendedExtension.direction !== 'sendrecv' &&
                                extendedExtension.direction !== 'sendonly')
                        ) {
                            continue;
                        }
                        const ext = {
                            uri: extendedExtension.uri,
                            id: extendedExtension.sendId,
                            encrypt: extendedExtension.encrypt,
                            parameters: {},
                        };
                        rtpParameters.headerExtensions.push(ext);
                    }
                    return rtpParameters;
                }
                exports.getSendingRtpParameters = getSendingRtpParameters;
                /**
                 * Generate RTP parameters of the given kind suitable for the remote SDP answer.
                 */
                function getSendingRemoteRtpParameters(kind, extendedRtpCapabilities) {
                    const rtpParameters = {
                        mid: undefined,
                        codecs: [],
                        headerExtensions: [],
                        encodings: [],
                        rtcp: {},
                    };
                    for (const extendedCodec of extendedRtpCapabilities.codecs) {
                        if (extendedCodec.kind !== kind) {
                            continue;
                        }
                        const codec = {
                            mimeType: extendedCodec.mimeType,
                            payloadType: extendedCodec.localPayloadType,
                            clockRate: extendedCodec.clockRate,
                            channels: extendedCodec.channels,
                            parameters: extendedCodec.remoteParameters,
                            rtcpFeedback: extendedCodec.rtcpFeedback,
                        };
                        rtpParameters.codecs.push(codec);
                        // Add RTX codec.
                        if (extendedCodec.localRtxPayloadType) {
                            const rtxCodec = {
                                mimeType: `${extendedCodec.kind}/rtx`,
                                payloadType: extendedCodec.localRtxPayloadType,
                                clockRate: extendedCodec.clockRate,
                                parameters: {
                                    apt: extendedCodec.localPayloadType,
                                },
                                rtcpFeedback: [],
                            };
                            rtpParameters.codecs.push(rtxCodec);
                        }
                    }
                    for (const extendedExtension of extendedRtpCapabilities.headerExtensions) {
                        // Ignore RTP extensions of a different kind and those not valid for sending.
                        if (
                            (extendedExtension.kind && extendedExtension.kind !== kind) ||
                            (extendedExtension.direction !== 'sendrecv' &&
                                extendedExtension.direction !== 'sendonly')
                        ) {
                            continue;
                        }
                        const ext = {
                            uri: extendedExtension.uri,
                            id: extendedExtension.sendId,
                            encrypt: extendedExtension.encrypt,
                            parameters: {},
                        };
                        rtpParameters.headerExtensions.push(ext);
                    }
                    // Reduce codecs' RTCP feedback. Use Transport-CC if available, REMB otherwise.
                    if (
                        rtpParameters.headerExtensions.some(
                            (ext) =>
                                ext.uri ===
                                'http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01',
                        )
                    ) {
                        for (const codec of rtpParameters.codecs) {
                            codec.rtcpFeedback = (codec.rtcpFeedback || []).filter(
                                (fb) => fb.type !== 'goog-remb',
                            );
                        }
                    } else if (
                        rtpParameters.headerExtensions.some(
                            (ext) =>
                                ext.uri ===
                                'http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time',
                        )
                    ) {
                        for (const codec of rtpParameters.codecs) {
                            codec.rtcpFeedback = (codec.rtcpFeedback || []).filter(
                                (fb) => fb.type !== 'transport-cc',
                            );
                        }
                    } else {
                        for (const codec of rtpParameters.codecs) {
                            codec.rtcpFeedback = (codec.rtcpFeedback || []).filter(
                                (fb) => fb.type !== 'transport-cc' && fb.type !== 'goog-remb',
                            );
                        }
                    }
                    return rtpParameters;
                }
                exports.getSendingRemoteRtpParameters = getSendingRemoteRtpParameters;
                /**
                 * Reduce given codecs by returning an array of codecs "compatible" with the
                 * given capability codec. If no capability codec is given, take the first
                 * one(s).
                 *
                 * Given codecs must be generated by ortc.getSendingRtpParameters() or
                 * ortc.getSendingRemoteRtpParameters().
                 *
                 * The returned array of codecs also include a RTX codec if available.
                 */
                function reduceCodecs(codecs, capCodec) {
                    const filteredCodecs = [];
                    // If no capability codec is given, take the first one (and RTX).
                    if (!capCodec) {
                        filteredCodecs.push(codecs[0]);
                        if (isRtxCodec(codecs[1])) {
                            filteredCodecs.push(codecs[1]);
                        }
                    }
                    // Otherwise look for a compatible set of codecs.
                    else {
                        for (let idx = 0; idx < codecs.length; ++idx) {
                            if (matchCodecs(codecs[idx], capCodec)) {
                                filteredCodecs.push(codecs[idx]);
                                if (isRtxCodec(codecs[idx + 1])) {
                                    filteredCodecs.push(codecs[idx + 1]);
                                }
                                break;
                            }
                        }
                        if (filteredCodecs.length === 0) {
                            throw new TypeError('no matching codec found');
                        }
                    }
                    return filteredCodecs;
                }
                exports.reduceCodecs = reduceCodecs;
                /**
                 * Create RTP parameters for a Consumer for the RTP probator.
                 */
                function generateProbatorRtpParameters(videoRtpParameters) {
                    // Clone given reference video RTP parameters.
                    videoRtpParameters = utils.clone(videoRtpParameters, {});
                    // This may throw.
                    validateRtpParameters(videoRtpParameters);
                    const rtpParameters = {
                        mid: RTP_PROBATOR_MID,
                        codecs: [],
                        headerExtensions: [],
                        encodings: [{ ssrc: RTP_PROBATOR_SSRC }],
                        rtcp: { cname: 'probator' },
                    };
                    rtpParameters.codecs.push(videoRtpParameters.codecs[0]);
                    rtpParameters.codecs[0].payloadType = RTP_PROBATOR_CODEC_PAYLOAD_TYPE;
                    rtpParameters.headerExtensions = videoRtpParameters.headerExtensions;
                    return rtpParameters;
                }
                exports.generateProbatorRtpParameters = generateProbatorRtpParameters;
                /**
                 * Whether media can be sent based on the given RTP capabilities.
                 */
                function canSend(kind, extendedRtpCapabilities) {
                    return extendedRtpCapabilities.codecs.some((codec) => codec.kind === kind);
                }
                exports.canSend = canSend;
                /**
                 * Whether the given RTP parameters can be received with the given RTP
                 * capabilities.
                 */
                function canReceive(rtpParameters, extendedRtpCapabilities) {
                    // This may throw.
                    validateRtpParameters(rtpParameters);
                    if (rtpParameters.codecs.length === 0) {
                        return false;
                    }
                    const firstMediaCodec = rtpParameters.codecs[0];
                    return extendedRtpCapabilities.codecs.some(
                        (codec) => codec.remotePayloadType === firstMediaCodec.payloadType,
                    );
                }
                exports.canReceive = canReceive;
                function isRtxCodec(codec) {
                    if (!codec) {
                        return false;
                    }
                    return /.+\/rtx$/i.test(codec.mimeType);
                }
                function matchCodecs(aCodec, bCodec, { strict = false, modify = false } = {}) {
                    const aMimeType = aCodec.mimeType.toLowerCase();
                    const bMimeType = bCodec.mimeType.toLowerCase();
                    if (aMimeType !== bMimeType) {
                        return false;
                    }
                    if (aCodec.clockRate !== bCodec.clockRate) {
                        return false;
                    }
                    if (aCodec.channels !== bCodec.channels) {
                        return false;
                    }
                    // Per codec special checks.
                    switch (aMimeType) {
                        case 'video/h264': {
                            if (strict) {
                                const aPacketizationMode =
                                    aCodec.parameters['packetization-mode'] || 0;
                                const bPacketizationMode =
                                    bCodec.parameters['packetization-mode'] || 0;
                                if (aPacketizationMode !== bPacketizationMode) {
                                    return false;
                                }
                                if (!h264.isSameProfile(aCodec.parameters, bCodec.parameters)) {
                                    return false;
                                }
                                let selectedProfileLevelId;
                                try {
                                    selectedProfileLevelId = h264.generateProfileLevelIdForAnswer(
                                        aCodec.parameters,
                                        bCodec.parameters,
                                    );
                                } catch (error) {
                                    return false;
                                }
                                if (modify) {
                                    if (selectedProfileLevelId) {
                                        aCodec.parameters['profile-level-id'] =
                                            selectedProfileLevelId;
                                        bCodec.parameters['profile-level-id'] =
                                            selectedProfileLevelId;
                                    } else {
                                        delete aCodec.parameters['profile-level-id'];
                                        delete bCodec.parameters['profile-level-id'];
                                    }
                                }
                            }
                            break;
                        }
                        case 'video/vp9': {
                            if (strict) {
                                const aProfileId = aCodec.parameters['profile-id'] || 0;
                                const bProfileId = bCodec.parameters['profile-id'] || 0;
                                if (aProfileId !== bProfileId) {
                                    return false;
                                }
                            }
                            break;
                        }
                    }
                    return true;
                }
                function matchHeaderExtensions(aExt, bExt) {
                    if (aExt.kind && bExt.kind && aExt.kind !== bExt.kind) {
                        return false;
                    }
                    if (aExt.uri !== bExt.uri) {
                        return false;
                    }
                    return true;
                }
                function reduceRtcpFeedback(codecA, codecB) {
                    const reducedRtcpFeedback = [];
                    for (const aFb of codecA.rtcpFeedback || []) {
                        const matchingBFb = (codecB.rtcpFeedback || []).find(
                            (bFb) =>
                                bFb.type === aFb.type &&
                                (bFb.parameter === aFb.parameter ||
                                    (!bFb.parameter && !aFb.parameter)),
                        );
                        if (matchingBFb) {
                            reducedRtcpFeedback.push(matchingBFb);
                        }
                    }
                    return reducedRtcpFeedback;
                }
            },
            { './utils': 68, 'h264-profile-level-id': 31 },
        ],
        66: [
            function (require, module, exports) {
                'use strict';
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.parse = void 0;
                const ScalabilityModeRegex = new RegExp('^[LS]([1-9]\\d{0,1})T([1-9]\\d{0,1})');
                function parse(scalabilityMode) {
                    const match = ScalabilityModeRegex.exec(scalabilityMode || '');
                    if (match) {
                        return {
                            spatialLayers: Number(match[1]),
                            temporalLayers: Number(match[2]),
                        };
                    } else {
                        return {
                            spatialLayers: 1,
                            temporalLayers: 1,
                        };
                    }
                }
                exports.parse = parse;
            },
            {},
        ],
        67: [
            function (require, module, exports) {
                'use strict';
                var __createBinding =
                    (this && this.__createBinding) ||
                    (Object.create
                        ? function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              var desc = Object.getOwnPropertyDescriptor(m, k);
                              if (
                                  !desc ||
                                  ('get' in desc
                                      ? !m.__esModule
                                      : desc.writable || desc.configurable)
                              ) {
                                  desc = {
                                      enumerable: true,
                                      get: function () {
                                          return m[k];
                                      },
                                  };
                              }
                              Object.defineProperty(o, k2, desc);
                          }
                        : function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              o[k2] = m[k];
                          });
                var __exportStar =
                    (this && this.__exportStar) ||
                    function (m, exports) {
                        for (var p in m)
                            if (
                                p !== 'default' &&
                                !Object.prototype.hasOwnProperty.call(exports, p)
                            )
                                __createBinding(exports, m, p);
                    };
                Object.defineProperty(exports, '__esModule', { value: true });
                __exportStar(require('./Device'), exports);
                __exportStar(require('./Transport'), exports);
                __exportStar(require('./Producer'), exports);
                __exportStar(require('./Consumer'), exports);
                __exportStar(require('./DataProducer'), exports);
                __exportStar(require('./DataConsumer'), exports);
                __exportStar(require('./RtpParameters'), exports);
                __exportStar(require('./SctpParameters'), exports);
                __exportStar(require('./handlers/HandlerInterface'), exports);
                __exportStar(require('./errors'), exports);
            },
            {
                './Consumer': 34,
                './DataConsumer': 35,
                './DataProducer': 36,
                './Device': 37,
                './Producer': 40,
                './RtpParameters': 41,
                './SctpParameters': 42,
                './Transport': 43,
                './errors': 44,
                './handlers/HandlerInterface': 52,
            },
        ],
        68: [
            function (require, module, exports) {
                'use strict';
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.generateRandomNumber = exports.clone = void 0;
                /**
                 * Clones the given data.
                 */
                function clone(data, defaultValue) {
                    if (typeof data === 'undefined') {
                        return defaultValue;
                    }
                    return JSON.parse(JSON.stringify(data));
                }
                exports.clone = clone;
                /**
                 * Generates a random positive integer.
                 */
                function generateRandomNumber() {
                    return Math.round(Math.random() * 10000000);
                }
                exports.generateRandomNumber = generateRandomNumber;
            },
            {},
        ],
        69: [
            function (require, module, exports) {
                /**
                 * Helpers.
                 */

                var s = 1000;
                var m = s * 60;
                var h = m * 60;
                var d = h * 24;
                var w = d * 7;
                var y = d * 365.25;

                /**
                 * Parse or format the given `val`.
                 *
                 * Options:
                 *
                 *  - `long` verbose formatting [false]
                 *
                 * @param {String|Number} val
                 * @param {Object} [options]
                 * @throws {Error} throw an error if val is not a non-empty string or a number
                 * @return {String|Number}
                 * @api public
                 */

                module.exports = function (val, options) {
                    options = options || {};
                    var type = typeof val;
                    if (type === 'string' && val.length > 0) {
                        return parse(val);
                    } else if (type === 'number' && isFinite(val)) {
                        return options.long ? fmtLong(val) : fmtShort(val);
                    }
                    throw new Error(
                        'val is not a non-empty string or a valid number. val=' +
                            JSON.stringify(val),
                    );
                };

                /**
                 * Parse the given `str` and return milliseconds.
                 *
                 * @param {String} str
                 * @return {Number}
                 * @api private
                 */

                function parse(str) {
                    str = String(str);
                    if (str.length > 100) {
                        return;
                    }
                    var match =
                        /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
                            str,
                        );
                    if (!match) {
                        return;
                    }
                    var n = parseFloat(match[1]);
                    var type = (match[2] || 'ms').toLowerCase();
                    switch (type) {
                        case 'years':
                        case 'year':
                        case 'yrs':
                        case 'yr':
                        case 'y':
                            return n * y;
                        case 'weeks':
                        case 'week':
                        case 'w':
                            return n * w;
                        case 'days':
                        case 'day':
                        case 'd':
                            return n * d;
                        case 'hours':
                        case 'hour':
                        case 'hrs':
                        case 'hr':
                        case 'h':
                            return n * h;
                        case 'minutes':
                        case 'minute':
                        case 'mins':
                        case 'min':
                        case 'm':
                            return n * m;
                        case 'seconds':
                        case 'second':
                        case 'secs':
                        case 'sec':
                        case 's':
                            return n * s;
                        case 'milliseconds':
                        case 'millisecond':
                        case 'msecs':
                        case 'msec':
                        case 'ms':
                            return n;
                        default:
                            return undefined;
                    }
                }

                /**
                 * Short format for `ms`.
                 *
                 * @param {Number} ms
                 * @return {String}
                 * @api private
                 */

                function fmtShort(ms) {
                    var msAbs = Math.abs(ms);
                    if (msAbs >= d) {
                        return Math.round(ms / d) + 'd';
                    }
                    if (msAbs >= h) {
                        return Math.round(ms / h) + 'h';
                    }
                    if (msAbs >= m) {
                        return Math.round(ms / m) + 'm';
                    }
                    if (msAbs >= s) {
                        return Math.round(ms / s) + 's';
                    }
                    return ms + 'ms';
                }

                /**
                 * Long format for `ms`.
                 *
                 * @param {Number} ms
                 * @return {String}
                 * @api private
                 */

                function fmtLong(ms) {
                    var msAbs = Math.abs(ms);
                    if (msAbs >= d) {
                        return plural(ms, msAbs, d, 'day');
                    }
                    if (msAbs >= h) {
                        return plural(ms, msAbs, h, 'hour');
                    }
                    if (msAbs >= m) {
                        return plural(ms, msAbs, m, 'minute');
                    }
                    if (msAbs >= s) {
                        return plural(ms, msAbs, s, 'second');
                    }
                    return ms + ' ms';
                }

                /**
                 * Pluralization helper.
                 */

                function plural(ms, msAbs, n, name) {
                    var isPlural = msAbs >= n * 1.5;
                    return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
                }
            },
            {},
        ],
        70: [
            function (require, module, exports) {
                // shim for using process in browser
                var process = (module.exports = {});

                // cached from whatever global is present so that test runners that stub it
                // don't break things.  But we need to wrap it in a try catch in case it is
                // wrapped in strict mode code which doesn't define any globals.  It's inside a
                // function because try/catches deoptimize in certain engines.

                var cachedSetTimeout;
                var cachedClearTimeout;

                function defaultSetTimout() {
                    throw new Error('setTimeout has not been defined');
                }
                function defaultClearTimeout() {
                    throw new Error('clearTimeout has not been defined');
                }
                (function () {
                    try {
                        if (typeof setTimeout === 'function') {
                            cachedSetTimeout = setTimeout;
                        } else {
                            cachedSetTimeout = defaultSetTimout;
                        }
                    } catch (e) {
                        cachedSetTimeout = defaultSetTimout;
                    }
                    try {
                        if (typeof clearTimeout === 'function') {
                            cachedClearTimeout = clearTimeout;
                        } else {
                            cachedClearTimeout = defaultClearTimeout;
                        }
                    } catch (e) {
                        cachedClearTimeout = defaultClearTimeout;
                    }
                })();
                function runTimeout(fun) {
                    if (cachedSetTimeout === setTimeout) {
                        //normal enviroments in sane situations
                        return setTimeout(fun, 0);
                    }
                    // if setTimeout wasn't available but was latter defined
                    if (
                        (cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) &&
                        setTimeout
                    ) {
                        cachedSetTimeout = setTimeout;
                        return setTimeout(fun, 0);
                    }
                    try {
                        // when when somebody has screwed with setTimeout but no I.E. maddness
                        return cachedSetTimeout(fun, 0);
                    } catch (e) {
                        try {
                            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                            return cachedSetTimeout.call(null, fun, 0);
                        } catch (e) {
                            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                            return cachedSetTimeout.call(this, fun, 0);
                        }
                    }
                }
                function runClearTimeout(marker) {
                    if (cachedClearTimeout === clearTimeout) {
                        //normal enviroments in sane situations
                        return clearTimeout(marker);
                    }
                    // if clearTimeout wasn't available but was latter defined
                    if (
                        (cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) &&
                        clearTimeout
                    ) {
                        cachedClearTimeout = clearTimeout;
                        return clearTimeout(marker);
                    }
                    try {
                        // when when somebody has screwed with setTimeout but no I.E. maddness
                        return cachedClearTimeout(marker);
                    } catch (e) {
                        try {
                            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                            return cachedClearTimeout.call(null, marker);
                        } catch (e) {
                            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                            return cachedClearTimeout.call(this, marker);
                        }
                    }
                }
                var queue = [];
                var draining = false;
                var currentQueue;
                var queueIndex = -1;

                function cleanUpNextTick() {
                    if (!draining || !currentQueue) {
                        return;
                    }
                    draining = false;
                    if (currentQueue.length) {
                        queue = currentQueue.concat(queue);
                    } else {
                        queueIndex = -1;
                    }
                    if (queue.length) {
                        drainQueue();
                    }
                }

                function drainQueue() {
                    if (draining) {
                        return;
                    }
                    var timeout = runTimeout(cleanUpNextTick);
                    draining = true;

                    var len = queue.length;
                    while (len) {
                        currentQueue = queue;
                        queue = [];
                        while (++queueIndex < len) {
                            if (currentQueue) {
                                currentQueue[queueIndex].run();
                            }
                        }
                        queueIndex = -1;
                        len = queue.length;
                    }
                    currentQueue = null;
                    draining = false;
                    runClearTimeout(timeout);
                }

                process.nextTick = function (fun) {
                    var args = new Array(arguments.length - 1);
                    if (arguments.length > 1) {
                        for (var i = 1; i < arguments.length; i++) {
                            args[i - 1] = arguments[i];
                        }
                    }
                    queue.push(new Item(fun, args));
                    if (queue.length === 1 && !draining) {
                        runTimeout(drainQueue);
                    }
                };

                // v8 likes predictible objects
                function Item(fun, array) {
                    this.fun = fun;
                    this.array = array;
                }
                Item.prototype.run = function () {
                    this.fun.apply(null, this.array);
                };
                process.title = 'browser';
                process.browser = true;
                process.env = {};
                process.argv = [];
                process.version = ''; // empty string to avoid regexp issues
                process.versions = {};

                function noop() {}

                process.on = noop;
                process.addListener = noop;
                process.once = noop;
                process.off = noop;
                process.removeListener = noop;
                process.removeAllListeners = noop;
                process.emit = noop;
                process.prependListener = noop;
                process.prependOnceListener = noop;

                process.listeners = function (name) {
                    return [];
                };

                process.binding = function (name) {
                    throw new Error('process.binding is not supported');
                };

                process.cwd = function () {
                    return '/';
                };
                process.chdir = function (dir) {
                    throw new Error('process.chdir is not supported');
                };
                process.umask = function () {
                    return 0;
                };
            },
            {},
        ],
        71: [
            function (require, module, exports) {
                (function (global) {
                    (function () {
                        /*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
                        let promise;

                        module.exports =
                            typeof queueMicrotask === 'function'
                                ? queueMicrotask.bind(
                                      typeof window !== 'undefined' ? window : global,
                                  )
                                : // reuse resolved promise, and allocate it lazily
                                  (cb) =>
                                      (promise || (promise = Promise.resolve()))
                                          .then(cb)
                                          .catch((err) =>
                                              setTimeout(() => {
                                                  throw err;
                                              }, 0),
                                          );
                    }).call(this);
                }).call(
                    this,
                    typeof global !== 'undefined'
                        ? global
                        : typeof self !== 'undefined'
                        ? self
                        : typeof window !== 'undefined'
                        ? window
                        : {},
                );
            },
            {},
        ],
        72: [
            function (require, module, exports) {
                var grammar = (module.exports = {
                    v: [
                        {
                            name: 'version',
                            reg: /^(\d*)$/,
                        },
                    ],
                    o: [
                        {
                            // o=- 20518 0 IN IP4 203.0.113.1
                            // NB: sessionId will be a String in most cases because it is huge
                            name: 'origin',
                            reg: /^(\S*) (\d*) (\d*) (\S*) IP(\d) (\S*)/,
                            names: [
                                'username',
                                'sessionId',
                                'sessionVersion',
                                'netType',
                                'ipVer',
                                'address',
                            ],
                            format: '%s %s %d %s IP%d %s',
                        },
                    ],
                    // default parsing of these only (though some of these feel outdated)
                    s: [{ name: 'name' }],
                    i: [{ name: 'description' }],
                    u: [{ name: 'uri' }],
                    e: [{ name: 'email' }],
                    p: [{ name: 'phone' }],
                    z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly...
                    r: [{ name: 'repeats' }], // TODO: this one can also be parsed properly
                    // k: [{}], // outdated thing ignored
                    t: [
                        {
                            // t=0 0
                            name: 'timing',
                            reg: /^(\d*) (\d*)/,
                            names: ['start', 'stop'],
                            format: '%d %d',
                        },
                    ],
                    c: [
                        {
                            // c=IN IP4 10.47.197.26
                            name: 'connection',
                            reg: /^IN IP(\d) (\S*)/,
                            names: ['version', 'ip'],
                            format: 'IN IP%d %s',
                        },
                    ],
                    b: [
                        {
                            // b=AS:4000
                            push: 'bandwidth',
                            reg: /^(TIAS|AS|CT|RR|RS):(\d*)/,
                            names: ['type', 'limit'],
                            format: '%s:%s',
                        },
                    ],
                    m: [
                        {
                            // m=video 51744 RTP/AVP 126 97 98 34 31
                            // NB: special - pushes to session
                            // TODO: rtp/fmtp should be filtered by the payloads found here?
                            reg: /^(\w*) (\d*) ([\w/]*)(?: (.*))?/,
                            names: ['type', 'port', 'protocol', 'payloads'],
                            format: '%s %d %s %s',
                        },
                    ],
                    a: [
                        {
                            // a=rtpmap:110 opus/48000/2
                            push: 'rtp',
                            reg: /^rtpmap:(\d*) ([\w\-.]*)(?:\s*\/(\d*)(?:\s*\/(\S*))?)?/,
                            names: ['payload', 'codec', 'rate', 'encoding'],
                            format: function (o) {
                                return o.encoding
                                    ? 'rtpmap:%d %s/%s/%s'
                                    : o.rate
                                    ? 'rtpmap:%d %s/%s'
                                    : 'rtpmap:%d %s';
                            },
                        },
                        {
                            // a=fmtp:108 profile-level-id=24;object=23;bitrate=64000
                            // a=fmtp:111 minptime=10; useinbandfec=1
                            push: 'fmtp',
                            reg: /^fmtp:(\d*) ([\S| ]*)/,
                            names: ['payload', 'config'],
                            format: 'fmtp:%d %s',
                        },
                        {
                            // a=control:streamid=0
                            name: 'control',
                            reg: /^control:(.*)/,
                            format: 'control:%s',
                        },
                        {
                            // a=rtcp:65179 IN IP4 193.84.77.194
                            name: 'rtcp',
                            reg: /^rtcp:(\d*)(?: (\S*) IP(\d) (\S*))?/,
                            names: ['port', 'netType', 'ipVer', 'address'],
                            format: function (o) {
                                return o.address != null ? 'rtcp:%d %s IP%d %s' : 'rtcp:%d';
                            },
                        },
                        {
                            // a=rtcp-fb:98 trr-int 100
                            push: 'rtcpFbTrrInt',
                            reg: /^rtcp-fb:(\*|\d*) trr-int (\d*)/,
                            names: ['payload', 'value'],
                            format: 'rtcp-fb:%s trr-int %d',
                        },
                        {
                            // a=rtcp-fb:98 nack rpsi
                            push: 'rtcpFb',
                            reg: /^rtcp-fb:(\*|\d*) ([\w-_]*)(?: ([\w-_]*))?/,
                            names: ['payload', 'type', 'subtype'],
                            format: function (o) {
                                return o.subtype != null ? 'rtcp-fb:%s %s %s' : 'rtcp-fb:%s %s';
                            },
                        },
                        {
                            // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
                            // a=extmap:1/recvonly URI-gps-string
                            // a=extmap:3 urn:ietf:params:rtp-hdrext:encrypt urn:ietf:params:rtp-hdrext:smpte-tc 25@600/24
                            push: 'ext',
                            reg: /^extmap:(\d+)(?:\/(\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\S*)(?: (\S*))?/,
                            names: ['value', 'direction', 'encrypt-uri', 'uri', 'config'],
                            format: function (o) {
                                return (
                                    'extmap:%d' +
                                    (o.direction ? '/%s' : '%v') +
                                    (o['encrypt-uri'] ? ' %s' : '%v') +
                                    ' %s' +
                                    (o.config ? ' %s' : '')
                                );
                            },
                        },
                        {
                            // a=extmap-allow-mixed
                            name: 'extmapAllowMixed',
                            reg: /^(extmap-allow-mixed)/,
                        },
                        {
                            // a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32
                            push: 'crypto',
                            reg: /^crypto:(\d*) ([\w_]*) (\S*)(?: (\S*))?/,
                            names: ['id', 'suite', 'config', 'sessionConfig'],
                            format: function (o) {
                                return o.sessionConfig != null
                                    ? 'crypto:%d %s %s %s'
                                    : 'crypto:%d %s %s';
                            },
                        },
                        {
                            // a=setup:actpass
                            name: 'setup',
                            reg: /^setup:(\w*)/,
                            format: 'setup:%s',
                        },
                        {
                            // a=connection:new
                            name: 'connectionType',
                            reg: /^connection:(new|existing)/,
                            format: 'connection:%s',
                        },
                        {
                            // a=mid:1
                            name: 'mid',
                            reg: /^mid:([^\s]*)/,
                            format: 'mid:%s',
                        },
                        {
                            // a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a
                            name: 'msid',
                            reg: /^msid:(.*)/,
                            format: 'msid:%s',
                        },
                        {
                            // a=ptime:20
                            name: 'ptime',
                            reg: /^ptime:(\d*(?:\.\d*)*)/,
                            format: 'ptime:%d',
                        },
                        {
                            // a=maxptime:60
                            name: 'maxptime',
                            reg: /^maxptime:(\d*(?:\.\d*)*)/,
                            format: 'maxptime:%d',
                        },
                        {
                            // a=sendrecv
                            name: 'direction',
                            reg: /^(sendrecv|recvonly|sendonly|inactive)/,
                        },
                        {
                            // a=ice-lite
                            name: 'icelite',
                            reg: /^(ice-lite)/,
                        },
                        {
                            // a=ice-ufrag:F7gI
                            name: 'iceUfrag',
                            reg: /^ice-ufrag:(\S*)/,
                            format: 'ice-ufrag:%s',
                        },
                        {
                            // a=ice-pwd:x9cml/YzichV2+XlhiMu8g
                            name: 'icePwd',
                            reg: /^ice-pwd:(\S*)/,
                            format: 'ice-pwd:%s',
                        },
                        {
                            // a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33
                            name: 'fingerprint',
                            reg: /^fingerprint:(\S*) (\S*)/,
                            names: ['type', 'hash'],
                            format: 'fingerprint:%s %s',
                        },
                        {
                            // a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host
                            // a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10
                            // a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10
                            // a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10
                            // a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10
                            push: 'candidates',
                            reg: /^candidate:(\S*) (\d*) (\S*) (\d*) (\S*) (\d*) typ (\S*)(?: raddr (\S*) rport (\d*))?(?: tcptype (\S*))?(?: generation (\d*))?(?: network-id (\d*))?(?: network-cost (\d*))?/,
                            names: [
                                'foundation',
                                'component',
                                'transport',
                                'priority',
                                'ip',
                                'port',
                                'type',
                                'raddr',
                                'rport',
                                'tcptype',
                                'generation',
                                'network-id',
                                'network-cost',
                            ],
                            format: function (o) {
                                var str = 'candidate:%s %d %s %d %s %d typ %s';

                                str += o.raddr != null ? ' raddr %s rport %d' : '%v%v';

                                // NB: candidate has three optional chunks, so %void middles one if it's missing
                                str += o.tcptype != null ? ' tcptype %s' : '%v';

                                if (o.generation != null) {
                                    str += ' generation %d';
                                }

                                str += o['network-id'] != null ? ' network-id %d' : '%v';
                                str += o['network-cost'] != null ? ' network-cost %d' : '%v';
                                return str;
                            },
                        },
                        {
                            // a=end-of-candidates (keep after the candidates line for readability)
                            name: 'endOfCandidates',
                            reg: /^(end-of-candidates)/,
                        },
                        {
                            // a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...
                            name: 'remoteCandidates',
                            reg: /^remote-candidates:(.*)/,
                            format: 'remote-candidates:%s',
                        },
                        {
                            // a=ice-options:google-ice
                            name: 'iceOptions',
                            reg: /^ice-options:(\S*)/,
                            format: 'ice-options:%s',
                        },
                        {
                            // a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1
                            push: 'ssrcs',
                            reg: /^ssrc:(\d*) ([\w_-]*)(?::(.*))?/,
                            names: ['id', 'attribute', 'value'],
                            format: function (o) {
                                var str = 'ssrc:%d';
                                if (o.attribute != null) {
                                    str += ' %s';
                                    if (o.value != null) {
                                        str += ':%s';
                                    }
                                }
                                return str;
                            },
                        },
                        {
                            // a=ssrc-group:FEC 1 2
                            // a=ssrc-group:FEC-FR 3004364195 1080772241
                            push: 'ssrcGroups',
                            // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E
                            reg: /^ssrc-group:([\x21\x23\x24\x25\x26\x27\x2A\x2B\x2D\x2E\w]*) (.*)/,
                            names: ['semantics', 'ssrcs'],
                            format: 'ssrc-group:%s %s',
                        },
                        {
                            // a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV
                            name: 'msidSemantic',
                            reg: /^msid-semantic:\s?(\w*) (\S*)/,
                            names: ['semantic', 'token'],
                            format: 'msid-semantic: %s %s', // space after ':' is not accidental
                        },
                        {
                            // a=group:BUNDLE audio video
                            push: 'groups',
                            reg: /^group:(\w*) (.*)/,
                            names: ['type', 'mids'],
                            format: 'group:%s %s',
                        },
                        {
                            // a=rtcp-mux
                            name: 'rtcpMux',
                            reg: /^(rtcp-mux)/,
                        },
                        {
                            // a=rtcp-rsize
                            name: 'rtcpRsize',
                            reg: /^(rtcp-rsize)/,
                        },
                        {
                            // a=sctpmap:5000 webrtc-datachannel 1024
                            name: 'sctpmap',
                            reg: /^sctpmap:([\w_/]*) (\S*)(?: (\S*))?/,
                            names: ['sctpmapNumber', 'app', 'maxMessageSize'],
                            format: function (o) {
                                return o.maxMessageSize != null
                                    ? 'sctpmap:%s %s %s'
                                    : 'sctpmap:%s %s';
                            },
                        },
                        {
                            // a=x-google-flag:conference
                            name: 'xGoogleFlag',
                            reg: /^x-google-flag:([^\s]*)/,
                            format: 'x-google-flag:%s',
                        },
                        {
                            // a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0
                            push: 'rids',
                            reg: /^rid:([\d\w]+) (\w+)(?: ([\S| ]*))?/,
                            names: ['id', 'direction', 'params'],
                            format: function (o) {
                                return o.params ? 'rid:%s %s %s' : 'rid:%s %s';
                            },
                        },
                        {
                            // a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]
                            // a=imageattr:* send [x=800,y=640] recv *
                            // a=imageattr:100 recv [x=320,y=240]
                            push: 'imageattrs',
                            reg: new RegExp(
                                // a=imageattr:97
                                '^imageattr:(\\d+|\\*)' +
                                    // send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]
                                    '[\\s\\t]+(send|recv)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*)' +
                                    // recv [x=330,y=250]
                                    '(?:[\\s\\t]+(recv|send)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*))?',
                            ),
                            names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],
                            format: function (o) {
                                return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');
                            },
                        },
                        {
                            // a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8
                            // a=simulcast:recv 1;4,5 send 6;7
                            name: 'simulcast',
                            reg: new RegExp(
                                // a=simulcast:
                                '^simulcast:' +
                                    // send 1,2,3;~4,~5
                                    '(send|recv) ([a-zA-Z0-9\\-_~;,]+)' +
                                    // space + recv 6;~7,~8
                                    '(?:\\s?(send|recv) ([a-zA-Z0-9\\-_~;,]+))?' +
                                    // end
                                    '$',
                            ),
                            names: ['dir1', 'list1', 'dir2', 'list2'],
                            format: function (o) {
                                return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');
                            },
                        },
                        {
                            // old simulcast draft 03 (implemented by Firefox)
                            //   https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03
                            // a=simulcast: recv pt=97;98 send pt=97
                            // a=simulcast: send rid=5;6;7 paused=6,7
                            name: 'simulcast_03',
                            reg: /^simulcast:[\s\t]+([\S+\s\t]+)$/,
                            names: ['value'],
                            format: 'simulcast: %s',
                        },
                        {
                            // a=framerate:25
                            // a=framerate:29.97
                            name: 'framerate',
                            reg: /^framerate:(\d+(?:$|\.\d+))/,
                            format: 'framerate:%s',
                        },
                        {
                            // RFC4570
                            // a=source-filter: incl IN IP4 239.5.2.31 10.1.15.5
                            name: 'sourceFilter',
                            reg: /^source-filter: *(excl|incl) (\S*) (IP4|IP6|\*) (\S*) (.*)/,
                            names: [
                                'filterMode',
                                'netType',
                                'addressTypes',
                                'destAddress',
                                'srcList',
                            ],
                            format: 'source-filter: %s %s %s %s %s',
                        },
                        {
                            // a=bundle-only
                            name: 'bundleOnly',
                            reg: /^(bundle-only)/,
                        },
                        {
                            // a=label:1
                            name: 'label',
                            reg: /^label:(.+)/,
                            format: 'label:%s',
                        },
                        {
                            // RFC version 26 for SCTP over DTLS
                            // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-5
                            name: 'sctpPort',
                            reg: /^sctp-port:(\d+)$/,
                            format: 'sctp-port:%s',
                        },
                        {
                            // RFC version 26 for SCTP over DTLS
                            // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-6
                            name: 'maxMessageSize',
                            reg: /^max-message-size:(\d+)$/,
                            format: 'max-message-size:%s',
                        },
                        {
                            // RFC7273
                            // a=ts-refclk:ptp=IEEE1588-2008:39-A7-94-FF-FE-07-CB-D0:37
                            push: 'tsRefClocks',
                            reg: /^ts-refclk:([^\s=]*)(?:=(\S*))?/,
                            names: ['clksrc', 'clksrcExt'],
                            format: function (o) {
                                return 'ts-refclk:%s' + (o.clksrcExt != null ? '=%s' : '');
                            },
                        },
                        {
                            // RFC7273
                            // a=mediaclk:direct=963214424
                            name: 'mediaClk',
                            reg: /^mediaclk:(?:id=(\S*))? *([^\s=]*)(?:=(\S*))?(?: *rate=(\d+)\/(\d+))?/,
                            names: [
                                'id',
                                'mediaClockName',
                                'mediaClockValue',
                                'rateNumerator',
                                'rateDenominator',
                            ],
                            format: function (o) {
                                var str = 'mediaclk:';
                                str += o.id != null ? 'id=%s %s' : '%v%s';
                                str += o.mediaClockValue != null ? '=%s' : '';
                                str += o.rateNumerator != null ? ' rate=%s' : '';
                                str += o.rateDenominator != null ? '/%s' : '';
                                return str;
                            },
                        },
                        {
                            // a=keywds:keywords
                            name: 'keywords',
                            reg: /^keywds:(.+)$/,
                            format: 'keywds:%s',
                        },
                        {
                            // a=content:main
                            name: 'content',
                            reg: /^content:(.+)/,
                            format: 'content:%s',
                        },
                        // BFCP https://tools.ietf.org/html/rfc4583
                        {
                            // a=floorctrl:c-s
                            name: 'bfcpFloorCtrl',
                            reg: /^floorctrl:(c-only|s-only|c-s)/,
                            format: 'floorctrl:%s',
                        },
                        {
                            // a=confid:1
                            name: 'bfcpConfId',
                            reg: /^confid:(\d+)/,
                            format: 'confid:%s',
                        },
                        {
                            // a=userid:1
                            name: 'bfcpUserId',
                            reg: /^userid:(\d+)/,
                            format: 'userid:%s',
                        },
                        {
                            // a=floorid:1
                            name: 'bfcpFloorId',
                            reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,
                            names: ['id', 'mStream'],
                            format: 'floorid:%s mstrm:%s',
                        },
                        {
                            // any a= that we don't understand is kept verbatim on media.invalid
                            push: 'invalid',
                            names: ['value'],
                        },
                    ],
                });

                // set sensible defaults to avoid polluting the grammar with boring details
                Object.keys(grammar).forEach(function (key) {
                    var objs = grammar[key];
                    objs.forEach(function (obj) {
                        if (!obj.reg) {
                            obj.reg = /(.*)/;
                        }
                        if (!obj.format) {
                            obj.format = '%s';
                        }
                    });
                });
            },
            {},
        ],
        73: [
            function (require, module, exports) {
                var parser = require('./parser');
                var writer = require('./writer');

                exports.write = writer;
                exports.parse = parser.parse;
                exports.parseParams = parser.parseParams;
                exports.parseFmtpConfig = parser.parseFmtpConfig; // Alias of parseParams().
                exports.parsePayloads = parser.parsePayloads;
                exports.parseRemoteCandidates = parser.parseRemoteCandidates;
                exports.parseImageAttributes = parser.parseImageAttributes;
                exports.parseSimulcastStreamList = parser.parseSimulcastStreamList;
            },
            { './parser': 74, './writer': 75 },
        ],
        74: [
            function (require, module, exports) {
                var toIntIfInt = function (v) {
                    return String(Number(v)) === v ? Number(v) : v;
                };

                var attachProperties = function (match, location, names, rawName) {
                    if (rawName && !names) {
                        location[rawName] = toIntIfInt(match[1]);
                    } else {
                        for (var i = 0; i < names.length; i += 1) {
                            if (match[i + 1] != null) {
                                location[names[i]] = toIntIfInt(match[i + 1]);
                            }
                        }
                    }
                };

                var parseReg = function (obj, location, content) {
                    var needsBlank = obj.name && obj.names;
                    if (obj.push && !location[obj.push]) {
                        location[obj.push] = [];
                    } else if (needsBlank && !location[obj.name]) {
                        location[obj.name] = {};
                    }
                    var keyLocation = obj.push
                        ? {} // blank object that will be pushed
                        : needsBlank
                        ? location[obj.name]
                        : location; // otherwise, named location or root

                    attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);

                    if (obj.push) {
                        location[obj.push].push(keyLocation);
                    }
                };

                var grammar = require('./grammar');
                var validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);

                exports.parse = function (sdp) {
                    var session = {},
                        media = [],
                        location = session; // points at where properties go under (one of the above)

                    // parse lines we understand
                    sdp.split(/(\r\n|\r|\n)/)
                        .filter(validLine)
                        .forEach(function (l) {
                            var type = l[0];
                            var content = l.slice(2);
                            if (type === 'm') {
                                media.push({ rtp: [], fmtp: [] });
                                location = media[media.length - 1]; // point at latest media line
                            }

                            for (var j = 0; j < (grammar[type] || []).length; j += 1) {
                                var obj = grammar[type][j];
                                if (obj.reg.test(content)) {
                                    return parseReg(obj, location, content);
                                }
                            }
                        });

                    session.media = media; // link it up
                    return session;
                };

                var paramReducer = function (acc, expr) {
                    var s = expr.split(/=(.+)/, 2);
                    if (s.length === 2) {
                        acc[s[0]] = toIntIfInt(s[1]);
                    } else if (s.length === 1 && expr.length > 1) {
                        acc[s[0]] = undefined;
                    }
                    return acc;
                };

                exports.parseParams = function (str) {
                    return str.split(/;\s?/).reduce(paramReducer, {});
                };

                // For backward compatibility - alias will be removed in 3.0.0
                exports.parseFmtpConfig = exports.parseParams;

                exports.parsePayloads = function (str) {
                    return str.toString().split(' ').map(Number);
                };

                exports.parseRemoteCandidates = function (str) {
                    var candidates = [];
                    var parts = str.split(' ').map(toIntIfInt);
                    for (var i = 0; i < parts.length; i += 3) {
                        candidates.push({
                            component: parts[i],
                            ip: parts[i + 1],
                            port: parts[i + 2],
                        });
                    }
                    return candidates;
                };

                exports.parseImageAttributes = function (str) {
                    return str.split(' ').map(function (item) {
                        return item
                            .substring(1, item.length - 1)
                            .split(',')
                            .reduce(paramReducer, {});
                    });
                };

                exports.parseSimulcastStreamList = function (str) {
                    return str.split(';').map(function (stream) {
                        return stream.split(',').map(function (format) {
                            var scid,
                                paused = false;

                            if (format[0] !== '~') {
                                scid = toIntIfInt(format);
                            } else {
                                scid = toIntIfInt(format.substring(1, format.length));
                                paused = true;
                            }

                            return {
                                scid: scid,
                                paused: paused,
                            };
                        });
                    });
                };
            },
            { './grammar': 72 },
        ],
        75: [
            function (require, module, exports) {
                var grammar = require('./grammar');

                // customized util.format - discards excess arguments and can void middle ones
                var formatRegExp = /%[sdv%]/g;
                var format = function (formatStr) {
                    var i = 1;
                    var args = arguments;
                    var len = args.length;
                    return formatStr.replace(formatRegExp, function (x) {
                        if (i >= len) {
                            return x; // missing argument
                        }
                        var arg = args[i];
                        i += 1;
                        switch (x) {
                            case '%%':
                                return '%';
                            case '%s':
                                return String(arg);
                            case '%d':
                                return Number(arg);
                            case '%v':
                                return '';
                        }
                    });
                    // NB: we discard excess arguments - they are typically undefined from makeLine
                };

                var makeLine = function (type, obj, location) {
                    var str =
                        obj.format instanceof Function
                            ? obj.format(obj.push ? location : location[obj.name])
                            : obj.format;

                    var args = [type + '=' + str];
                    if (obj.names) {
                        for (var i = 0; i < obj.names.length; i += 1) {
                            var n = obj.names[i];
                            if (obj.name) {
                                args.push(location[obj.name][n]);
                            } else {
                                // for mLine and push attributes
                                args.push(location[obj.names[i]]);
                            }
                        }
                    } else {
                        args.push(location[obj.name]);
                    }
                    return format.apply(null, args);
                };

                // RFC specified order
                // TODO: extend this with all the rest
                var defaultOuterOrder = [
                    'v',
                    'o',
                    's',
                    'i',
                    'u',
                    'e',
                    'p',
                    'c',
                    'b',
                    't',
                    'r',
                    'z',
                    'a',
                ];
                var defaultInnerOrder = ['i', 'c', 'b', 'a'];

                module.exports = function (session, opts) {
                    opts = opts || {};
                    // ensure certain properties exist
                    if (session.version == null) {
                        session.version = 0; // 'v=0' must be there (only defined version atm)
                    }
                    if (session.name == null) {
                        session.name = ' '; // 's= ' must be there if no meaningful name set
                    }
                    session.media.forEach(function (mLine) {
                        if (mLine.payloads == null) {
                            mLine.payloads = '';
                        }
                    });

                    var outerOrder = opts.outerOrder || defaultOuterOrder;
                    var innerOrder = opts.innerOrder || defaultInnerOrder;
                    var sdp = [];

                    // loop through outerOrder for matching properties on session
                    outerOrder.forEach(function (type) {
                        grammar[type].forEach(function (obj) {
                            if (obj.name in session && session[obj.name] != null) {
                                sdp.push(makeLine(type, obj, session));
                            } else if (obj.push in session && session[obj.push] != null) {
                                session[obj.push].forEach(function (el) {
                                    sdp.push(makeLine(type, obj, el));
                                });
                            }
                        });
                    });

                    // then for each media line, follow the innerOrder
                    session.media.forEach(function (mLine) {
                        sdp.push(makeLine('m', grammar.m[0], mLine));

                        innerOrder.forEach(function (type) {
                            grammar[type].forEach(function (obj) {
                                if (obj.name in mLine && mLine[obj.name] != null) {
                                    sdp.push(makeLine(type, obj, mLine));
                                } else if (obj.push in mLine && mLine[obj.push] != null) {
                                    mLine[obj.push].forEach(function (el) {
                                        sdp.push(makeLine(type, obj, el));
                                    });
                                }
                            });
                        });
                    });

                    return sdp.join('\r\n') + '\r\n';
                };
            },
            { './grammar': 72 },
        ],
        76: [
            function (require, module, exports) {
                'use strict';
                /**
                 * Initialize backoff timer with `opts`.
                 *
                 * - `min` initial timeout in milliseconds [100]
                 * - `max` max timeout [10000]
                 * - `jitter` [0]
                 * - `factor` [2]
                 *
                 * @param {Object} opts
                 * @api public
                 */
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.Backoff = void 0;
                function Backoff(opts) {
                    opts = opts || {};
                    this.ms = opts.min || 100;
                    this.max = opts.max || 10000;
                    this.factor = opts.factor || 2;
                    this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
                    this.attempts = 0;
                }
                exports.Backoff = Backoff;
                /**
                 * Return the backoff duration.
                 *
                 * @return {Number}
                 * @api public
                 */
                Backoff.prototype.duration = function () {
                    var ms = this.ms * Math.pow(this.factor, this.attempts++);
                    if (this.jitter) {
                        var rand = Math.random();
                        var deviation = Math.floor(rand * this.jitter * ms);
                        ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;
                    }
                    return Math.min(ms, this.max) | 0;
                };
                /**
                 * Reset the number of attempts.
                 *
                 * @api public
                 */
                Backoff.prototype.reset = function () {
                    this.attempts = 0;
                };
                /**
                 * Set the minimum duration
                 *
                 * @api public
                 */
                Backoff.prototype.setMin = function (min) {
                    this.ms = min;
                };
                /**
                 * Set the maximum duration
                 *
                 * @api public
                 */
                Backoff.prototype.setMax = function (max) {
                    this.max = max;
                };
                /**
                 * Set the jitter
                 *
                 * @api public
                 */
                Backoff.prototype.setJitter = function (jitter) {
                    this.jitter = jitter;
                };
            },
            {},
        ],
        77: [
            function (require, module, exports) {
                'use strict';
                var __importDefault =
                    (this && this.__importDefault) ||
                    function (mod) {
                        return mod && mod.__esModule ? mod : { default: mod };
                    };
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.default =
                    exports.connect =
                    exports.io =
                    exports.Socket =
                    exports.Manager =
                    exports.protocol =
                        void 0;
                const url_js_1 = require('./url.js');
                const manager_js_1 = require('./manager.js');
                Object.defineProperty(exports, 'Manager', {
                    enumerable: true,
                    get: function () {
                        return manager_js_1.Manager;
                    },
                });
                const socket_js_1 = require('./socket.js');
                Object.defineProperty(exports, 'Socket', {
                    enumerable: true,
                    get: function () {
                        return socket_js_1.Socket;
                    },
                });
                const debug_1 = __importDefault(require('debug')); // debug()
                const debug = debug_1.default('socket.io-client'); // debug()
                /**
                 * Managers cache.
                 */
                const cache = {};
                function lookup(uri, opts) {
                    if (typeof uri === 'object') {
                        opts = uri;
                        uri = undefined;
                    }
                    opts = opts || {};
                    const parsed = url_js_1.url(uri, opts.path || '/socket.io');
                    const source = parsed.source;
                    const id = parsed.id;
                    const path = parsed.path;
                    const sameNamespace = cache[id] && path in cache[id]['nsps'];
                    const newConnection =
                        opts.forceNew ||
                        opts['force new connection'] ||
                        false === opts.multiplex ||
                        sameNamespace;
                    let io;
                    if (newConnection) {
                        debug('ignoring socket cache for %s', source);
                        io = new manager_js_1.Manager(source, opts);
                    } else {
                        if (!cache[id]) {
                            debug('new io instance for %s', source);
                            cache[id] = new manager_js_1.Manager(source, opts);
                        }
                        io = cache[id];
                    }
                    if (parsed.query && !opts.query) {
                        opts.query = parsed.queryKey;
                    }
                    return io.socket(parsed.path, opts);
                }
                exports.io = lookup;
                exports.connect = lookup;
                exports.default = lookup;
                // so that "lookup" can be used both as a function (e.g. `io(...)`) and as a
                // namespace (e.g. `io.connect(...)`), for backward compatibility
                Object.assign(lookup, {
                    Manager: manager_js_1.Manager,
                    Socket: socket_js_1.Socket,
                    io: lookup,
                    connect: lookup,
                });
                /**
                 * Protocol version.
                 *
                 * @public
                 */
                var socket_io_parser_1 = require('socket.io-parser');
                Object.defineProperty(exports, 'protocol', {
                    enumerable: true,
                    get: function () {
                        return socket_io_parser_1.protocol;
                    },
                });

                module.exports = lookup;
            },
            {
                './manager.js': 78,
                './socket.js': 80,
                './url.js': 81,
                debug: 8,
                'socket.io-parser': 83,
            },
        ],
        78: [
            function (require, module, exports) {
                'use strict';
                var __createBinding =
                    (this && this.__createBinding) ||
                    (Object.create
                        ? function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              Object.defineProperty(o, k2, {
                                  enumerable: true,
                                  get: function () {
                                      return m[k];
                                  },
                              });
                          }
                        : function (o, m, k, k2) {
                              if (k2 === undefined) k2 = k;
                              o[k2] = m[k];
                          });
                var __setModuleDefault =
                    (this && this.__setModuleDefault) ||
                    (Object.create
                        ? function (o, v) {
                              Object.defineProperty(o, 'default', { enumerable: true, value: v });
                          }
                        : function (o, v) {
                              o['default'] = v;
                          });
                var __importStar =
                    (this && this.__importStar) ||
                    function (mod) {
                        if (mod && mod.__esModule) return mod;
                        var result = {};
                        if (mod != null)
                            for (var k in mod)
                                if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
                                    __createBinding(result, mod, k);
                        __setModuleDefault(result, mod);
                        return result;
                    };
                var __importDefault =
                    (this && this.__importDefault) ||
                    function (mod) {
                        return mod && mod.__esModule ? mod : { default: mod };
                    };
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.Manager = void 0;
                const engine_io_client_1 = require('engine.io-client');
                const socket_js_1 = require('./socket.js');
                const parser = __importStar(require('socket.io-parser'));
                const on_js_1 = require('./on.js');
                const backo2_js_1 = require('./contrib/backo2.js');
                const component_emitter_1 = require('@socket.io/component-emitter');
                const debug_1 = __importDefault(require('debug')); // debug()
                const debug = debug_1.default('socket.io-client:manager'); // debug()
                class Manager extends component_emitter_1.Emitter {
                    constructor(uri, opts) {
                        var _a;
                        super();
                        this.nsps = {};
                        this.subs = [];
                        if (uri && 'object' === typeof uri) {
                            opts = uri;
                            uri = undefined;
                        }
                        opts = opts || {};
                        opts.path = opts.path || '/socket.io';
                        this.opts = opts;
                        engine_io_client_1.installTimerFunctions(this, opts);
                        this.reconnection(opts.reconnection !== false);
                        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
                        this.reconnectionDelay(opts.reconnectionDelay || 1000);
                        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
                        this.randomizationFactor(
                            (_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5,
                        );
                        this.backoff = new backo2_js_1.Backoff({
                            min: this.reconnectionDelay(),
                            max: this.reconnectionDelayMax(),
                            jitter: this.randomizationFactor(),
                        });
                        this.timeout(null == opts.timeout ? 20000 : opts.timeout);
                        this._readyState = 'closed';
                        this.uri = uri;
                        const _parser = opts.parser || parser;
                        this.encoder = new _parser.Encoder();
                        this.decoder = new _parser.Decoder();
                        this._autoConnect = opts.autoConnect !== false;
                        if (this._autoConnect) this.open();
                    }
                    reconnection(v) {
                        if (!arguments.length) return this._reconnection;
                        this._reconnection = !!v;
                        return this;
                    }
                    reconnectionAttempts(v) {
                        if (v === undefined) return this._reconnectionAttempts;
                        this._reconnectionAttempts = v;
                        return this;
                    }
                    reconnectionDelay(v) {
                        var _a;
                        if (v === undefined) return this._reconnectionDelay;
                        this._reconnectionDelay = v;
                        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);
                        return this;
                    }
                    randomizationFactor(v) {
                        var _a;
                        if (v === undefined) return this._randomizationFactor;
                        this._randomizationFactor = v;
                        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);
                        return this;
                    }
                    reconnectionDelayMax(v) {
                        var _a;
                        if (v === undefined) return this._reconnectionDelayMax;
                        this._reconnectionDelayMax = v;
                        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);
                        return this;
                    }
                    timeout(v) {
                        if (!arguments.length) return this._timeout;
                        this._timeout = v;
                        return this;
                    }
                    /**
                     * Starts trying to reconnect if reconnection is enabled and we have not
                     * started reconnecting yet
                     *
                     * @private
                     */
                    maybeReconnectOnOpen() {
                        // Only try to reconnect if it's the first time we're connecting
                        if (
                            !this._reconnecting &&
                            this._reconnection &&
                            this.backoff.attempts === 0
                        ) {
                            // keeps reconnection from firing twice for the same reconnection loop
                            this.reconnect();
                        }
                    }
                    /**
                     * Sets the current transport `socket`.
                     *
                     * @param {Function} fn - optional, callback
                     * @return self
                     * @public
                     */
                    open(fn) {
                        debug('readyState %s', this._readyState);
                        if (~this._readyState.indexOf('open')) return this;
                        debug('opening %s', this.uri);
                        this.engine = new engine_io_client_1.Socket(this.uri, this.opts);
                        const socket = this.engine;
                        const self = this;
                        this._readyState = 'opening';
                        this.skipReconnect = false;
                        // emit `open`
                        const openSubDestroy = on_js_1.on(socket, 'open', function () {
                            self.onopen();
                            fn && fn();
                        });
                        const onError = (err) => {
                            debug('error');
                            this.cleanup();
                            this._readyState = 'closed';
                            this.emitReserved('error', err);
                            if (fn) {
                                fn(err);
                            } else {
                                // Only do this if there is no fn to handle the error
                                this.maybeReconnectOnOpen();
                            }
                        };
                        // emit `error`
                        const errorSub = on_js_1.on(socket, 'error', onError);
                        if (false !== this._timeout) {
                            const timeout = this._timeout;
                            debug('connect attempt will timeout after %d', timeout);
                            // set timer
                            const timer = this.setTimeoutFn(() => {
                                debug('connect attempt timed out after %d', timeout);
                                openSubDestroy();
                                onError(new Error('timeout'));
                                socket.close();
                            }, timeout);
                            if (this.opts.autoUnref) {
                                timer.unref();
                            }
                            this.subs.push(() => {
                                this.clearTimeoutFn(timer);
                            });
                        }
                        this.subs.push(openSubDestroy);
                        this.subs.push(errorSub);
                        return this;
                    }
                    /**
                     * Alias for open()
                     *
                     * @return self
                     * @public
                     */
                    connect(fn) {
                        return this.open(fn);
                    }
                    /**
                     * Called upon transport open.
                     *
                     * @private
                     */
                    onopen() {
                        debug('open');
                        // clear old subs
                        this.cleanup();
                        // mark as open
                        this._readyState = 'open';
                        this.emitReserved('open');
                        // add new subs
                        const socket = this.engine;
                        this.subs.push(
                            on_js_1.on(socket, 'ping', this.onping.bind(this)),
                            on_js_1.on(socket, 'data', this.ondata.bind(this)),
                            on_js_1.on(socket, 'error', this.onerror.bind(this)),
                            on_js_1.on(socket, 'close', this.onclose.bind(this)),
                            on_js_1.on(this.decoder, 'decoded', this.ondecoded.bind(this)),
                        );
                    }
                    /**
                     * Called upon a ping.
                     *
                     * @private
                     */
                    onping() {
                        this.emitReserved('ping');
                    }
                    /**
                     * Called with data.
                     *
                     * @private
                     */
                    ondata(data) {
                        try {
                            this.decoder.add(data);
                        } catch (e) {
                            this.onclose('parse error', e);
                        }
                    }
                    /**
                     * Called when parser fully decodes a packet.
                     *
                     * @private
                     */
                    ondecoded(packet) {
                        // the nextTick call prevents an exception in a user-provided event listener from triggering a disconnection due to a "parse error"
                        engine_io_client_1.nextTick(() => {
                            this.emitReserved('packet', packet);
                        }, this.setTimeoutFn);
                    }
                    /**
                     * Called upon socket error.
                     *
                     * @private
                     */
                    onerror(err) {
                        debug('error', err);
                        this.emitReserved('error', err);
                    }
                    /**
                     * Creates a new socket for the given `nsp`.
                     *
                     * @return {Socket}
                     * @public
                     */
                    socket(nsp, opts) {
                        let socket = this.nsps[nsp];
                        if (!socket) {
                            socket = new socket_js_1.Socket(this, nsp, opts);
                            this.nsps[nsp] = socket;
                        } else if (this._autoConnect && !socket.active) {
                            socket.connect();
                        }
                        return socket;
                    }
                    /**
                     * Called upon a socket close.
                     *
                     * @param socket
                     * @private
                     */
                    _destroy(socket) {
                        const nsps = Object.keys(this.nsps);
                        for (const nsp of nsps) {
                            const socket = this.nsps[nsp];
                            if (socket.active) {
                                debug('socket %s is still active, skipping close', nsp);
                                return;
                            }
                        }
                        this._close();
                    }
                    /**
                     * Writes a packet.
                     *
                     * @param packet
                     * @private
                     */
                    _packet(packet) {
                        debug('writing packet %j', packet);
                        const encodedPackets = this.encoder.encode(packet);
                        for (let i = 0; i < encodedPackets.length; i++) {
                            this.engine.write(encodedPackets[i], packet.options);
                        }
                    }
                    /**
                     * Clean up transport subscriptions and packet buffer.
                     *
                     * @private
                     */
                    cleanup() {
                        debug('cleanup');
                        this.subs.forEach((subDestroy) => subDestroy());
                        this.subs.length = 0;
                        this.decoder.destroy();
                    }
                    /**
                     * Close the current socket.
                     *
                     * @private
                     */
                    _close() {
                        debug('disconnect');
                        this.skipReconnect = true;
                        this._reconnecting = false;
                        this.onclose('forced close');
                        if (this.engine) this.engine.close();
                    }
                    /**
                     * Alias for close()
                     *
                     * @private
                     */
                    disconnect() {
                        return this._close();
                    }
                    /**
                     * Called upon engine close.
                     *
                     * @private
                     */
                    onclose(reason, description) {
                        debug('closed due to %s', reason);
                        this.cleanup();
                        this.backoff.reset();
                        this._readyState = 'closed';
                        this.emitReserved('close', reason, description);
                        if (this._reconnection && !this.skipReconnect) {
                            this.reconnect();
                        }
                    }
                    /**
                     * Attempt a reconnection.
                     *
                     * @private
                     */
                    reconnect() {
                        if (this._reconnecting || this.skipReconnect) return this;
                        const self = this;
                        if (this.backoff.attempts >= this._reconnectionAttempts) {
                            debug('reconnect failed');
                            this.backoff.reset();
                            this.emitReserved('reconnect_failed');
                            this._reconnecting = false;
                        } else {
                            const delay = this.backoff.duration();
                            debug('will wait %dms before reconnect attempt', delay);
                            this._reconnecting = true;
                            const timer = this.setTimeoutFn(() => {
                                if (self.skipReconnect) return;
                                debug('attempting reconnect');
                                this.emitReserved('reconnect_attempt', self.backoff.attempts);
                                // check again for the case socket closed in above events
                                if (self.skipReconnect) return;
                                self.open((err) => {
                                    if (err) {
                                        debug('reconnect attempt error');
                                        self._reconnecting = false;
                                        self.reconnect();
                                        this.emitReserved('reconnect_error', err);
                                    } else {
                                        debug('reconnect success');
                                        self.onreconnect();
                                    }
                                });
                            }, delay);
                            if (this.opts.autoUnref) {
                                timer.unref();
                            }
                            this.subs.push(() => {
                                this.clearTimeoutFn(timer);
                            });
                        }
                    }
                    /**
                     * Called upon successful reconnect.
                     *
                     * @private
                     */
                    onreconnect() {
                        const attempt = this.backoff.attempts;
                        this._reconnecting = false;
                        this.backoff.reset();
                        this.emitReserved('reconnect', attempt);
                    }
                }
                exports.Manager = Manager;
            },
            {
                './contrib/backo2.js': 76,
                './on.js': 79,
                './socket.js': 80,
                '@socket.io/component-emitter': 2,
                debug: 8,
                'engine.io-client': 15,
                'socket.io-parser': 83,
            },
        ],
        79: [
            function (require, module, exports) {
                'use strict';
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.on = void 0;
                function on(obj, ev, fn) {
                    obj.on(ev, fn);
                    return function subDestroy() {
                        obj.off(ev, fn);
                    };
                }
                exports.on = on;
            },
            {},
        ],
        80: [
            function (require, module, exports) {
                'use strict';
                var __importDefault =
                    (this && this.__importDefault) ||
                    function (mod) {
                        return mod && mod.__esModule ? mod : { default: mod };
                    };
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.Socket = void 0;
                const socket_io_parser_1 = require('socket.io-parser');
                const on_js_1 = require('./on.js');
                const component_emitter_1 = require('@socket.io/component-emitter');
                const debug_1 = __importDefault(require('debug')); // debug()
                const debug = debug_1.default('socket.io-client:socket'); // debug()
                /**
                 * Internal events.
                 * These events can't be emitted by the user.
                 */
                const RESERVED_EVENTS = Object.freeze({
                    connect: 1,
                    connect_error: 1,
                    disconnect: 1,
                    disconnecting: 1,
                    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener
                    newListener: 1,
                    removeListener: 1,
                });
                /**
                 * A Socket is the fundamental class for interacting with the server.
                 *
                 * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.
                 *
                 * @example
                 * const socket = io();
                 *
                 * socket.on("connect", () => {
                 *   console.log("connected");
                 * });
                 *
                 * // send an event to the server
                 * socket.emit("foo", "bar");
                 *
                 * socket.on("foobar", () => {
                 *   // an event was received from the server
                 * });
                 *
                 * // upon disconnection
                 * socket.on("disconnect", (reason) => {
                 *   console.log(`disconnected due to ${reason}`);
                 * });
                 */
                class Socket extends component_emitter_1.Emitter {
                    /**
                     * `Socket` constructor.
                     */
                    constructor(io, nsp, opts) {
                        super();
                        /**
                         * Whether the socket is currently connected to the server.
                         *
                         * @example
                         * const socket = io();
                         *
                         * socket.on("connect", () => {
                         *   console.log(socket.connected); // true
                         * });
                         *
                         * socket.on("disconnect", () => {
                         *   console.log(socket.connected); // false
                         * });
                         */
                        this.connected = false;
                        /**
                         * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will
                         * be transmitted by the server.
                         */
                        this.recovered = false;
                        /**
                         * Buffer for packets received before the CONNECT packet
                         */
                        this.receiveBuffer = [];
                        /**
                         * Buffer for packets that will be sent once the socket is connected
                         */
                        this.sendBuffer = [];
                        /**
                         * The queue of packets to be sent with retry in case of failure.
                         *
                         * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.
                         * @private
                         */
                        this._queue = [];
                        /**
                         * A sequence to generate the ID of the {@link QueuedPacket}.
                         * @private
                         */
                        this._queueSeq = 0;
                        this.ids = 0;
                        this.acks = {};
                        this.flags = {};
                        this.io = io;
                        this.nsp = nsp;
                        if (opts && opts.auth) {
                            this.auth = opts.auth;
                        }
                        this._opts = Object.assign({}, opts);
                        if (this.io._autoConnect) this.open();
                    }
                    /**
                     * Whether the socket is currently disconnected
                     *
                     * @example
                     * const socket = io();
                     *
                     * socket.on("connect", () => {
                     *   console.log(socket.disconnected); // false
                     * });
                     *
                     * socket.on("disconnect", () => {
                     *   console.log(socket.disconnected); // true
                     * });
                     */
                    get disconnected() {
                        return !this.connected;
                    }
                    /**
                     * Subscribe to open, close and packet events
                     *
                     * @private
                     */
                    subEvents() {
                        if (this.subs) return;
                        const io = this.io;
                        this.subs = [
                            on_js_1.on(io, 'open', this.onopen.bind(this)),
                            on_js_1.on(io, 'packet', this.onpacket.bind(this)),
                            on_js_1.on(io, 'error', this.onerror.bind(this)),
                            on_js_1.on(io, 'close', this.onclose.bind(this)),
                        ];
                    }
                    /**
                     * Whether the Socket will try to reconnect when its Manager connects or reconnects.
                     *
                     * @example
                     * const socket = io();
                     *
                     * console.log(socket.active); // true
                     *
                     * socket.on("disconnect", (reason) => {
                     *   if (reason === "io server disconnect") {
                     *     // the disconnection was initiated by the server, you need to manually reconnect
                     *     console.log(socket.active); // false
                     *   }
                     *   // else the socket will automatically try to reconnect
                     *   console.log(socket.active); // true
                     * });
                     */
                    get active() {
                        return !!this.subs;
                    }
                    /**
                     * "Opens" the socket.
                     *
                     * @example
                     * const socket = io({
                     *   autoConnect: false
                     * });
                     *
                     * socket.connect();
                     */
                    connect() {
                        if (this.connected) return this;
                        this.subEvents();
                        if (!this.io['_reconnecting']) this.io.open(); // ensure open
                        if ('open' === this.io._readyState) this.onopen();
                        return this;
                    }
                    /**
                     * Alias for {@link connect()}.
                     */
                    open() {
                        return this.connect();
                    }
                    /**
                     * Sends a `message` event.
                     *
                     * This method mimics the WebSocket.send() method.
                     *
                     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send
                     *
                     * @example
                     * socket.send("hello");
                     *
                     * // this is equivalent to
                     * socket.emit("message", "hello");
                     *
                     * @return self
                     */
                    send(...args) {
                        args.unshift('message');
                        this.emit.apply(this, args);
                        return this;
                    }
                    /**
                     * Override `emit`.
                     * If the event is in `events`, it's emitted normally.
                     *
                     * @example
                     * socket.emit("hello", "world");
                     *
                     * // all serializable datastructures are supported (no need to call JSON.stringify)
                     * socket.emit("hello", 1, "2", { 3: ["4"], 5: Uint8Array.from([6]) });
                     *
                     * // with an acknowledgement from the server
                     * socket.emit("hello", "world", (val) => {
                     *   // ...
                     * });
                     *
                     * @return self
                     */
                    emit(ev, ...args) {
                        if (RESERVED_EVENTS.hasOwnProperty(ev)) {
                            throw new Error('"' + ev.toString() + '" is a reserved event name');
                        }
                        args.unshift(ev);
                        if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {
                            this._addToQueue(args);
                            return this;
                        }
                        const packet = {
                            type: socket_io_parser_1.PacketType.EVENT,
                            data: args,
                        };
                        packet.options = {};
                        packet.options.compress = this.flags.compress !== false;
                        // event ack callback
                        if ('function' === typeof args[args.length - 1]) {
                            const id = this.ids++;
                            debug('emitting packet with ack id %d', id);
                            const ack = args.pop();
                            this._registerAckCallback(id, ack);
                            packet.id = id;
                        }
                        const isTransportWritable =
                            this.io.engine &&
                            this.io.engine.transport &&
                            this.io.engine.transport.writable;
                        const discardPacket =
                            this.flags.volatile && (!isTransportWritable || !this.connected);
                        if (discardPacket) {
                            debug('discard packet as the transport is not currently writable');
                        } else if (this.connected) {
                            this.notifyOutgoingListeners(packet);
                            this.packet(packet);
                        } else {
                            this.sendBuffer.push(packet);
                        }
                        this.flags = {};
                        return this;
                    }
                    /**
                     * @private
                     */
                    _registerAckCallback(id, ack) {
                        var _a;
                        const timeout =
                            (_a = this.flags.timeout) !== null && _a !== void 0
                                ? _a
                                : this._opts.ackTimeout;
                        if (timeout === undefined) {
                            this.acks[id] = ack;
                            return;
                        }
                        // @ts-ignore
                        const timer = this.io.setTimeoutFn(() => {
                            delete this.acks[id];
                            for (let i = 0; i < this.sendBuffer.length; i++) {
                                if (this.sendBuffer[i].id === id) {
                                    debug('removing packet with ack id %d from the buffer', id);
                                    this.sendBuffer.splice(i, 1);
                                }
                            }
                            debug('event with ack id %d has timed out after %d ms', id, timeout);
                            ack.call(this, new Error('operation has timed out'));
                        }, timeout);
                        this.acks[id] = (...args) => {
                            // @ts-ignore
                            this.io.clearTimeoutFn(timer);
                            ack.apply(this, [null, ...args]);
                        };
                    }
                    /**
                     * Emits an event and waits for an acknowledgement
                     *
                     * @example
                     * // without timeout
                     * const response = await socket.emitWithAck("hello", "world");
                     *
                     * // with a specific timeout
                     * try {
                     *   const response = await socket.timeout(1000).emitWithAck("hello", "world");
                     * } catch (err) {
                     *   // the server did not acknowledge the event in the given delay
                     * }
                     *
                     * @return a Promise that will be fulfilled when the server acknowledges the event
                     */
                    emitWithAck(ev, ...args) {
                        // the timeout flag is optional
                        const withErr =
                            this.flags.timeout !== undefined || this._opts.ackTimeout !== undefined;
                        return new Promise((resolve, reject) => {
                            args.push((arg1, arg2) => {
                                if (withErr) {
                                    return arg1 ? reject(arg1) : resolve(arg2);
                                } else {
                                    return resolve(arg1);
                                }
                            });
                            this.emit(ev, ...args);
                        });
                    }
                    /**
                     * Add the packet to the queue.
                     * @param args
                     * @private
                     */
                    _addToQueue(args) {
                        let ack;
                        if (typeof args[args.length - 1] === 'function') {
                            ack = args.pop();
                        }
                        const packet = {
                            id: this._queueSeq++,
                            tryCount: 0,
                            pending: false,
                            args,
                            flags: Object.assign({ fromQueue: true }, this.flags),
                        };
                        args.push((err, ...responseArgs) => {
                            if (packet !== this._queue[0]) {
                                // the packet has already been acknowledged
                                return;
                            }
                            const hasError = err !== null;
                            if (hasError) {
                                if (packet.tryCount > this._opts.retries) {
                                    debug(
                                        'packet [%d] is discarded after %d tries',
                                        packet.id,
                                        packet.tryCount,
                                    );
                                    this._queue.shift();
                                    if (ack) {
                                        ack(err);
                                    }
                                }
                            } else {
                                debug('packet [%d] was successfully sent', packet.id);
                                this._queue.shift();
                                if (ack) {
                                    ack(null, ...responseArgs);
                                }
                            }
                            packet.pending = false;
                            return this._drainQueue();
                        });
                        this._queue.push(packet);
                        this._drainQueue();
                    }
                    /**
                     * Send the first packet of the queue, and wait for an acknowledgement from the server.
                     * @param force - whether to resend a packet that has not been acknowledged yet
                     *
                     * @private
                     */
                    _drainQueue(force = false) {
                        debug('draining queue');
                        if (!this.connected || this._queue.length === 0) {
                            return;
                        }
                        const packet = this._queue[0];
                        if (packet.pending && !force) {
                            debug(
                                'packet [%d] has already been sent and is waiting for an ack',
                                packet.id,
                            );
                            return;
                        }
                        packet.pending = true;
                        packet.tryCount++;
                        debug('sending packet [%d] (try n°%d)', packet.id, packet.tryCount);
                        this.flags = packet.flags;
                        this.emit.apply(this, packet.args);
                    }
                    /**
                     * Sends a packet.
                     *
                     * @param packet
                     * @private
                     */
                    packet(packet) {
                        packet.nsp = this.nsp;
                        this.io._packet(packet);
                    }
                    /**
                     * Called upon engine `open`.
                     *
                     * @private
                     */
                    onopen() {
                        debug('transport is open - connecting');
                        if (typeof this.auth == 'function') {
                            this.auth((data) => {
                                this._sendConnectPacket(data);
                            });
                        } else {
                            this._sendConnectPacket(this.auth);
                        }
                    }
                    /**
                     * Sends a CONNECT packet to initiate the Socket.IO session.
                     *
                     * @param data
                     * @private
                     */
                    _sendConnectPacket(data) {
                        this.packet({
                            type: socket_io_parser_1.PacketType.CONNECT,
                            data: this._pid
                                ? Object.assign({ pid: this._pid, offset: this._lastOffset }, data)
                                : data,
                        });
                    }
                    /**
                     * Called upon engine or manager `error`.
                     *
                     * @param err
                     * @private
                     */
                    onerror(err) {
                        if (!this.connected) {
                            this.emitReserved('connect_error', err);
                        }
                    }
                    /**
                     * Called upon engine `close`.
                     *
                     * @param reason
                     * @param description
                     * @private
                     */
                    onclose(reason, description) {
                        debug('close (%s)', reason);
                        this.connected = false;
                        delete this.id;
                        this.emitReserved('disconnect', reason, description);
                    }
                    /**
                     * Called with socket packet.
                     *
                     * @param packet
                     * @private
                     */
                    onpacket(packet) {
                        const sameNamespace = packet.nsp === this.nsp;
                        if (!sameNamespace) return;
                        switch (packet.type) {
                            case socket_io_parser_1.PacketType.CONNECT:
                                if (packet.data && packet.data.sid) {
                                    this.onconnect(packet.data.sid, packet.data.pid);
                                } else {
                                    this.emitReserved(
                                        'connect_error',
                                        new Error(
                                            'It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)',
                                        ),
                                    );
                                }
                                break;
                            case socket_io_parser_1.PacketType.EVENT:
                            case socket_io_parser_1.PacketType.BINARY_EVENT:
                                this.onevent(packet);
                                break;
                            case socket_io_parser_1.PacketType.ACK:
                            case socket_io_parser_1.PacketType.BINARY_ACK:
                                this.onack(packet);
                                break;
                            case socket_io_parser_1.PacketType.DISCONNECT:
                                this.ondisconnect();
                                break;
                            case socket_io_parser_1.PacketType.CONNECT_ERROR:
                                this.destroy();
                                const err = new Error(packet.data.message);
                                // @ts-ignore
                                err.data = packet.data.data;
                                this.emitReserved('connect_error', err);
                                break;
                        }
                    }
                    /**
                     * Called upon a server event.
                     *
                     * @param packet
                     * @private
                     */
                    onevent(packet) {
                        const args = packet.data || [];
                        debug('emitting event %j', args);
                        if (null != packet.id) {
                            debug('attaching ack callback to event');
                            args.push(this.ack(packet.id));
                        }
                        if (this.connected) {
                            this.emitEvent(args);
                        } else {
                            this.receiveBuffer.push(Object.freeze(args));
                        }
                    }
                    emitEvent(args) {
                        if (this._anyListeners && this._anyListeners.length) {
                            const listeners = this._anyListeners.slice();
                            for (const listener of listeners) {
                                listener.apply(this, args);
                            }
                        }
                        super.emit.apply(this, args);
                        if (this._pid && args.length && typeof args[args.length - 1] === 'string') {
                            this._lastOffset = args[args.length - 1];
                        }
                    }
                    /**
                     * Produces an ack callback to emit with an event.
                     *
                     * @private
                     */
                    ack(id) {
                        const self = this;
                        let sent = false;
                        return function (...args) {
                            // prevent double callbacks
                            if (sent) return;
                            sent = true;
                            debug('sending ack %j', args);
                            self.packet({
                                type: socket_io_parser_1.PacketType.ACK,
                                id: id,
                                data: args,
                            });
                        };
                    }
                    /**
                     * Called upon a server acknowlegement.
                     *
                     * @param packet
                     * @private
                     */
                    onack(packet) {
                        const ack = this.acks[packet.id];
                        if ('function' === typeof ack) {
                            debug('calling ack %s with %j', packet.id, packet.data);
                            ack.apply(this, packet.data);
                            delete this.acks[packet.id];
                        } else {
                            debug('bad ack %s', packet.id);
                        }
                    }
                    /**
                     * Called upon server connect.
                     *
                     * @private
                     */
                    onconnect(id, pid) {
                        debug('socket connected with id %s', id);
                        this.id = id;
                        this.recovered = pid && this._pid === pid;
                        this._pid = pid; // defined only if connection state recovery is enabled
                        this.connected = true;
                        this.emitBuffered();
                        this.emitReserved('connect');
                        this._drainQueue(true);
                    }
                    /**
                     * Emit buffered events (received and emitted).
                     *
                     * @private
                     */
                    emitBuffered() {
                        this.receiveBuffer.forEach((args) => this.emitEvent(args));
                        this.receiveBuffer = [];
                        this.sendBuffer.forEach((packet) => {
                            this.notifyOutgoingListeners(packet);
                            this.packet(packet);
                        });
                        this.sendBuffer = [];
                    }
                    /**
                     * Called upon server disconnect.
                     *
                     * @private
                     */
                    ondisconnect() {
                        debug('server disconnect (%s)', this.nsp);
                        this.destroy();
                        this.onclose('io server disconnect');
                    }
                    /**
                     * Called upon forced client/server side disconnections,
                     * this method ensures the manager stops tracking us and
                     * that reconnections don't get triggered for this.
                     *
                     * @private
                     */
                    destroy() {
                        if (this.subs) {
                            // clean subscriptions to avoid reconnections
                            this.subs.forEach((subDestroy) => subDestroy());
                            this.subs = undefined;
                        }
                        this.io['_destroy'](this);
                    }
                    /**
                     * Disconnects the socket manually. In that case, the socket will not try to reconnect.
                     *
                     * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.
                     *
                     * @example
                     * const socket = io();
                     *
                     * socket.on("disconnect", (reason) => {
                     *   // console.log(reason); prints "io client disconnect"
                     * });
                     *
                     * socket.disconnect();
                     *
                     * @return self
                     */
                    disconnect() {
                        if (this.connected) {
                            debug('performing disconnect (%s)', this.nsp);
                            this.packet({ type: socket_io_parser_1.PacketType.DISCONNECT });
                        }
                        // remove socket from pool
                        this.destroy();
                        if (this.connected) {
                            // fire events
                            this.onclose('io socket client disconnect');
                        }
                        return this;
                    }
                    /**
                     * Alias for {@link disconnect()}.
                     *
                     * @return self
                     */
                    close() {
                        return this.disconnect();
                    }
                    /**
                     * Sets the compress flag.
                     *
                     * @example
                     * socket.compress(false).emit("hello");
                     *
                     * @param compress - if `true`, compresses the sending data
                     * @return self
                     */
                    compress(compress) {
                        this.flags.compress = compress;
                        return this;
                    }
                    /**
                     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not
                     * ready to send messages.
                     *
                     * @example
                     * socket.volatile.emit("hello"); // the server may or may not receive it
                     *
                     * @returns self
                     */
                    get volatile() {
                        this.flags.volatile = true;
                        return this;
                    }
                    /**
                     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the
                     * given number of milliseconds have elapsed without an acknowledgement from the server:
                     *
                     * @example
                     * socket.timeout(5000).emit("my-event", (err) => {
                     *   if (err) {
                     *     // the server did not acknowledge the event in the given delay
                     *   }
                     * });
                     *
                     * @returns self
                     */
                    timeout(timeout) {
                        this.flags.timeout = timeout;
                        return this;
                    }
                    /**
                     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
                     * callback.
                     *
                     * @example
                     * socket.onAny((event, ...args) => {
                     *   console.log(`got ${event}`);
                     * });
                     *
                     * @param listener
                     */
                    onAny(listener) {
                        this._anyListeners = this._anyListeners || [];
                        this._anyListeners.push(listener);
                        return this;
                    }
                    /**
                     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
                     * callback. The listener is added to the beginning of the listeners array.
                     *
                     * @example
                     * socket.prependAny((event, ...args) => {
                     *   console.log(`got event ${event}`);
                     * });
                     *
                     * @param listener
                     */
                    prependAny(listener) {
                        this._anyListeners = this._anyListeners || [];
                        this._anyListeners.unshift(listener);
                        return this;
                    }
                    /**
                     * Removes the listener that will be fired when any event is emitted.
                     *
                     * @example
                     * const catchAllListener = (event, ...args) => {
                     *   console.log(`got event ${event}`);
                     * }
                     *
                     * socket.onAny(catchAllListener);
                     *
                     * // remove a specific listener
                     * socket.offAny(catchAllListener);
                     *
                     * // or remove all listeners
                     * socket.offAny();
                     *
                     * @param listener
                     */
                    offAny(listener) {
                        if (!this._anyListeners) {
                            return this;
                        }
                        if (listener) {
                            const listeners = this._anyListeners;
                            for (let i = 0; i < listeners.length; i++) {
                                if (listener === listeners[i]) {
                                    listeners.splice(i, 1);
                                    return this;
                                }
                            }
                        } else {
                            this._anyListeners = [];
                        }
                        return this;
                    }
                    /**
                     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,
                     * e.g. to remove listeners.
                     */
                    listenersAny() {
                        return this._anyListeners || [];
                    }
                    /**
                     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
                     * callback.
                     *
                     * Note: acknowledgements sent to the server are not included.
                     *
                     * @example
                     * socket.onAnyOutgoing((event, ...args) => {
                     *   console.log(`sent event ${event}`);
                     * });
                     *
                     * @param listener
                     */
                    onAnyOutgoing(listener) {
                        this._anyOutgoingListeners = this._anyOutgoingListeners || [];
                        this._anyOutgoingListeners.push(listener);
                        return this;
                    }
                    /**
                     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
                     * callback. The listener is added to the beginning of the listeners array.
                     *
                     * Note: acknowledgements sent to the server are not included.
                     *
                     * @example
                     * socket.prependAnyOutgoing((event, ...args) => {
                     *   console.log(`sent event ${event}`);
                     * });
                     *
                     * @param listener
                     */
                    prependAnyOutgoing(listener) {
                        this._anyOutgoingListeners = this._anyOutgoingListeners || [];
                        this._anyOutgoingListeners.unshift(listener);
                        return this;
                    }
                    /**
                     * Removes the listener that will be fired when any event is emitted.
                     *
                     * @example
                     * const catchAllListener = (event, ...args) => {
                     *   console.log(`sent event ${event}`);
                     * }
                     *
                     * socket.onAnyOutgoing(catchAllListener);
                     *
                     * // remove a specific listener
                     * socket.offAnyOutgoing(catchAllListener);
                     *
                     * // or remove all listeners
                     * socket.offAnyOutgoing();
                     *
                     * @param [listener] - the catch-all listener (optional)
                     */
                    offAnyOutgoing(listener) {
                        if (!this._anyOutgoingListeners) {
                            return this;
                        }
                        if (listener) {
                            const listeners = this._anyOutgoingListeners;
                            for (let i = 0; i < listeners.length; i++) {
                                if (listener === listeners[i]) {
                                    listeners.splice(i, 1);
                                    return this;
                                }
                            }
                        } else {
                            this._anyOutgoingListeners = [];
                        }
                        return this;
                    }
                    /**
                     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,
                     * e.g. to remove listeners.
                     */
                    listenersAnyOutgoing() {
                        return this._anyOutgoingListeners || [];
                    }
                    /**
                     * Notify the listeners for each packet sent
                     *
                     * @param packet
                     *
                     * @private
                     */
                    notifyOutgoingListeners(packet) {
                        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {
                            const listeners = this._anyOutgoingListeners.slice();
                            for (const listener of listeners) {
                                listener.apply(this, packet.data);
                            }
                        }
                    }
                }
                exports.Socket = Socket;
            },
            { './on.js': 79, '@socket.io/component-emitter': 2, debug: 8, 'socket.io-parser': 83 },
        ],
        81: [
            function (require, module, exports) {
                'use strict';
                var __importDefault =
                    (this && this.__importDefault) ||
                    function (mod) {
                        return mod && mod.__esModule ? mod : { default: mod };
                    };
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.url = void 0;
                const engine_io_client_1 = require('engine.io-client');
                const debug_1 = __importDefault(require('debug')); // debug()
                const debug = debug_1.default('socket.io-client:url'); // debug()
                /**
                 * URL parser.
                 *
                 * @param uri - url
                 * @param path - the request path of the connection
                 * @param loc - An object meant to mimic window.location.
                 *        Defaults to window.location.
                 * @public
                 */
                function url(uri, path = '', loc) {
                    let obj = uri;
                    // default to window.location
                    loc = loc || (typeof location !== 'undefined' && location);
                    if (null == uri) uri = loc.protocol + '//' + loc.host;
                    // relative path support
                    if (typeof uri === 'string') {
                        if ('/' === uri.charAt(0)) {
                            if ('/' === uri.charAt(1)) {
                                uri = loc.protocol + uri;
                            } else {
                                uri = loc.host + uri;
                            }
                        }
                        if (!/^(https?|wss?):\/\//.test(uri)) {
                            debug('protocol-less url %s', uri);
                            if ('undefined' !== typeof loc) {
                                uri = loc.protocol + '//' + uri;
                            } else {
                                uri = 'https://' + uri;
                            }
                        }
                        // parse
                        debug('parse %s', uri);
                        obj = engine_io_client_1.parse(uri);
                    }
                    // make sure we treat `localhost:80` and `localhost` equally
                    if (!obj.port) {
                        if (/^(http|ws)$/.test(obj.protocol)) {
                            obj.port = '80';
                        } else if (/^(http|ws)s$/.test(obj.protocol)) {
                            obj.port = '443';
                        }
                    }
                    obj.path = obj.path || '/';
                    const ipv6 = obj.host.indexOf(':') !== -1;
                    const host = ipv6 ? '[' + obj.host + ']' : obj.host;
                    // define unique id
                    obj.id = obj.protocol + '://' + host + ':' + obj.port + path;
                    // define href
                    obj.href =
                        obj.protocol +
                        '://' +
                        host +
                        (loc && loc.port === obj.port ? '' : ':' + obj.port);
                    return obj;
                }
                exports.url = url;
            },
            { debug: 8, 'engine.io-client': 15 },
        ],
        82: [
            function (require, module, exports) {
                'use strict';
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.reconstructPacket = exports.deconstructPacket = void 0;
                const is_binary_js_1 = require('./is-binary.js');
                /**
                 * Replaces every Buffer | ArrayBuffer | Blob | File in packet with a numbered placeholder.
                 *
                 * @param {Object} packet - socket.io event packet
                 * @return {Object} with deconstructed packet and list of buffers
                 * @public
                 */
                function deconstructPacket(packet) {
                    const buffers = [];
                    const packetData = packet.data;
                    const pack = packet;
                    pack.data = _deconstructPacket(packetData, buffers);
                    pack.attachments = buffers.length; // number of binary 'attachments'
                    return { packet: pack, buffers: buffers };
                }
                exports.deconstructPacket = deconstructPacket;
                function _deconstructPacket(data, buffers) {
                    if (!data) return data;
                    if ((0, is_binary_js_1.isBinary)(data)) {
                        const placeholder = { _placeholder: true, num: buffers.length };
                        buffers.push(data);
                        return placeholder;
                    } else if (Array.isArray(data)) {
                        const newData = new Array(data.length);
                        for (let i = 0; i < data.length; i++) {
                            newData[i] = _deconstructPacket(data[i], buffers);
                        }
                        return newData;
                    } else if (typeof data === 'object' && !(data instanceof Date)) {
                        const newData = {};
                        for (const key in data) {
                            if (Object.prototype.hasOwnProperty.call(data, key)) {
                                newData[key] = _deconstructPacket(data[key], buffers);
                            }
                        }
                        return newData;
                    }
                    return data;
                }
                /**
                 * Reconstructs a binary packet from its placeholder packet and buffers
                 *
                 * @param {Object} packet - event packet with placeholders
                 * @param {Array} buffers - binary buffers to put in placeholder positions
                 * @return {Object} reconstructed packet
                 * @public
                 */
                function reconstructPacket(packet, buffers) {
                    packet.data = _reconstructPacket(packet.data, buffers);
                    delete packet.attachments; // no longer useful
                    return packet;
                }
                exports.reconstructPacket = reconstructPacket;
                function _reconstructPacket(data, buffers) {
                    if (!data) return data;
                    if (data && data._placeholder === true) {
                        const isIndexValid =
                            typeof data.num === 'number' &&
                            data.num >= 0 &&
                            data.num < buffers.length;
                        if (isIndexValid) {
                            return buffers[data.num]; // appropriate buffer (should be natural order anyway)
                        } else {
                            throw new Error('illegal attachments');
                        }
                    } else if (Array.isArray(data)) {
                        for (let i = 0; i < data.length; i++) {
                            data[i] = _reconstructPacket(data[i], buffers);
                        }
                    } else if (typeof data === 'object') {
                        for (const key in data) {
                            if (Object.prototype.hasOwnProperty.call(data, key)) {
                                data[key] = _reconstructPacket(data[key], buffers);
                            }
                        }
                    }
                    return data;
                }
            },
            { './is-binary.js': 84 },
        ],
        83: [
            function (require, module, exports) {
                'use strict';
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.Decoder = exports.Encoder = exports.PacketType = exports.protocol = void 0;
                const component_emitter_1 = require('@socket.io/component-emitter');
                const binary_js_1 = require('./binary.js');
                const is_binary_js_1 = require('./is-binary.js');
                const debug_1 = require('debug'); // debug()
                const debug = (0, debug_1.default)('socket.io-parser'); // debug()
                /**
                 * These strings must not be used as event names, as they have a special meaning.
                 */
                const RESERVED_EVENTS = [
                    'connect',
                    'connect_error',
                    'disconnect',
                    'disconnecting',
                    'newListener',
                    'removeListener', // used by the Node.js EventEmitter
                ];
                /**
                 * Protocol version.
                 *
                 * @public
                 */
                exports.protocol = 5;
                var PacketType;
                (function (PacketType) {
                    PacketType[(PacketType['CONNECT'] = 0)] = 'CONNECT';
                    PacketType[(PacketType['DISCONNECT'] = 1)] = 'DISCONNECT';
                    PacketType[(PacketType['EVENT'] = 2)] = 'EVENT';
                    PacketType[(PacketType['ACK'] = 3)] = 'ACK';
                    PacketType[(PacketType['CONNECT_ERROR'] = 4)] = 'CONNECT_ERROR';
                    PacketType[(PacketType['BINARY_EVENT'] = 5)] = 'BINARY_EVENT';
                    PacketType[(PacketType['BINARY_ACK'] = 6)] = 'BINARY_ACK';
                })((PacketType = exports.PacketType || (exports.PacketType = {})));
                /**
                 * A socket.io Encoder instance
                 */
                class Encoder {
                    /**
                     * Encoder constructor
                     *
                     * @param {function} replacer - custom replacer to pass down to JSON.parse
                     */
                    constructor(replacer) {
                        this.replacer = replacer;
                    }
                    /**
                     * Encode a packet as a single string if non-binary, or as a
                     * buffer sequence, depending on packet type.
                     *
                     * @param {Object} obj - packet object
                     */
                    encode(obj) {
                        debug('encoding packet %j', obj);
                        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {
                            if ((0, is_binary_js_1.hasBinary)(obj)) {
                                return this.encodeAsBinary({
                                    type:
                                        obj.type === PacketType.EVENT
                                            ? PacketType.BINARY_EVENT
                                            : PacketType.BINARY_ACK,
                                    nsp: obj.nsp,
                                    data: obj.data,
                                    id: obj.id,
                                });
                            }
                        }
                        return [this.encodeAsString(obj)];
                    }
                    /**
                     * Encode packet as string.
                     */
                    encodeAsString(obj) {
                        // first is type
                        let str = '' + obj.type;
                        // attachments if we have them
                        if (
                            obj.type === PacketType.BINARY_EVENT ||
                            obj.type === PacketType.BINARY_ACK
                        ) {
                            str += obj.attachments + '-';
                        }
                        // if we have a namespace other than `/`
                        // we append it followed by a comma `,`
                        if (obj.nsp && '/' !== obj.nsp) {
                            str += obj.nsp + ',';
                        }
                        // immediately followed by the id
                        if (null != obj.id) {
                            str += obj.id;
                        }
                        // json data
                        if (null != obj.data) {
                            str += JSON.stringify(obj.data, this.replacer);
                        }
                        debug('encoded %j as %s', obj, str);
                        return str;
                    }
                    /**
                     * Encode packet as 'buffer sequence' by removing blobs, and
                     * deconstructing packet into object with placeholders and
                     * a list of buffers.
                     */
                    encodeAsBinary(obj) {
                        const deconstruction = (0, binary_js_1.deconstructPacket)(obj);
                        const pack = this.encodeAsString(deconstruction.packet);
                        const buffers = deconstruction.buffers;
                        buffers.unshift(pack); // add packet info to beginning of data list
                        return buffers; // write all the buffers
                    }
                }
                exports.Encoder = Encoder;
                // see https://stackoverflow.com/questions/8511281/check-if-a-value-is-an-object-in-javascript
                function isObject(value) {
                    return Object.prototype.toString.call(value) === '[object Object]';
                }
                /**
                 * A socket.io Decoder instance
                 *
                 * @return {Object} decoder
                 */
                class Decoder extends component_emitter_1.Emitter {
                    /**
                     * Decoder constructor
                     *
                     * @param {function} reviver - custom reviver to pass down to JSON.stringify
                     */
                    constructor(reviver) {
                        super();
                        this.reviver = reviver;
                    }
                    /**
                     * Decodes an encoded packet string into packet JSON.
                     *
                     * @param {String} obj - encoded packet
                     */
                    add(obj) {
                        let packet;
                        if (typeof obj === 'string') {
                            if (this.reconstructor) {
                                throw new Error('got plaintext data when reconstructing a packet');
                            }
                            packet = this.decodeString(obj);
                            const isBinaryEvent = packet.type === PacketType.BINARY_EVENT;
                            if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {
                                packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;
                                // binary packet's json
                                this.reconstructor = new BinaryReconstructor(packet);
                                // no attachments, labeled binary but no binary data to follow
                                if (packet.attachments === 0) {
                                    super.emitReserved('decoded', packet);
                                }
                            } else {
                                // non-binary full packet
                                super.emitReserved('decoded', packet);
                            }
                        } else if ((0, is_binary_js_1.isBinary)(obj) || obj.base64) {
                            // raw binary data
                            if (!this.reconstructor) {
                                throw new Error('got binary data when not reconstructing a packet');
                            } else {
                                packet = this.reconstructor.takeBinaryData(obj);
                                if (packet) {
                                    // received final buffer
                                    this.reconstructor = null;
                                    super.emitReserved('decoded', packet);
                                }
                            }
                        } else {
                            throw new Error('Unknown type: ' + obj);
                        }
                    }
                    /**
                     * Decode a packet String (JSON data)
                     *
                     * @param {String} str
                     * @return {Object} packet
                     */
                    decodeString(str) {
                        let i = 0;
                        // look up type
                        const p = {
                            type: Number(str.charAt(0)),
                        };
                        if (PacketType[p.type] === undefined) {
                            throw new Error('unknown packet type ' + p.type);
                        }
                        // look up attachments if type binary
                        if (
                            p.type === PacketType.BINARY_EVENT ||
                            p.type === PacketType.BINARY_ACK
                        ) {
                            const start = i + 1;
                            while (str.charAt(++i) !== '-' && i != str.length) {}
                            const buf = str.substring(start, i);
                            if (buf != Number(buf) || str.charAt(i) !== '-') {
                                throw new Error('Illegal attachments');
                            }
                            p.attachments = Number(buf);
                        }
                        // look up namespace (if any)
                        if ('/' === str.charAt(i + 1)) {
                            const start = i + 1;
                            while (++i) {
                                const c = str.charAt(i);
                                if (',' === c) break;
                                if (i === str.length) break;
                            }
                            p.nsp = str.substring(start, i);
                        } else {
                            p.nsp = '/';
                        }
                        // look up id
                        const next = str.charAt(i + 1);
                        if ('' !== next && Number(next) == next) {
                            const start = i + 1;
                            while (++i) {
                                const c = str.charAt(i);
                                if (null == c || Number(c) != c) {
                                    --i;
                                    break;
                                }
                                if (i === str.length) break;
                            }
                            p.id = Number(str.substring(start, i + 1));
                        }
                        // look up json data
                        if (str.charAt(++i)) {
                            const payload = this.tryParse(str.substr(i));
                            if (Decoder.isPayloadValid(p.type, payload)) {
                                p.data = payload;
                            } else {
                                throw new Error('invalid payload');
                            }
                        }
                        debug('decoded %s as %j', str, p);
                        return p;
                    }
                    tryParse(str) {
                        try {
                            return JSON.parse(str, this.reviver);
                        } catch (e) {
                            return false;
                        }
                    }
                    static isPayloadValid(type, payload) {
                        switch (type) {
                            case PacketType.CONNECT:
                                return isObject(payload);
                            case PacketType.DISCONNECT:
                                return payload === undefined;
                            case PacketType.CONNECT_ERROR:
                                return typeof payload === 'string' || isObject(payload);
                            case PacketType.EVENT:
                            case PacketType.BINARY_EVENT:
                                return (
                                    Array.isArray(payload) &&
                                    (typeof payload[0] === 'number' ||
                                        (typeof payload[0] === 'string' &&
                                            RESERVED_EVENTS.indexOf(payload[0]) === -1))
                                );
                            case PacketType.ACK:
                            case PacketType.BINARY_ACK:
                                return Array.isArray(payload);
                        }
                    }
                    /**
                     * Deallocates a parser's resources
                     */
                    destroy() {
                        if (this.reconstructor) {
                            this.reconstructor.finishedReconstruction();
                            this.reconstructor = null;
                        }
                    }
                }
                exports.Decoder = Decoder;
                /**
                 * A manager of a binary event's 'buffer sequence'. Should
                 * be constructed whenever a packet of type BINARY_EVENT is
                 * decoded.
                 *
                 * @param {Object} packet
                 * @return {BinaryReconstructor} initialized reconstructor
                 */
                class BinaryReconstructor {
                    constructor(packet) {
                        this.packet = packet;
                        this.buffers = [];
                        this.reconPack = packet;
                    }
                    /**
                     * Method to be called when binary data received from connection
                     * after a BINARY_EVENT packet.
                     *
                     * @param {Buffer | ArrayBuffer} binData - the raw binary data received
                     * @return {null | Object} returns null if more binary data is expected or
                     *   a reconstructed packet object if all buffers have been received.
                     */
                    takeBinaryData(binData) {
                        this.buffers.push(binData);
                        if (this.buffers.length === this.reconPack.attachments) {
                            // done with buffer list
                            const packet = (0, binary_js_1.reconstructPacket)(
                                this.reconPack,
                                this.buffers,
                            );
                            this.finishedReconstruction();
                            return packet;
                        }
                        return null;
                    }
                    /**
                     * Cleans up binary packet reconstruction variables.
                     */
                    finishedReconstruction() {
                        this.reconPack = null;
                        this.buffers = [];
                    }
                }
            },
            {
                './binary.js': 82,
                './is-binary.js': 84,
                '@socket.io/component-emitter': 2,
                debug: 8,
            },
        ],
        84: [
            function (require, module, exports) {
                'use strict';
                Object.defineProperty(exports, '__esModule', { value: true });
                exports.hasBinary = exports.isBinary = void 0;
                const withNativeArrayBuffer = typeof ArrayBuffer === 'function';
                const isView = (obj) => {
                    return typeof ArrayBuffer.isView === 'function'
                        ? ArrayBuffer.isView(obj)
                        : obj.buffer instanceof ArrayBuffer;
                };
                const toString = Object.prototype.toString;
                const withNativeBlob =
                    typeof Blob === 'function' ||
                    (typeof Blob !== 'undefined' &&
                        toString.call(Blob) === '[object BlobConstructor]');
                const withNativeFile =
                    typeof File === 'function' ||
                    (typeof File !== 'undefined' &&
                        toString.call(File) === '[object FileConstructor]');
                /**
                 * Returns true if obj is a Buffer, an ArrayBuffer, a Blob or a File.
                 *
                 * @private
                 */
                function isBinary(obj) {
                    return (
                        (withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj))) ||
                        (withNativeBlob && obj instanceof Blob) ||
                        (withNativeFile && obj instanceof File)
                    );
                }
                exports.isBinary = isBinary;
                function hasBinary(obj, toJSON) {
                    if (!obj || typeof obj !== 'object') {
                        return false;
                    }
                    if (Array.isArray(obj)) {
                        for (let i = 0, l = obj.length; i < l; i++) {
                            if (hasBinary(obj[i])) {
                                return true;
                            }
                        }
                        return false;
                    }
                    if (isBinary(obj)) {
                        return true;
                    }
                    if (obj.toJSON && typeof obj.toJSON === 'function' && arguments.length === 1) {
                        return hasBinary(obj.toJSON(), true);
                    }
                    for (const key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
                            return true;
                        }
                    }
                    return false;
                }
                exports.hasBinary = hasBinary;
            },
            {},
        ],
        85: [
            function (require, module, exports) {
                /////////////////////////////////////////////////////////////////////////////////
                /* UAParser.js v1.0.35
   Copyright © 2012-2021 Faisal Salman <f@faisalman.com>
   MIT License */ /*
   Detect Browser, Engine, OS, CPU, and Device type/model from User-Agent data.
   Supports browser & node.js environment. 
   Demo   : https://faisalman.github.io/ua-parser-js
   Source : https://github.com/faisalman/ua-parser-js */
                /////////////////////////////////////////////////////////////////////////////////

                (function (window, undefined) {
                    'use strict';

                    //////////////
                    // Constants
                    /////////////

                    var LIBVERSION = '1.0.35',
                        EMPTY = '',
                        UNKNOWN = '?',
                        FUNC_TYPE = 'function',
                        UNDEF_TYPE = 'undefined',
                        OBJ_TYPE = 'object',
                        STR_TYPE = 'string',
                        MAJOR = 'major',
                        MODEL = 'model',
                        NAME = 'name',
                        TYPE = 'type',
                        VENDOR = 'vendor',
                        VERSION = 'version',
                        ARCHITECTURE = 'architecture',
                        CONSOLE = 'console',
                        MOBILE = 'mobile',
                        TABLET = 'tablet',
                        SMARTTV = 'smarttv',
                        WEARABLE = 'wearable',
                        EMBEDDED = 'embedded',
                        UA_MAX_LENGTH = 350;

                    var AMAZON = 'Amazon',
                        APPLE = 'Apple',
                        ASUS = 'ASUS',
                        BLACKBERRY = 'BlackBerry',
                        BROWSER = 'Browser',
                        CHROME = 'Chrome',
                        EDGE = 'Edge',
                        FIREFOX = 'Firefox',
                        GOOGLE = 'Google',
                        HUAWEI = 'Huawei',
                        LG = 'LG',
                        MICROSOFT = 'Microsoft',
                        MOTOROLA = 'Motorola',
                        OPERA = 'Opera',
                        SAMSUNG = 'Samsung',
                        SHARP = 'Sharp',
                        SONY = 'Sony',
                        VIERA = 'Viera',
                        XIAOMI = 'Xiaomi',
                        ZEBRA = 'Zebra',
                        FACEBOOK = 'Facebook',
                        CHROMIUM_OS = 'Chromium OS',
                        MAC_OS = 'Mac OS';

                    ///////////
                    // Helper
                    //////////

                    var extend = function (regexes, extensions) {
                            var mergedRegexes = {};
                            for (var i in regexes) {
                                if (extensions[i] && extensions[i].length % 2 === 0) {
                                    mergedRegexes[i] = extensions[i].concat(regexes[i]);
                                } else {
                                    mergedRegexes[i] = regexes[i];
                                }
                            }
                            return mergedRegexes;
                        },
                        enumerize = function (arr) {
                            var enums = {};
                            for (var i = 0; i < arr.length; i++) {
                                enums[arr[i].toUpperCase()] = arr[i];
                            }
                            return enums;
                        },
                        has = function (str1, str2) {
                            return typeof str1 === STR_TYPE
                                ? lowerize(str2).indexOf(lowerize(str1)) !== -1
                                : false;
                        },
                        lowerize = function (str) {
                            return str.toLowerCase();
                        },
                        majorize = function (version) {
                            return typeof version === STR_TYPE
                                ? version.replace(/[^\d\.]/g, EMPTY).split('.')[0]
                                : undefined;
                        },
                        trim = function (str, len) {
                            if (typeof str === STR_TYPE) {
                                str = str.replace(/^\s\s*/, EMPTY);
                                return typeof len === UNDEF_TYPE
                                    ? str
                                    : str.substring(0, UA_MAX_LENGTH);
                            }
                        };

                    ///////////////
                    // Map helper
                    //////////////

                    var rgxMapper = function (ua, arrays) {
                            var i = 0,
                                j,
                                k,
                                p,
                                q,
                                matches,
                                match;

                            // loop through all regexes maps
                            while (i < arrays.length && !matches) {
                                var regex = arrays[i], // even sequence (0,2,4,..)
                                    props = arrays[i + 1]; // odd sequence (1,3,5,..)
                                j = k = 0;

                                // try matching uastring with regexes
                                while (j < regex.length && !matches) {
                                    if (!regex[j]) {
                                        break;
                                    }
                                    matches = regex[j++].exec(ua);

                                    if (!!matches) {
                                        for (p = 0; p < props.length; p++) {
                                            match = matches[++k];
                                            q = props[p];
                                            // check if given property is actually array
                                            if (typeof q === OBJ_TYPE && q.length > 0) {
                                                if (q.length === 2) {
                                                    if (typeof q[1] == FUNC_TYPE) {
                                                        // assign modified match
                                                        this[q[0]] = q[1].call(this, match);
                                                    } else {
                                                        // assign given value, ignore regex match
                                                        this[q[0]] = q[1];
                                                    }
                                                } else if (q.length === 3) {
                                                    // check whether function or regex
                                                    if (
                                                        typeof q[1] === FUNC_TYPE &&
                                                        !(q[1].exec && q[1].test)
                                                    ) {
                                                        // call function (usually string mapper)
                                                        this[q[0]] = match
                                                            ? q[1].call(this, match, q[2])
                                                            : undefined;
                                                    } else {
                                                        // sanitize match using given regex
                                                        this[q[0]] = match
                                                            ? match.replace(q[1], q[2])
                                                            : undefined;
                                                    }
                                                } else if (q.length === 4) {
                                                    this[q[0]] = match
                                                        ? q[3].call(this, match.replace(q[1], q[2]))
                                                        : undefined;
                                                }
                                            } else {
                                                this[q] = match ? match : undefined;
                                            }
                                        }
                                    }
                                }
                                i += 2;
                            }
                        },
                        strMapper = function (str, map) {
                            for (var i in map) {
                                // check if current value is array
                                if (typeof map[i] === OBJ_TYPE && map[i].length > 0) {
                                    for (var j = 0; j < map[i].length; j++) {
                                        if (has(map[i][j], str)) {
                                            return i === UNKNOWN ? undefined : i;
                                        }
                                    }
                                } else if (has(map[i], str)) {
                                    return i === UNKNOWN ? undefined : i;
                                }
                            }
                            return str;
                        };

                    ///////////////
                    // String map
                    //////////////

                    // Safari < 3.0
                    var oldSafariMap = {
                            '1.0': '/8',
                            1.2: '/1',
                            1.3: '/3',
                            '2.0': '/412',
                            '2.0.2': '/416',
                            '2.0.3': '/417',
                            '2.0.4': '/419',
                            '?': '/',
                        },
                        windowsVersionMap = {
                            ME: '4.90',
                            'NT 3.11': 'NT3.51',
                            'NT 4.0': 'NT4.0',
                            2000: 'NT 5.0',
                            XP: ['NT 5.1', 'NT 5.2'],
                            Vista: 'NT 6.0',
                            7: 'NT 6.1',
                            8: 'NT 6.2',
                            8.1: 'NT 6.3',
                            10: ['NT 6.4', 'NT 10.0'],
                            RT: 'ARM',
                        };

                    //////////////
                    // Regex map
                    /////////////

                    var regexes = {
                        browser: [
                            [
                                /\b(?:crmo|crios)\/([\w\.]+)/i, // Chrome for Android/iOS
                            ],
                            [VERSION, [NAME, 'Chrome']],
                            [
                                /edg(?:e|ios|a)?\/([\w\.]+)/i, // Microsoft Edge
                            ],
                            [VERSION, [NAME, 'Edge']],
                            [
                                // Presto based
                                /(opera mini)\/([-\w\.]+)/i, // Opera Mini
                                /(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i, // Opera Mobi/Tablet
                                /(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i, // Opera
                            ],
                            [NAME, VERSION],
                            [
                                /opios[\/ ]+([\w\.]+)/i, // Opera mini on iphone >= 8.0
                            ],
                            [VERSION, [NAME, OPERA + ' Mini']],
                            [
                                /\bopr\/([\w\.]+)/i, // Opera Webkit
                            ],
                            [VERSION, [NAME, OPERA]],
                            [
                                // Mixed
                                /(kindle)\/([\w\.]+)/i, // Kindle
                                /(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i, // Lunascape/Maxthon/Netfront/Jasmine/Blazer
                                // Trident based
                                /(avant |iemobile|slim)(?:browser)?[\/ ]?([\w\.]*)/i, // Avant/IEMobile/SlimBrowser
                                /(ba?idubrowser)[\/ ]?([\w\.]+)/i, // Baidu Browser
                                /(?:ms|\()(ie) ([\w\.]+)/i, // Internet Explorer

                                // Webkit/KHTML based                                               // Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS/Bowser/QupZilla/Falkon
                                /(flock|rockmelt|midori|epiphany|silk|skyfire|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|qq|duckduckgo)\/([-\w\.]+)/i,
                                // Rekonq/Puffin/Brave/Whale/QQBrowserLite/QQ, aka ShouQ
                                /(heytap|ovi)browser\/([\d\.]+)/i, // Heytap/Ovi
                                /(weibo)__([\d\.]+)/i, // Weibo
                            ],
                            [NAME, VERSION],
                            [
                                /(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i, // UCBrowser
                            ],
                            [VERSION, [NAME, 'UC' + BROWSER]],
                            [
                                /microm.+\bqbcore\/([\w\.]+)/i, // WeChat Desktop for Windows Built-in Browser
                                /\bqbcore\/([\w\.]+).+microm/i,
                            ],
                            [VERSION, [NAME, 'WeChat(Win) Desktop']],
                            [
                                /micromessenger\/([\w\.]+)/i, // WeChat
                            ],
                            [VERSION, [NAME, 'WeChat']],
                            [
                                /konqueror\/([\w\.]+)/i, // Konqueror
                            ],
                            [VERSION, [NAME, 'Konqueror']],
                            [
                                /trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i, // IE11
                            ],
                            [VERSION, [NAME, 'IE']],
                            [
                                /ya(?:search)?browser\/([\w\.]+)/i, // Yandex
                            ],
                            [VERSION, [NAME, 'Yandex']],
                            [
                                /(avast|avg)\/([\w\.]+)/i, // Avast/AVG Secure Browser
                            ],
                            [[NAME, /(.+)/, '$1 Secure ' + BROWSER], VERSION],
                            [
                                /\bfocus\/([\w\.]+)/i, // Firefox Focus
                            ],
                            [VERSION, [NAME, FIREFOX + ' Focus']],
                            [
                                /\bopt\/([\w\.]+)/i, // Opera Touch
                            ],
                            [VERSION, [NAME, OPERA + ' Touch']],
                            [
                                /coc_coc\w+\/([\w\.]+)/i, // Coc Coc Browser
                            ],
                            [VERSION, [NAME, 'Coc Coc']],
                            [
                                /dolfin\/([\w\.]+)/i, // Dolphin
                            ],
                            [VERSION, [NAME, 'Dolphin']],
                            [
                                /coast\/([\w\.]+)/i, // Opera Coast
                            ],
                            [VERSION, [NAME, OPERA + ' Coast']],
                            [
                                /miuibrowser\/([\w\.]+)/i, // MIUI Browser
                            ],
                            [VERSION, [NAME, 'MIUI ' + BROWSER]],
                            [
                                /fxios\/([-\w\.]+)/i, // Firefox for iOS
                            ],
                            [VERSION, [NAME, FIREFOX]],
                            [
                                /\bqihu|(qi?ho?o?|360)browser/i, // 360
                            ],
                            [[NAME, '360 ' + BROWSER]],
                            [/(oculus|samsung|sailfish|huawei)browser\/([\w\.]+)/i],
                            [[NAME, /(.+)/, '$1 ' + BROWSER], VERSION],
                            [
                                // Oculus/Samsung/Sailfish/Huawei Browser
                                /(comodo_dragon)\/([\w\.]+)/i, // Comodo Dragon
                            ],
                            [[NAME, /_/g, ' '], VERSION],
                            [
                                /(electron)\/([\w\.]+) safari/i, // Electron-based App
                                /(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i, // Tesla
                                /m?(qqbrowser|baiduboxapp|2345Explorer)[\/ ]?([\w\.]+)/i, // QQBrowser/Baidu App/2345 Browser
                            ],
                            [NAME, VERSION],
                            [
                                /(metasr)[\/ ]?([\w\.]+)/i, // SouGouBrowser
                                /(lbbrowser)/i, // LieBao Browser
                                /\[(linkedin)app\]/i, // LinkedIn App for iOS & Android
                            ],
                            [NAME],
                            [
                                // WebView
                                /((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i, // Facebook App for iOS & Android
                            ],
                            [[NAME, FACEBOOK], VERSION],
                            [
                                /(kakao(?:talk|story))[\/ ]([\w\.]+)/i, // Kakao App
                                /(naver)\(.*?(\d+\.[\w\.]+).*\)/i, // Naver InApp
                                /safari (line)\/([\w\.]+)/i, // Line App for iOS
                                /\b(line)\/([\w\.]+)\/iab/i, // Line App for Android
                                /(chromium|instagram)[\/ ]([-\w\.]+)/i, // Chromium/Instagram
                            ],
                            [NAME, VERSION],
                            [
                                /\bgsa\/([\w\.]+) .*safari\//i, // Google Search Appliance on iOS
                            ],
                            [VERSION, [NAME, 'GSA']],
                            [
                                /musical_ly(?:.+app_?version\/|_)([\w\.]+)/i, // TikTok
                            ],
                            [VERSION, [NAME, 'TikTok']],
                            [
                                /headlesschrome(?:\/([\w\.]+)| )/i, // Chrome Headless
                            ],
                            [VERSION, [NAME, CHROME + ' Headless']],
                            [
                                / wv\).+(chrome)\/([\w\.]+)/i, // Chrome WebView
                            ],
                            [[NAME, CHROME + ' WebView'], VERSION],
                            [
                                /droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i, // Android Browser
                            ],
                            [VERSION, [NAME, 'Android ' + BROWSER]],
                            [
                                /(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i, // Chrome/OmniWeb/Arora/Tizen/Nokia
                            ],
                            [NAME, VERSION],
                            [
                                /version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i, // Mobile Safari
                            ],
                            [VERSION, [NAME, 'Mobile Safari']],
                            [
                                /version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i, // Safari & Safari Mobile
                            ],
                            [VERSION, NAME],
                            [
                                /webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i, // Safari < 3.0
                            ],
                            [NAME, [VERSION, strMapper, oldSafariMap]],
                            [/(webkit|khtml)\/([\w\.]+)/i],
                            [NAME, VERSION],
                            [
                                // Gecko based
                                /(navigator|netscape\d?)\/([-\w\.]+)/i, // Netscape
                            ],
                            [[NAME, 'Netscape'], VERSION],
                            [
                                /mobile vr; rv:([\w\.]+)\).+firefox/i, // Firefox Reality
                            ],
                            [VERSION, [NAME, FIREFOX + ' Reality']],
                            [
                                /ekiohf.+(flow)\/([\w\.]+)/i, // Flow
                                /(swiftfox)/i, // Swiftfox
                                /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i,
                                // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror/Klar
                                /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,
                                // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix
                                /(firefox)\/([\w\.]+)/i, // Other Firefox-based
                                /(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i, // Mozilla

                                // Other
                                /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,
                                // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Sleipnir/Obigo/Mosaic/Go/ICE/UP.Browser
                                /(links) \(([\w\.]+)/i, // Links
                                /panasonic;(viera)/i, // Panasonic Viera
                            ],
                            [NAME, VERSION],
                            [
                                /(cobalt)\/([\w\.]+)/i, // Cobalt
                            ],
                            [NAME, [VERSION, /master.|lts./, '']],
                        ],

                        cpu: [
                            [
                                /(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i, // AMD64 (x64)
                            ],
                            [[ARCHITECTURE, 'amd64']],
                            [
                                /(ia32(?=;))/i, // IA32 (quicktime)
                            ],
                            [[ARCHITECTURE, lowerize]],
                            [
                                /((?:i[346]|x)86)[;\)]/i, // IA32 (x86)
                            ],
                            [[ARCHITECTURE, 'ia32']],
                            [
                                /\b(aarch64|arm(v?8e?l?|_?64))\b/i, // ARM64
                            ],
                            [[ARCHITECTURE, 'arm64']],
                            [
                                /\b(arm(?:v[67])?ht?n?[fl]p?)\b/i, // ARMHF
                            ],
                            [[ARCHITECTURE, 'armhf']],
                            [
                                // PocketPC mistakenly identified as PowerPC
                                /windows (ce|mobile); ppc;/i,
                            ],
                            [[ARCHITECTURE, 'arm']],
                            [
                                /((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i, // PowerPC
                            ],
                            [[ARCHITECTURE, /ower/, EMPTY, lowerize]],
                            [
                                /(sun4\w)[;\)]/i, // SPARC
                            ],
                            [[ARCHITECTURE, 'sparc']],
                            [
                                /((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i,
                                // IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC
                            ],
                            [[ARCHITECTURE, lowerize]],
                        ],

                        device: [
                            [
                                //////////////////////////
                                // MOBILES & TABLETS
                                /////////////////////////

                                // Samsung
                                /\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i,
                            ],
                            [MODEL, [VENDOR, SAMSUNG], [TYPE, TABLET]],
                            [
                                /\b((?:s[cgp]h|gt|sm)-\w+|sc[g-]?[\d]+a?|galaxy nexus)/i,
                                /samsung[- ]([-\w]+)/i,
                                /sec-(sgh\w+)/i,
                            ],
                            [MODEL, [VENDOR, SAMSUNG], [TYPE, MOBILE]],
                            [
                                // Apple
                                /(?:\/|\()(ip(?:hone|od)[\w, ]*)(?:\/|;)/i, // iPod/iPhone
                            ],
                            [MODEL, [VENDOR, APPLE], [TYPE, MOBILE]],
                            [
                                /\((ipad);[-\w\),; ]+apple/i, // iPad
                                /applecoremedia\/[\w\.]+ \((ipad)/i,
                                /\b(ipad)\d\d?,\d\d?[;\]].+ios/i,
                            ],
                            [MODEL, [VENDOR, APPLE], [TYPE, TABLET]],
                            [/(macintosh);/i],
                            [MODEL, [VENDOR, APPLE]],
                            [
                                // Sharp
                                /\b(sh-?[altvz]?\d\d[a-ekm]?)/i,
                            ],
                            [MODEL, [VENDOR, SHARP], [TYPE, MOBILE]],
                            [
                                // Huawei
                                /\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i,
                            ],
                            [MODEL, [VENDOR, HUAWEI], [TYPE, TABLET]],
                            [
                                /(?:huawei|honor)([-\w ]+)[;\)]/i,
                                /\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i,
                            ],
                            [MODEL, [VENDOR, HUAWEI], [TYPE, MOBILE]],
                            [
                                // Xiaomi
                                /\b(poco[\w ]+)(?: bui|\))/i, // Xiaomi POCO
                                /\b; (\w+) build\/hm\1/i, // Xiaomi Hongmi 'numeric' models
                                /\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i, // Xiaomi Hongmi
                                /\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i, // Xiaomi Redmi
                                /\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i, // Xiaomi Mi
                            ],
                            [
                                [MODEL, /_/g, ' '],
                                [VENDOR, XIAOMI],
                                [TYPE, MOBILE],
                            ],
                            [
                                /\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i, // Mi Pad tablets
                            ],
                            [
                                [MODEL, /_/g, ' '],
                                [VENDOR, XIAOMI],
                                [TYPE, TABLET],
                            ],
                            [
                                // OPPO
                                /; (\w+) bui.+ oppo/i,
                                /\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i,
                            ],
                            [MODEL, [VENDOR, 'OPPO'], [TYPE, MOBILE]],
                            [
                                // Vivo
                                /vivo (\w+)(?: bui|\))/i,
                                /\b(v[12]\d{3}\w?[at])(?: bui|;)/i,
                            ],
                            [MODEL, [VENDOR, 'Vivo'], [TYPE, MOBILE]],
                            [
                                // Realme
                                /\b(rmx[12]\d{3})(?: bui|;|\))/i,
                            ],
                            [MODEL, [VENDOR, 'Realme'], [TYPE, MOBILE]],
                            [
                                // Motorola
                                /\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,
                                /\bmot(?:orola)?[- ](\w*)/i,
                                /((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i,
                            ],
                            [MODEL, [VENDOR, MOTOROLA], [TYPE, MOBILE]],
                            [/\b(mz60\d|xoom[2 ]{0,2}) build\//i],
                            [MODEL, [VENDOR, MOTOROLA], [TYPE, TABLET]],
                            [
                                // LG
                                /((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i,
                            ],
                            [MODEL, [VENDOR, LG], [TYPE, TABLET]],
                            [
                                /(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,
                                /\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,
                                /\blg-?([\d\w]+) bui/i,
                            ],
                            [MODEL, [VENDOR, LG], [TYPE, MOBILE]],
                            [
                                // Lenovo
                                /(ideatab[-\w ]+)/i,
                                /lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i,
                            ],
                            [MODEL, [VENDOR, 'Lenovo'], [TYPE, TABLET]],
                            [
                                // Nokia
                                /(?:maemo|nokia).*(n900|lumia \d+)/i,
                                /nokia[-_ ]?([-\w\.]*)/i,
                            ],
                            [
                                [MODEL, /_/g, ' '],
                                [VENDOR, 'Nokia'],
                                [TYPE, MOBILE],
                            ],
                            [
                                // Google
                                /(pixel c)\b/i, // Google Pixel C
                            ],
                            [MODEL, [VENDOR, GOOGLE], [TYPE, TABLET]],
                            [
                                /droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i, // Google Pixel
                            ],
                            [MODEL, [VENDOR, GOOGLE], [TYPE, MOBILE]],
                            [
                                // Sony
                                /droid.+ (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i,
                            ],
                            [MODEL, [VENDOR, SONY], [TYPE, MOBILE]],
                            [/sony tablet [ps]/i, /\b(?:sony)?sgp\w+(?: bui|\))/i],
                            [
                                [MODEL, 'Xperia Tablet'],
                                [VENDOR, SONY],
                                [TYPE, TABLET],
                            ],
                            [
                                // OnePlus
                                / (kb2005|in20[12]5|be20[12][59])\b/i,
                                /(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i,
                            ],
                            [MODEL, [VENDOR, 'OnePlus'], [TYPE, MOBILE]],
                            [
                                // Amazon
                                /(alexa)webm/i,
                                /(kf[a-z]{2}wi|aeo[c-r]{2})( bui|\))/i, // Kindle Fire without Silk / Echo Show
                                /(kf[a-z]+)( bui|\)).+silk\//i, // Kindle Fire HD
                            ],
                            [MODEL, [VENDOR, AMAZON], [TYPE, TABLET]],
                            [
                                /((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i, // Fire Phone
                            ],
                            [
                                [MODEL, /(.+)/g, 'Fire Phone $1'],
                                [VENDOR, AMAZON],
                                [TYPE, MOBILE],
                            ],
                            [
                                // BlackBerry
                                /(playbook);[-\w\),; ]+(rim)/i, // BlackBerry PlayBook
                            ],
                            [MODEL, VENDOR, [TYPE, TABLET]],
                            [
                                /\b((?:bb[a-f]|st[hv])100-\d)/i,
                                /\(bb10; (\w+)/i, // BlackBerry 10
                            ],
                            [MODEL, [VENDOR, BLACKBERRY], [TYPE, MOBILE]],
                            [
                                // Asus
                                /(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i,
                            ],
                            [MODEL, [VENDOR, ASUS], [TYPE, TABLET]],
                            [/ (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i],
                            [MODEL, [VENDOR, ASUS], [TYPE, MOBILE]],
                            [
                                // HTC
                                /(nexus 9)/i, // HTC Nexus 9
                            ],
                            [MODEL, [VENDOR, 'HTC'], [TYPE, TABLET]],
                            [
                                /(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i, // HTC

                                // ZTE
                                /(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,
                                /(alcatel|geeksphone|nexian|panasonic(?!(?:;|\.))|sony(?!-bra))[-_ ]?([-\w]*)/i, // Alcatel/GeeksPhone/Nexian/Panasonic/Sony
                            ],
                            [VENDOR, [MODEL, /_/g, ' '], [TYPE, MOBILE]],
                            [
                                // Acer
                                /droid.+; ([ab][1-7]-?[0178a]\d\d?)/i,
                            ],
                            [MODEL, [VENDOR, 'Acer'], [TYPE, TABLET]],
                            [
                                // Meizu
                                /droid.+; (m[1-5] note) bui/i,
                                /\bmz-([-\w]{2,})/i,
                            ],
                            [MODEL, [VENDOR, 'Meizu'], [TYPE, MOBILE]],
                            [
                                // MIXED
                                /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[-_ ]?([-\w]*)/i,
                                // BlackBerry/BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Meizu/Motorola/Polytron
                                /(hp) ([\w ]+\w)/i, // HP iPAQ
                                /(asus)-?(\w+)/i, // Asus
                                /(microsoft); (lumia[\w ]+)/i, // Microsoft Lumia
                                /(lenovo)[-_ ]?([-\w]+)/i, // Lenovo
                                /(jolla)/i, // Jolla
                                /(oppo) ?([\w ]+) bui/i, // OPPO
                            ],
                            [VENDOR, MODEL, [TYPE, MOBILE]],
                            [
                                /(kobo)\s(ereader|touch)/i, // Kobo
                                /(archos) (gamepad2?)/i, // Archos
                                /(hp).+(touchpad(?!.+tablet)|tablet)/i, // HP TouchPad
                                /(kindle)\/([\w\.]+)/i, // Kindle
                                /(nook)[\w ]+build\/(\w+)/i, // Nook
                                /(dell) (strea[kpr\d ]*[\dko])/i, // Dell Streak
                                /(le[- ]+pan)[- ]+(\w{1,9}) bui/i, // Le Pan Tablets
                                /(trinity)[- ]*(t\d{3}) bui/i, // Trinity Tablets
                                /(gigaset)[- ]+(q\w{1,9}) bui/i, // Gigaset Tablets
                                /(vodafone) ([\w ]+)(?:\)| bui)/i, // Vodafone
                            ],
                            [VENDOR, MODEL, [TYPE, TABLET]],
                            [
                                /(surface duo)/i, // Surface Duo
                            ],
                            [MODEL, [VENDOR, MICROSOFT], [TYPE, TABLET]],
                            [
                                /droid [\d\.]+; (fp\du?)(?: b|\))/i, // Fairphone
                            ],
                            [MODEL, [VENDOR, 'Fairphone'], [TYPE, MOBILE]],
                            [
                                /(u304aa)/i, // AT&T
                            ],
                            [MODEL, [VENDOR, 'AT&T'], [TYPE, MOBILE]],
                            [
                                /\bsie-(\w*)/i, // Siemens
                            ],
                            [MODEL, [VENDOR, 'Siemens'], [TYPE, MOBILE]],
                            [
                                /\b(rct\w+) b/i, // RCA Tablets
                            ],
                            [MODEL, [VENDOR, 'RCA'], [TYPE, TABLET]],
                            [
                                /\b(venue[\d ]{2,7}) b/i, // Dell Venue Tablets
                            ],
                            [MODEL, [VENDOR, 'Dell'], [TYPE, TABLET]],
                            [
                                /\b(q(?:mv|ta)\w+) b/i, // Verizon Tablet
                            ],
                            [MODEL, [VENDOR, 'Verizon'], [TYPE, TABLET]],
                            [
                                /\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i, // Barnes & Noble Tablet
                            ],
                            [MODEL, [VENDOR, 'Barnes & Noble'], [TYPE, TABLET]],
                            [/\b(tm\d{3}\w+) b/i],
                            [MODEL, [VENDOR, 'NuVision'], [TYPE, TABLET]],
                            [
                                /\b(k88) b/i, // ZTE K Series Tablet
                            ],
                            [MODEL, [VENDOR, 'ZTE'], [TYPE, TABLET]],
                            [
                                /\b(nx\d{3}j) b/i, // ZTE Nubia
                            ],
                            [MODEL, [VENDOR, 'ZTE'], [TYPE, MOBILE]],
                            [
                                /\b(gen\d{3}) b.+49h/i, // Swiss GEN Mobile
                            ],
                            [MODEL, [VENDOR, 'Swiss'], [TYPE, MOBILE]],
                            [
                                /\b(zur\d{3}) b/i, // Swiss ZUR Tablet
                            ],
                            [MODEL, [VENDOR, 'Swiss'], [TYPE, TABLET]],
                            [
                                /\b((zeki)?tb.*\b) b/i, // Zeki Tablets
                            ],
                            [MODEL, [VENDOR, 'Zeki'], [TYPE, TABLET]],
                            [
                                /\b([yr]\d{2}) b/i,
                                /\b(dragon[- ]+touch |dt)(\w{5}) b/i, // Dragon Touch Tablet
                            ],
                            [[VENDOR, 'Dragon Touch'], MODEL, [TYPE, TABLET]],
                            [
                                /\b(ns-?\w{0,9}) b/i, // Insignia Tablets
                            ],
                            [MODEL, [VENDOR, 'Insignia'], [TYPE, TABLET]],
                            [
                                /\b((nxa|next)-?\w{0,9}) b/i, // NextBook Tablets
                            ],
                            [MODEL, [VENDOR, 'NextBook'], [TYPE, TABLET]],
                            [
                                /\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i, // Voice Xtreme Phones
                            ],
                            [[VENDOR, 'Voice'], MODEL, [TYPE, MOBILE]],
                            [
                                /\b(lvtel\-)?(v1[12]) b/i, // LvTel Phones
                            ],
                            [[VENDOR, 'LvTel'], MODEL, [TYPE, MOBILE]],
                            [
                                /\b(ph-1) /i, // Essential PH-1
                            ],
                            [MODEL, [VENDOR, 'Essential'], [TYPE, MOBILE]],
                            [
                                /\b(v(100md|700na|7011|917g).*\b) b/i, // Envizen Tablets
                            ],
                            [MODEL, [VENDOR, 'Envizen'], [TYPE, TABLET]],
                            [
                                /\b(trio[-\w\. ]+) b/i, // MachSpeed Tablets
                            ],
                            [MODEL, [VENDOR, 'MachSpeed'], [TYPE, TABLET]],
                            [
                                /\btu_(1491) b/i, // Rotor Tablets
                            ],
                            [MODEL, [VENDOR, 'Rotor'], [TYPE, TABLET]],
                            [
                                /(shield[\w ]+) b/i, // Nvidia Shield Tablets
                            ],
                            [MODEL, [VENDOR, 'Nvidia'], [TYPE, TABLET]],
                            [
                                /(sprint) (\w+)/i, // Sprint Phones
                            ],
                            [VENDOR, MODEL, [TYPE, MOBILE]],
                            [
                                /(kin\.[onetw]{3})/i, // Microsoft Kin
                            ],
                            [
                                [MODEL, /\./g, ' '],
                                [VENDOR, MICROSOFT],
                                [TYPE, MOBILE],
                            ],
                            [
                                /droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i, // Zebra
                            ],
                            [MODEL, [VENDOR, ZEBRA], [TYPE, TABLET]],
                            [/droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i],
                            [MODEL, [VENDOR, ZEBRA], [TYPE, MOBILE]],
                            [
                                ///////////////////
                                // SMARTTVS
                                ///////////////////

                                /smart-tv.+(samsung)/i, // Samsung
                            ],
                            [VENDOR, [TYPE, SMARTTV]],
                            [/hbbtv.+maple;(\d+)/i],
                            [
                                [MODEL, /^/, 'SmartTV'],
                                [VENDOR, SAMSUNG],
                                [TYPE, SMARTTV],
                            ],
                            [
                                /(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i, // LG SmartTV
                            ],
                            [
                                [VENDOR, LG],
                                [TYPE, SMARTTV],
                            ],
                            [
                                /(apple) ?tv/i, // Apple TV
                            ],
                            [VENDOR, [MODEL, APPLE + ' TV'], [TYPE, SMARTTV]],
                            [
                                /crkey/i, // Google Chromecast
                            ],
                            [
                                [MODEL, CHROME + 'cast'],
                                [VENDOR, GOOGLE],
                                [TYPE, SMARTTV],
                            ],
                            [
                                /droid.+aft(\w)( bui|\))/i, // Fire TV
                            ],
                            [MODEL, [VENDOR, AMAZON], [TYPE, SMARTTV]],
                            [
                                /\(dtv[\);].+(aquos)/i,
                                /(aquos-tv[\w ]+)\)/i, // Sharp
                            ],
                            [MODEL, [VENDOR, SHARP], [TYPE, SMARTTV]],
                            [
                                /(bravia[\w ]+)( bui|\))/i, // Sony
                            ],
                            [MODEL, [VENDOR, SONY], [TYPE, SMARTTV]],
                            [
                                /(mitv-\w{5}) bui/i, // Xiaomi
                            ],
                            [MODEL, [VENDOR, XIAOMI], [TYPE, SMARTTV]],
                            [
                                /Hbbtv.*(technisat) (.*);/i, // TechniSAT
                            ],
                            [VENDOR, MODEL, [TYPE, SMARTTV]],
                            [
                                /\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i, // Roku
                                /hbbtv\/\d+\.\d+\.\d+ +\([\w\+ ]*; *([\w\d][^;]*);([^;]*)/i, // HbbTV devices
                            ],
                            [
                                [VENDOR, trim],
                                [MODEL, trim],
                                [TYPE, SMARTTV],
                            ],
                            [
                                /\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i, // SmartTV from Unidentified Vendors
                            ],
                            [[TYPE, SMARTTV]],
                            [
                                ///////////////////
                                // CONSOLES
                                ///////////////////

                                /(ouya)/i, // Ouya
                                /(nintendo) ([wids3utch]+)/i, // Nintendo
                            ],
                            [VENDOR, MODEL, [TYPE, CONSOLE]],
                            [
                                /droid.+; (shield) bui/i, // Nvidia
                            ],
                            [MODEL, [VENDOR, 'Nvidia'], [TYPE, CONSOLE]],
                            [
                                /(playstation [345portablevi]+)/i, // Playstation
                            ],
                            [MODEL, [VENDOR, SONY], [TYPE, CONSOLE]],
                            [
                                /\b(xbox(?: one)?(?!; xbox))[\); ]/i, // Microsoft Xbox
                            ],
                            [MODEL, [VENDOR, MICROSOFT], [TYPE, CONSOLE]],
                            [
                                ///////////////////
                                // WEARABLES
                                ///////////////////

                                /((pebble))app/i, // Pebble
                            ],
                            [VENDOR, MODEL, [TYPE, WEARABLE]],
                            [
                                /(watch)(?: ?os[,\/]|\d,\d\/)[\d\.]+/i, // Apple Watch
                            ],
                            [MODEL, [VENDOR, APPLE], [TYPE, WEARABLE]],
                            [
                                /droid.+; (glass) \d/i, // Google Glass
                            ],
                            [MODEL, [VENDOR, GOOGLE], [TYPE, WEARABLE]],
                            [/droid.+; (wt63?0{2,3})\)/i],
                            [MODEL, [VENDOR, ZEBRA], [TYPE, WEARABLE]],
                            [
                                /(quest( 2| pro)?)/i, // Oculus Quest
                            ],
                            [MODEL, [VENDOR, FACEBOOK], [TYPE, WEARABLE]],
                            [
                                ///////////////////
                                // EMBEDDED
                                ///////////////////

                                /(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i, // Tesla
                            ],
                            [VENDOR, [TYPE, EMBEDDED]],
                            [
                                /(aeobc)\b/i, // Echo Dot
                            ],
                            [MODEL, [VENDOR, AMAZON], [TYPE, EMBEDDED]],
                            [
                                ////////////////////
                                // MIXED (GENERIC)
                                ///////////////////

                                /droid .+?; ([^;]+?)(?: bui|\) applew).+? mobile safari/i, // Android Phones from Unidentified Vendors
                            ],
                            [MODEL, [TYPE, MOBILE]],
                            [
                                /droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i, // Android Tablets from Unidentified Vendors
                            ],
                            [MODEL, [TYPE, TABLET]],
                            [
                                /\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i, // Unidentifiable Tablet
                            ],
                            [[TYPE, TABLET]],
                            [
                                /(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i, // Unidentifiable Mobile
                            ],
                            [[TYPE, MOBILE]],
                            [
                                /(android[-\w\. ]{0,9});.+buil/i, // Generic Android Device
                            ],
                            [MODEL, [VENDOR, 'Generic']],
                        ],

                        engine: [
                            [
                                /windows.+ edge\/([\w\.]+)/i, // EdgeHTML
                            ],
                            [VERSION, [NAME, EDGE + 'HTML']],
                            [
                                /webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i, // Blink
                            ],
                            [VERSION, [NAME, 'Blink']],
                            [
                                /(presto)\/([\w\.]+)/i, // Presto
                                /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i, // WebKit/Trident/NetFront/NetSurf/Amaya/Lynx/w3m/Goanna
                                /ekioh(flow)\/([\w\.]+)/i, // Flow
                                /(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i, // KHTML/Tasman/Links
                                /(icab)[\/ ]([23]\.[\d\.]+)/i, // iCab
                                /\b(libweb)/i,
                            ],
                            [NAME, VERSION],
                            [
                                /rv\:([\w\.]{1,9})\b.+(gecko)/i, // Gecko
                            ],
                            [VERSION, NAME],
                        ],

                        os: [
                            [
                                // Windows
                                /microsoft (windows) (vista|xp)/i, // Windows (iTunes)
                            ],
                            [NAME, VERSION],
                            [
                                /(windows) nt 6\.2; (arm)/i, // Windows RT
                                /(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i, // Windows Phone
                                /(windows)[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i,
                            ],
                            [NAME, [VERSION, strMapper, windowsVersionMap]],
                            [/(win(?=3|9|n)|win 9x )([nt\d\.]+)/i],
                            [
                                [NAME, 'Windows'],
                                [VERSION, strMapper, windowsVersionMap],
                            ],
                            [
                                // iOS/macOS
                                /ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i, // iOS
                                /ios;fbsv\/([\d\.]+)/i,
                                /cfnetwork\/.+darwin/i,
                            ],
                            [
                                [VERSION, /_/g, '.'],
                                [NAME, 'iOS'],
                            ],
                            [
                                /(mac os x) ?([\w\. ]*)/i,
                                /(macintosh|mac_powerpc\b)(?!.+haiku)/i, // Mac OS
                            ],
                            [
                                [NAME, MAC_OS],
                                [VERSION, /_/g, '.'],
                            ],
                            [
                                // Mobile OSes
                                /droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i, // Android-x86/HarmonyOS
                            ],
                            [VERSION, NAME],
                            [
                                // Android/WebOS/QNX/Bada/RIM/Maemo/MeeGo/Sailfish OS
                                /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i,
                                /(blackberry)\w*\/([\w\.]*)/i, // Blackberry
                                /(tizen|kaios)[\/ ]([\w\.]+)/i, // Tizen/KaiOS
                                /\((series40);/i, // Series 40
                            ],
                            [NAME, VERSION],
                            [
                                /\(bb(10);/i, // BlackBerry 10
                            ],
                            [VERSION, [NAME, BLACKBERRY]],
                            [
                                /(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i, // Symbian
                            ],
                            [VERSION, [NAME, 'Symbian']],
                            [
                                /mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i, // Firefox OS
                            ],
                            [VERSION, [NAME, FIREFOX + ' OS']],
                            [
                                /web0s;.+rt(tv)/i,
                                /\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i, // WebOS
                            ],
                            [VERSION, [NAME, 'webOS']],
                            [
                                /watch(?: ?os[,\/]|\d,\d\/)([\d\.]+)/i, // watchOS
                            ],
                            [VERSION, [NAME, 'watchOS']],
                            [
                                // Google Chromecast
                                /crkey\/([\d\.]+)/i, // Google Chromecast
                            ],
                            [VERSION, [NAME, CHROME + 'cast']],
                            [
                                /(cros) [\w]+(?:\)| ([\w\.]+)\b)/i, // Chromium OS
                            ],
                            [[NAME, CHROMIUM_OS], VERSION],
                            [
                                // Smart TVs
                                /panasonic;(viera)/i, // Panasonic Viera
                                /(netrange)mmh/i, // Netrange
                                /(nettv)\/(\d+\.[\w\.]+)/i, // NetTV

                                // Console
                                /(nintendo|playstation) ([wids345portablevuch]+)/i, // Nintendo/Playstation
                                /(xbox); +xbox ([^\);]+)/i, // Microsoft Xbox (360, One, X, S, Series X, Series S)

                                // Other
                                /\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i, // Joli/Palm
                                /(mint)[\/\(\) ]?(\w*)/i, // Mint
                                /(mageia|vectorlinux)[; ]/i, // Mageia/VectorLinux
                                /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,
                                // Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware/Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus/Raspbian/Plan9/Minix/RISCOS/Contiki/Deepin/Manjaro/elementary/Sabayon/Linspire
                                /(hurd|linux) ?([\w\.]*)/i, // Hurd/Linux
                                /(gnu) ?([\w\.]*)/i, // GNU
                                /\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i, // FreeBSD/NetBSD/OpenBSD/PC-BSD/GhostBSD/DragonFly
                                /(haiku) (\w+)/i, // Haiku
                            ],
                            [NAME, VERSION],
                            [
                                /(sunos) ?([\w\.\d]*)/i, // Solaris
                            ],
                            [[NAME, 'Solaris'], VERSION],
                            [
                                /((?:open)?solaris)[-\/ ]?([\w\.]*)/i, // Solaris
                                /(aix) ((\d)(?=\.|\)| )[\w\.])*/i, // AIX
                                /\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i, // BeOS/OS2/AmigaOS/MorphOS/OpenVMS/Fuchsia/HP-UX/SerenityOS
                                /(unix) ?([\w\.]*)/i, // UNIX
                            ],
                            [NAME, VERSION],
                        ],
                    };

                    /////////////////
                    // Constructor
                    ////////////////

                    var UAParser = function (ua, extensions) {
                        if (typeof ua === OBJ_TYPE) {
                            extensions = ua;
                            ua = undefined;
                        }

                        if (!(this instanceof UAParser)) {
                            return new UAParser(ua, extensions).getResult();
                        }

                        var _navigator =
                            typeof window !== UNDEF_TYPE && window.navigator
                                ? window.navigator
                                : undefined;
                        var _ua =
                            ua ||
                            (_navigator && _navigator.userAgent ? _navigator.userAgent : EMPTY);
                        var _uach =
                            _navigator && _navigator.userAgentData
                                ? _navigator.userAgentData
                                : undefined;
                        var _rgxmap = extensions ? extend(regexes, extensions) : regexes;
                        var _isSelfNav = _navigator && _navigator.userAgent == _ua;

                        this.getBrowser = function () {
                            var _browser = {};
                            _browser[NAME] = undefined;
                            _browser[VERSION] = undefined;
                            rgxMapper.call(_browser, _ua, _rgxmap.browser);
                            _browser[MAJOR] = majorize(_browser[VERSION]);
                            // Brave-specific detection
                            if (
                                _isSelfNav &&
                                _navigator &&
                                _navigator.brave &&
                                typeof _navigator.brave.isBrave == FUNC_TYPE
                            ) {
                                _browser[NAME] = 'Brave';
                            }
                            return _browser;
                        };
                        this.getCPU = function () {
                            var _cpu = {};
                            _cpu[ARCHITECTURE] = undefined;
                            rgxMapper.call(_cpu, _ua, _rgxmap.cpu);
                            return _cpu;
                        };
                        this.getDevice = function () {
                            var _device = {};
                            _device[VENDOR] = undefined;
                            _device[MODEL] = undefined;
                            _device[TYPE] = undefined;
                            rgxMapper.call(_device, _ua, _rgxmap.device);
                            if (_isSelfNav && !_device[TYPE] && _uach && _uach.mobile) {
                                _device[TYPE] = MOBILE;
                            }
                            // iPadOS-specific detection: identified as Mac, but has some iOS-only properties
                            if (
                                _isSelfNav &&
                                _device[MODEL] == 'Macintosh' &&
                                _navigator &&
                                typeof _navigator.standalone !== UNDEF_TYPE &&
                                _navigator.maxTouchPoints &&
                                _navigator.maxTouchPoints > 2
                            ) {
                                _device[MODEL] = 'iPad';
                                _device[TYPE] = TABLET;
                            }
                            return _device;
                        };
                        this.getEngine = function () {
                            var _engine = {};
                            _engine[NAME] = undefined;
                            _engine[VERSION] = undefined;
                            rgxMapper.call(_engine, _ua, _rgxmap.engine);
                            return _engine;
                        };
                        this.getOS = function () {
                            var _os = {};
                            _os[NAME] = undefined;
                            _os[VERSION] = undefined;
                            rgxMapper.call(_os, _ua, _rgxmap.os);
                            if (_isSelfNav && !_os[NAME] && _uach && _uach.platform != 'Unknown') {
                                _os[NAME] = _uach.platform
                                    .replace(/chrome os/i, CHROMIUM_OS)
                                    .replace(/macos/i, MAC_OS); // backward compatibility
                            }
                            return _os;
                        };
                        this.getResult = function () {
                            return {
                                ua: this.getUA(),
                                browser: this.getBrowser(),
                                engine: this.getEngine(),
                                os: this.getOS(),
                                device: this.getDevice(),
                                cpu: this.getCPU(),
                            };
                        };
                        this.getUA = function () {
                            return _ua;
                        };
                        this.setUA = function (ua) {
                            _ua =
                                typeof ua === STR_TYPE && ua.length > UA_MAX_LENGTH
                                    ? trim(ua, UA_MAX_LENGTH)
                                    : ua;
                            return this;
                        };
                        this.setUA(_ua);
                        return this;
                    };

                    UAParser.VERSION = LIBVERSION;
                    UAParser.BROWSER = enumerize([NAME, VERSION, MAJOR]);
                    UAParser.CPU = enumerize([ARCHITECTURE]);
                    UAParser.DEVICE = enumerize([
                        MODEL,
                        VENDOR,
                        TYPE,
                        CONSOLE,
                        MOBILE,
                        SMARTTV,
                        TABLET,
                        WEARABLE,
                        EMBEDDED,
                    ]);
                    UAParser.ENGINE = UAParser.OS = enumerize([NAME, VERSION]);

                    ///////////
                    // Export
                    //////////

                    // check js environment
                    if (typeof exports !== UNDEF_TYPE) {
                        // nodejs env
                        if (typeof module !== UNDEF_TYPE && module.exports) {
                            exports = module.exports = UAParser;
                        }
                        exports.UAParser = UAParser;
                    } else {
                        // requirejs env (optional)
                        if (typeof define === FUNC_TYPE && define.amd) {
                            define(function () {
                                return UAParser;
                            });
                        } else if (typeof window !== UNDEF_TYPE) {
                            // browser env
                            window.UAParser = UAParser;
                        }
                    }

                    // jQuery/Zepto specific (optional)
                    // Note:
                    //   In AMD env the global scope should be kept clean, but jQuery is an exception.
                    //   jQuery always exports to global scope, unless jQuery.noConflict(true) is used,
                    //   and we should catch that.
                    var $ = typeof window !== UNDEF_TYPE && (window.jQuery || window.Zepto);
                    if ($ && !$.ua) {
                        var parser = new UAParser();
                        $.ua = parser.getResult();
                        $.ua.get = function () {
                            return parser.getUA();
                        };
                        $.ua.set = function (ua) {
                            parser.setUA(ua);
                            var result = parser.getResult();
                            for (var prop in result) {
                                $.ua[prop] = result[prop];
                            }
                        };
                    }
                })(typeof window === 'object' ? window : this);
            },
            {},
        ],
    },
    {},
    [1],
);
